<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Define Matrix Multiply as a User Atomic Operation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Define Matrix Multiply as a User Atomic Operation"/>
<meta name="keywords" id="keywords" content=" define matrix multiply user atomic operation old_mat_mul old_atomic test syntax example begin source extra call information indexing one reverse partials order set union cppad callback functions declare mat_mul function "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_old_mat_mul.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="old_mat_mul.cpp.xml" target="_top">Prev</a>
</td><td><a href="zdouble.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>old_atomic</option>
<option>old_mat_mul.cpp</option>
<option>old_mat_mul.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>deprecated-&gt;</option>
<option>include_deprecated</option>
<option>FunDeprecated</option>
<option>CompareChange</option>
<option>omp_max_thread</option>
<option>TrackNewDel</option>
<option>omp_alloc</option>
<option>memory_leak</option>
<option>epsilon</option>
<option>test_vector</option>
<option>cppad_ipopt_nlp</option>
<option>old_atomic</option>
<option>zdouble</option>
<option>autotools</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>old_atomic-&gt;</option>
<option>old_reciprocal.cpp</option>
<option>old_usead_1.cpp</option>
<option>old_usead_2.cpp</option>
<option>old_tan.cpp</option>
<option>old_mat_mul.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>old_mat_mul.cpp-&gt;</option>
<option>old_mat_mul.hpp</option>
</select>
</td>
<td>old_mat_mul.hpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Example</option>
<option>Begin Source</option>
<option>Extra Call Information</option>
<option>Matrix Indexing</option>
<option>One Matrix Multiply</option>
<option>Reverse Partials One Order</option>
<option>Set Union</option>
<option>CppAD User Atomic Callback Functions</option>
<option>Declare mat_mul Function</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Define Matrix Multiply as a User Atomic Operation</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>
<br/>
This file is located in the <code><font color="blue">example</font></code> directory.
It can be copied to the current working directory and included
with the syntax

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;#&#xA0;include&#xA0;&quot;old_mat_mul.hpp&quot;<br/>
</span></font></code>
<br/>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br/>
The file <a href="old_mat_mul.cpp.xml" target="_top"><span style='white-space: nowrap'>old_mat_mul.cpp</span></a>
 contains an example use of
<code><font color="blue">old_mat_mul.hpp</font></code>.
It returns true if it succeeds and false otherwise.

<br/>
<br/>
<b><big><a name="Begin Source" id="Begin Source">Begin Source</a></big></b>

<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>      <span style="font-style: italic"><span style="color: #9A1900">// Include CppAD definitions</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>                      <span style="font-style: italic"><span style="color: #9A1900">// Begin empty namespace</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>        <span style="font-style: italic"><span style="color: #9A1900">// Let vector denote CppAD::vector</span></span>
</tt></pre>
<br/>
<b><big><a name="Extra Call Information" id="Extra Call Information">Extra Call Information</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// Information we will attach to each mat_mul call</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">call_info</span> <span style="color: #FF0000">{</span>
          <span style="color: #008080">size_t</span> nr_result<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> n_middle<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nc_result<span style="color: #990000">;</span>
          <span style="color: #008080">vector&lt;bool&gt;</span>  vx<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt;call_info&gt;</span> info_<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// vector of call information</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// number of orders for this operation (k + 1)</span></span>
     <span style="color: #008080">size_t</span> n_order_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// number of rows in the result matrix</span></span>
     <span style="color: #008080">size_t</span> nr_result_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// number of columns in left matrix and number of rows in right matrix</span></span>
     <span style="color: #008080">size_t</span> n_middle_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// number of columns in the result matrix</span></span>
     <span style="color: #008080">size_t</span> nc_result_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// which components of x are variables</span></span>
     vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;*</span> vx_ <span style="color: #990000">=</span> CPPAD_NULL<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// get the information corresponding to this call</span></span>
     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">get_info</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> id<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> k<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> n<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> m<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     n_order_   <span style="color: #990000">=</span> k <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          nr_result_ <span style="color: #990000">=</span> info_<span style="color: #990000">[</span>id<span style="color: #990000">].</span>nr_result<span style="color: #990000">;</span>
          n_middle_  <span style="color: #990000">=</span> info_<span style="color: #990000">[</span>id<span style="color: #990000">].</span>n_middle<span style="color: #990000">;</span>
          nc_result_ <span style="color: #990000">=</span> info_<span style="color: #990000">[</span>id<span style="color: #990000">].</span>nc_result<span style="color: #990000">;</span>
          vx_        <span style="color: #990000">=</span> <span style="color: #990000">&amp;(</span>info_<span style="color: #990000">[</span>id<span style="color: #990000">].</span>vx<span style="color: #990000">);</span>

          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span>n <span style="color: #990000">==</span> nr_result_ <span style="color: #990000">*</span> n_middle_ <span style="color: #990000">+</span> n_middle_ <span style="color: #990000">*</span> nc_result_<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span>m <span style="color: #990000">==</span>  nr_result_ <span style="color: #990000">*</span> nc_result_<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
</tt></pre>
<b><big><a name="Matrix Indexing" id="Matrix Indexing">Matrix Indexing</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// Convert left matrix index pair and order to a single argument index</span></span>
     <span style="color: #008080">size_t</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> j<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> ell<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> i <span style="color: #990000">&lt;</span> nr_result_ <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> j <span style="color: #990000">&lt;</span> n_middle_ <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span>i <span style="color: #990000">*</span> n_middle_ <span style="color: #990000">+</span> j<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_order_ <span style="color: #990000">+</span> ell<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// Convert right matrix index pair and order to a single argument index</span></span>
     <span style="color: #008080">size_t</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> j<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> ell<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> i <span style="color: #990000">&lt;</span> n_middle_ <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> j <span style="color: #990000">&lt;</span> nc_result_ <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> offset <span style="color: #990000">=</span> nr_result_ <span style="color: #990000">*</span> n_middle_<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span>offset <span style="color: #990000">+</span> i <span style="color: #990000">*</span> nc_result_ <span style="color: #990000">+</span> j<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_order_ <span style="color: #990000">+</span> ell<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// Convert result matrix index pair and order to a single result index</span></span>
     <span style="color: #008080">size_t</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> j<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> ell<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> i <span style="color: #990000">&lt;</span> nr_result_ <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> j <span style="color: #990000">&lt;</span> nc_result_ <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span>i <span style="color: #990000">*</span> nc_result_ <span style="color: #990000">+</span> j<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_order_ <span style="color: #990000">+</span> ell<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="One Matrix Multiply" id="One Matrix Multiply">One Matrix Multiply</a></big></b>
<br/>
Forward mode matrix multiply left times right and sum into result:
<pre><tt>     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">multiply_and_sum</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                order_left <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                order_right<span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>         tx <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>               ty <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> order_result <span style="color: #990000">=</span> order_left <span style="color: #990000">+</span> order_right<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_result_<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_result_<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="color: #009900">double</span> sum <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
                    <span style="color: #008080">size_t</span> middle<span style="color: #990000">,</span> im_left<span style="color: #990000">,</span> mj_right<span style="color: #990000">,</span> ij_result<span style="color: #990000">;</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>middle <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> middle <span style="color: #990000">&lt;</span> n_middle_<span style="color: #990000">;</span> middle<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     im_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> middle<span style="color: #990000">,</span> order_left<span style="color: #990000">);</span>
                         mj_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>middle<span style="color: #990000">,</span> j<span style="color: #990000">,</span> order_right<span style="color: #990000">);</span>
                         sum     <span style="color: #990000">+=</span> tx<span style="color: #990000">[</span>im_left<span style="color: #990000">]</span> <span style="color: #990000">*</span> tx<span style="color: #990000">[</span>mj_right<span style="color: #990000">];</span>
                    <span style="color: #FF0000">}</span>
                    ij_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> order_result<span style="color: #990000">);</span>
                    ty<span style="color: #990000">[</span> ij_result <span style="color: #990000">]</span> <span style="color: #990000">+=</span> sum<span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Reverse Partials One Order" id="Reverse Partials One Order">Reverse Partials One Order</a></big></b>
<br/>
Compute reverse mode partials for one order and sum into px:
<pre><tt>     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">reverse_multiply</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                order_left <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                order_right<span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>         tx <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>         ty <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>               px <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>         py <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> order_result <span style="color: #990000">=</span> order_left <span style="color: #990000">+</span> order_right<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_result_<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_result_<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> middle<span style="color: #990000">,</span> im_left<span style="color: #990000">,</span> mj_right<span style="color: #990000">,</span> ij_result<span style="color: #990000">;</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>middle <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> middle <span style="color: #990000">&lt;</span> n_middle_<span style="color: #990000">;</span> middle<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     ij_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> order_result<span style="color: #990000">);</span>
                         im_left   <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> middle<span style="color: #990000">,</span> order_left<span style="color: #990000">);</span>
                         mj_right  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>middle<span style="color: #990000">,</span> j<span style="color: #990000">,</span> order_right<span style="color: #990000">);</span>
                         <span style="font-style: italic"><span style="color: #9A1900">// sum       += tx[im_left]  * tx[mj_right];</span></span>
                         px<span style="color: #990000">[</span>im_left<span style="color: #990000">]</span>  <span style="color: #990000">+=</span> tx<span style="color: #990000">[</span>mj_right<span style="color: #990000">]</span> <span style="color: #990000">*</span> py<span style="color: #990000">[</span>ij_result<span style="color: #990000">];</span>
                         px<span style="color: #990000">[</span>mj_right<span style="color: #990000">]</span> <span style="color: #990000">+=</span> tx<span style="color: #990000">[</span>im_left<span style="color: #990000">]</span>  <span style="color: #990000">*</span> py<span style="color: #990000">[</span>ij_result<span style="color: #990000">];</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Set Union" id="Set Union">Set Union</a></big></b>

<pre style='display:inline'><tt>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>set_union<span style="color: #990000">;</span>
</tt></pre>
<br/>
<b><big><a name="CppAD User Atomic Callback Functions" id="CppAD User Atomic Callback Functions">CppAD User Atomic Callback Functions</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// forward mode routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">mat_mul_forward</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                   id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    k <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    m <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>      vx <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>            vy <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>    tx <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>          ty
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> ell<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">get_info</span></span><span style="color: #990000">(</span>id<span style="color: #990000">,</span> k<span style="color: #990000">,</span> n<span style="color: #990000">,</span> m<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// check if this is during the call to mat_mul(id, ax, ay)</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> k <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">&amp;&amp;</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// store the vx information in info_</span></span>
               <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx_<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
               info_<span style="color: #990000">[</span>id<span style="color: #990000">].</span>vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    info_<span style="color: #990000">[</span>id<span style="color: #990000">].</span>vx<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> vx<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
               <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx_<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// now compute vy</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_result_<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_result_<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// compute vy[ result(i, j, 0) ]</span></span>
                         <span style="color: #009900">bool</span>   var <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
                         <span style="color: #009900">bool</span>   nz_left<span style="color: #990000">,</span> nz_right<span style="color: #990000">;</span>
                         <span style="color: #008080">size_t</span> middle<span style="color: #990000">,</span> im_left<span style="color: #990000">,</span> mj_right<span style="color: #990000">,</span> ij_result<span style="color: #990000">;</span>
                         <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>middle <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> middle <span style="color: #990000">&lt;</span> n_middle_<span style="color: #990000">;</span> middle<span style="color: #990000">++)</span>
                         <span style="color: #FF0000">{</span>     im_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> middle<span style="color: #990000">,</span> k<span style="color: #990000">);</span>
                              mj_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>middle<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">);</span>
                              nz_left  <span style="color: #990000">=</span> vx<span style="color: #990000">[</span>im_left<span style="color: #990000">]</span>  <span style="color: #990000">|</span> <span style="color: #990000">(</span>tx<span style="color: #990000">[</span>im_left<span style="color: #990000">]</span> <span style="color: #990000">!=</span> <span style="color: #993399">0</span><span style="color: #990000">.);</span>
                              nz_right <span style="color: #990000">=</span> vx<span style="color: #990000">[</span>mj_right<span style="color: #990000">]</span> <span style="color: #990000">|</span> <span style="color: #990000">(</span>tx<span style="color: #990000">[</span>mj_right<span style="color: #990000">]!=</span> <span style="color: #993399">0</span><span style="color: #990000">.);</span>
                              <span style="font-style: italic"><span style="color: #9A1900">// if not multiplying by the constant zero</span></span>
                              <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> nz_left <span style="color: #990000">&amp;</span> nz_right <span style="color: #990000">)</span>
                                   var <span style="color: #990000">|=</span> <span style="color: #990000">(</span>vx<span style="color: #990000">[</span>im_left<span style="color: #990000">]</span> <span style="color: #990000">|</span> vx<span style="color: #990000">[</span>mj_right<span style="color: #990000">]);</span>
                         <span style="color: #FF0000">}</span>
                         ij_result     <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">);</span>
                         vy<span style="color: #990000">[</span>ij_result<span style="color: #990000">]</span> <span style="color: #990000">=</span> var<span style="color: #990000">;</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// initialize result as zero</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_result_<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_result_<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    ty<span style="color: #990000">[</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">)</span> <span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// sum the product of proper orders</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;=</span>k<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
               <span style="font-weight: bold"><span style="color: #000000">multiply_and_sum</span></span><span style="color: #990000">(</span>ell<span style="color: #990000">,</span> k<span style="color: #990000">-</span>ell<span style="color: #990000">,</span> tx<span style="color: #990000">,</span> ty<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// All orders are implemented and there are no possible error</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// conditions, so always return true.</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// reverse mode routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">mat_mul_reverse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                   id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    k <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    m <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>    tx <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>    ty <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>          px <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>    py
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">get_info</span></span><span style="color: #990000">(</span>id<span style="color: #990000">,</span> k<span style="color: #990000">,</span> n<span style="color: #990000">,</span> m<span style="color: #990000">);</span>

          <span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> n <span style="color: #990000">*</span> n_order_<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>ell<span style="color: #990000">--)</span>
               px<span style="color: #990000">[</span>ell<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>

          <span style="color: #008080">size_t</span> order <span style="color: #990000">=</span> n_order_<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>order<span style="color: #990000">--)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// reverse sum the products for specified order</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;=</span>order<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                    <span style="font-weight: bold"><span style="color: #000000">reverse_multiply</span></span><span style="color: #990000">(</span>ell<span style="color: #990000">,</span> order<span style="color: #990000">-</span>ell<span style="color: #990000">,</span> tx<span style="color: #990000">,</span> ty<span style="color: #990000">,</span> px<span style="color: #990000">,</span> py<span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// All orders are implemented and there are no possible error</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// conditions, so always return true.</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// forward Jacobian sparsity routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">mat_mul_for_jac_sparse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                               id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                m <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     r <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>           s <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> im_left<span style="color: #990000">,</span> middle<span style="color: #990000">,</span> mj_right<span style="color: #990000">,</span> ij_result<span style="color: #990000">;</span>
          k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">get_info</span></span><span style="color: #990000">(</span>id<span style="color: #990000">,</span> k<span style="color: #990000">,</span> n<span style="color: #990000">,</span> m<span style="color: #990000">);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_result_<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_result_<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     ij_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">);</span>
                    s<span style="color: #990000">[</span>ij_result<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>middle <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> middle <span style="color: #990000">&lt;</span> n_middle_<span style="color: #990000">;</span> middle<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     im_left   <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> middle<span style="color: #990000">,</span> k<span style="color: #990000">);</span>
                         mj_right  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>middle<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">);</span>

                         <span style="font-style: italic"><span style="color: #9A1900">// s[ij_result] = union( s[ij_result], r[im_left] )</span></span>
                         s<span style="color: #990000">[</span>ij_result<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>s<span style="color: #990000">[</span>ij_result<span style="color: #990000">],</span> r<span style="color: #990000">[</span>im_left<span style="color: #990000">]);</span>

                         <span style="font-style: italic"><span style="color: #9A1900">// s[ij_result] = union( s[ij_result], r[mj_right] )</span></span>
                         s<span style="color: #990000">[</span>ij_result<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>s<span style="color: #990000">[</span>ij_result<span style="color: #990000">],</span> r<span style="color: #990000">[</span>mj_right<span style="color: #990000">]);</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// reverse Jacobian sparsity routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">mat_mul_rev_jac_sparse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                               id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                m <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>           r <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     s <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> im_left<span style="color: #990000">,</span> middle<span style="color: #990000">,</span> mj_right<span style="color: #990000">,</span> ij_result<span style="color: #990000">;</span>
          k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">get_info</span></span><span style="color: #990000">(</span>id<span style="color: #990000">,</span> k<span style="color: #990000">,</span> n<span style="color: #990000">,</span> m<span style="color: #990000">);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               r<span style="color: #990000">[</span>j<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>

          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_result_<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_result_<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     ij_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>middle <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> middle <span style="color: #990000">&lt;</span> n_middle_<span style="color: #990000">;</span> middle<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     im_left   <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> middle<span style="color: #990000">,</span> k<span style="color: #990000">);</span>
                         mj_right  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>middle<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">);</span>

                         <span style="font-style: italic"><span style="color: #9A1900">// r[im_left] = union( r[im_left], s[ij_result] )</span></span>
                         r<span style="color: #990000">[</span>im_left<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>r<span style="color: #990000">[</span>im_left<span style="color: #990000">],</span> s<span style="color: #990000">[</span>ij_result<span style="color: #990000">]);</span>

                         <span style="font-style: italic"><span style="color: #9A1900">// r[mj_right] = union( r[mj_right], s[ij_result] )</span></span>
                         r<span style="color: #990000">[</span>mj_right<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>r<span style="color: #990000">[</span>mj_right<span style="color: #990000">],</span> s<span style="color: #990000">[</span>ij_result<span style="color: #990000">]);</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// reverse Hessian sparsity routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">mat_mul_rev_hes_sparse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                               id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                m <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     r <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   s <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                         t <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     u <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>           v <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> im_left<span style="color: #990000">,</span> middle<span style="color: #990000">,</span> mj_right<span style="color: #990000">,</span> ij_result<span style="color: #990000">;</span>
          k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">get_info</span></span><span style="color: #990000">(</span>id<span style="color: #990000">,</span> k<span style="color: #990000">,</span> n<span style="color: #990000">,</span> m<span style="color: #990000">);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     t<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
               v<span style="color: #990000">[</span>j<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>
          <span style="color: #FF0000">}</span>

          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx_<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_result_<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_result_<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     ij_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>middle <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> middle <span style="color: #990000">&lt;</span> n_middle_<span style="color: #990000">;</span> middle<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     im_left   <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> middle<span style="color: #990000">,</span> k<span style="color: #990000">);</span>
                         mj_right  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>middle<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">);</span>

                         <span style="font-style: italic"><span style="color: #9A1900">// back propagate Jacobian sparsity</span></span>
                         t<span style="color: #990000">[</span>im_left<span style="color: #990000">]</span>   <span style="color: #990000">=</span> <span style="color: #990000">(</span>t<span style="color: #990000">[</span>im_left<span style="color: #990000">]</span> <span style="color: #990000">|</span> s<span style="color: #990000">[</span>ij_result<span style="color: #990000">]);</span>
                         t<span style="color: #990000">[</span>mj_right<span style="color: #990000">]</span>  <span style="color: #990000">=</span> <span style="color: #990000">(</span>t<span style="color: #990000">[</span>mj_right<span style="color: #990000">]</span> <span style="color: #990000">|</span> s<span style="color: #990000">[</span>ij_result<span style="color: #990000">]);</span>
                         <span style="font-style: italic"><span style="color: #9A1900">// Visual Studio C++ 2008 warns unsafe mix of int and</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// bool if we use the following code directly above:</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// t[im_left]  |= s[ij_result];</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// t[mj_right] |= s[ij_result];</span></span>

                         <span style="font-style: italic"><span style="color: #9A1900">// back propagate Hessian sparsity</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// v[im_left]  = union( v[im_left],  u[ij_result] )</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// v[mj_right] = union( v[mj_right], u[ij_result] )</span></span>
                         v<span style="color: #990000">[</span>im_left<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>v<span style="color: #990000">[</span>im_left<span style="color: #990000">],</span>  u<span style="color: #990000">[</span>ij_result<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                         v<span style="color: #990000">[</span>mj_right<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>v<span style="color: #990000">[</span>mj_right<span style="color: #990000">],</span> u<span style="color: #990000">[</span>ij_result<span style="color: #990000">]</span> <span style="color: #990000">);</span>

                         <span style="font-style: italic"><span style="color: #9A1900">// Check for case where the (i,j) result element</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// is in reverse Jacobian and both left and right</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// operands in multiplication are variables</span></span>
                         <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>s<span style="color: #990000">[</span>ij_result<span style="color: #990000">]</span> <span style="color: #990000">&amp;</span> <span style="color: #990000">(*</span>vx_<span style="color: #990000">)[</span>im_left<span style="color: #990000">]</span> <span style="color: #990000">&amp;</span> <span style="color: #990000">(*</span>vx_<span style="color: #990000">)[</span>mj_right<span style="color: #990000">])</span>
                         <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// v[im_left] = union( v[im_left], r[mj_right] )</span></span>
                              v<span style="color: #990000">[</span>im_left<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>v<span style="color: #990000">[</span>im_left<span style="color: #990000">],</span> r<span style="color: #990000">[</span>mj_right<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                              <span style="font-style: italic"><span style="color: #9A1900">// v[mj_right] = union( v[mj_right], r[im_left] )</span></span>
                              v<span style="color: #990000">[</span>mj_right<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>v<span style="color: #990000">[</span>mj_right<span style="color: #990000">],</span> r<span style="color: #990000">[</span>im_left<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                         <span style="color: #FF0000">}</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Declare mat_mul Function" id="Declare mat_mul Function">Declare mat_mul Function</a></big></b>
<br/>
Declare the <code><font color="blue">AD&lt;double&gt;</font></code> routine 
<code><font color="blue"><span style='white-space: nowrap'>mat_mul(</span></font><i><font color="black"><span style='white-space: nowrap'>id</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>

and end empty namespace
(we could use any <a href="simplevector.xml" target="_top"><span style='white-space: nowrap'>simple&#xA0;vector&#xA0;template&#xA0;class</span></a>

instead of <code><font color="blue">CppAD::vector</font></code>):
<pre><tt>     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_ATOMIC</span></span><span style="color: #990000">(</span>
          mat_mul                 <span style="color: #990000">,</span>
          CppAD<span style="color: #990000">::</span>vector           <span style="color: #990000">,</span>
          <span style="color: #009900">double</span>                  <span style="color: #990000">,</span>
          mat_mul_forward         <span style="color: #990000">,</span>
          mat_mul_reverse         <span style="color: #990000">,</span>
          mat_mul_for_jac_sparse  <span style="color: #990000">,</span>
          mat_mul_rev_jac_sparse  <span style="color: #990000">,</span>
          mat_mul_rev_hes_sparse
     <span style="color: #990000">)</span>
<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// End empty namespace</span></span></tt></pre>

<hr/>Input File: example/deprecated/old_mat_mul.hpp

</body>
</html>
