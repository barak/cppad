<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Set Up Multi-Threaded Newton Method</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Set Up Multi-Threaded Newton Method"/>
<meta name="keywords" id="keywords" content=" set up multi-threaded newton method syntax purpose thread num_sub xlow xup epsilon max_itr num_threads source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_newton_setup_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="multi_newton_common.xml" target="_top">Prev</a>
</td><td><a href="multi_newton_worker.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>multi_newton.cpp</option>
<option>multi_newton_setup</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
<option>simple_ad_openmp.cpp</option>
<option>simple_ad_bthread.cpp</option>
<option>simple_ad_pthread.cpp</option>
<option>team_example.cpp</option>
<option>harmonic.cpp</option>
<option>multi_atomic.cpp</option>
<option>multi_newton.cpp</option>
<option>team_thread.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>multi_newton.cpp-&gt;</option>
<option>multi_newton_common</option>
<option>multi_newton_setup</option>
<option>multi_newton_worker</option>
<option>multi_newton_takedown</option>
<option>multi_newton_run</option>
<option>multi_newton_time</option>
</select>
</td>
<td>multi_newton_setup</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Thread</option>
<option>num_sub</option>
<option>xlow</option>
<option>xup</option>
<option>epsilon</option>
<option>max_itr</option>
<option>num_threads</option>
<option>Source</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Set Up Multi-Threaded Newton Method</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;multi_newton_setup(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>xlow</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>xup</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>max_itr</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
)</span></font></code>


<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
These routine does the setup for splitting finding all the zeros in an
interval into separate sub-intervals, one for each thread.

<br/>
<br/>
<b><big><a name="Thread" id="Thread">Thread</a></big></b>
<br/>
It is assumed that this function is called by thread zero,
and all the other threads are blocked (waiting).

<br/>
<br/>
<b><big><a name="num_sub" id="num_sub">num_sub</a></big></b>
<br/>
See 
<code><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i></code>
 in <a href="multi_newton_run.xml#num_sub" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br/>
<br/>
<b><big><a name="xlow" id="xlow">xlow</a></big></b>
<br/>
See 
<code><i><font color="black"><span style='white-space: nowrap'>xlow</span></font></i></code>
 in <a href="multi_newton_run.xml#xlow" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br/>
<br/>
<b><big><a name="xup" id="xup">xup</a></big></b>
<br/>
See 
<code><i><font color="black"><span style='white-space: nowrap'>xup</span></font></i></code>
 in <a href="multi_newton_run.xml#xup" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br/>
<br/>
<b><big><a name="epsilon" id="epsilon">epsilon</a></big></b>
<br/>
See 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i></code>
 in <a href="multi_newton_run.xml#epsilon" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br/>
<br/>
<b><big><a name="max_itr" id="max_itr">max_itr</a></big></b>
<br/>
See 
<code><i><font color="black"><span style='white-space: nowrap'>max_itr</span></font></i></code>
 in <a href="multi_newton_run.xml#max_itr" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br/>
<br/>
<b><big><a name="num_threads" id="num_threads">num_threads</a></big></b>
<br/>
See 
<code><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i></code>
 in
<a href="multi_newton_run.xml#num_threads" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br/>
<br/>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">multi_newton_setup</span></span><span style="color: #990000">(</span>
     <span style="color: #008080">size_t</span> num_sub                              <span style="color: #990000">,</span>
     <span style="color: #009900">double</span> xlow                                 <span style="color: #990000">,</span>
     <span style="color: #009900">double</span> xup                                  <span style="color: #990000">,</span>
     <span style="color: #009900">double</span> epsilon                              <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span> max_itr                              <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span> num_threads                          <span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>
     num_threads  <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">(</span>num_threads_<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">));</span>
     <span style="color: #009900">bool</span> ok      <span style="color: #990000">=</span> num_threads <span style="color: #990000">==</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">num_threads</span></span><span style="color: #990000">();</span>
     ok          <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">thread_num</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// inputs that are same for all threads</span></span>
     epsilon_ <span style="color: #990000">=</span> epsilon<span style="color: #990000">;</span>
     max_itr_ <span style="color: #990000">=</span> max_itr<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// resize the work vector to accomidate the number of threads</span></span>
     ok <span style="color: #990000">&amp;=</span> work_all_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     work_all_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>num_threads<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// length of each sub interval</span></span>
     sub_length_ <span style="color: #990000">=</span> <span style="color: #990000">(</span>xup <span style="color: #990000">-</span> xlow<span style="color: #990000">)</span> <span style="color: #990000">/</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>num_sub<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// determine values that are specific to each thread</span></span>
     <span style="color: #008080">size_t</span> num_min   <span style="color: #990000">=</span> num_sub <span style="color: #990000">/</span> num_threads<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// minimum num_sub</span></span>
     <span style="color: #008080">size_t</span> num_more  <span style="color: #990000">=</span> num_sub <span style="color: #990000">%</span> num_threads<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// number that have one more</span></span>
     <span style="color: #008080">size_t</span> sum_num   <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// sum with respect to thread of num_sub</span></span>
     <span style="color: #008080">size_t</span> thread_num<span style="color: #990000">,</span> num_sub_thread<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>thread_num <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> thread_num <span style="color: #990000">&lt;</span> num_threads<span style="color: #990000">;</span> thread_num<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># if</span></span>  USE_THREAD_ALLOC_FOR_WORK_ALL
          <span style="font-style: italic"><span style="color: #9A1900">// allocate separate memory for this thread to avoid false sharing</span></span>
          <span style="color: #008080">size_t</span> <span style="font-weight: bold"><span style="color: #000000">min_bytes</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>work_one_t<span style="color: #990000">)),</span> cap_bytes<span style="color: #990000">;</span>
          <span style="color: #009900">void</span><span style="color: #990000">*</span> v_ptr <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">get_memory</span></span><span style="color: #990000">(</span>min_bytes<span style="color: #990000">,</span> cap_bytes<span style="color: #990000">);</span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span>work_one_t<span style="color: #990000">*&gt;(</span>v_ptr<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// thread_alloc is a raw memory allocator; i.e., it does not call</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// the constructor for the objects it creates. The vector</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// class requires it's constructor to be called so we do it here</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">new</span></span><span style="color: #990000">(&amp;</span> <span style="color: #990000">(</span>work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>x<span style="color: #990000">)</span> <span style="color: #990000">)</span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;();</span>
<span style="font-weight: bold"><span style="color: #000080"># else</span></span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> work_one_t<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// number of sub-intervalse for this thread</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> thread_num <span style="color: #990000">&lt;</span> num_more  <span style="color: #990000">)</span>
               num_sub_thread <span style="color: #990000">=</span> num_min <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>     num_sub_thread <span style="color: #990000">=</span> num_min<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// when thread_num == 0, xlow_thread == xlow</span></span>
          <span style="color: #009900">double</span> xlow_thread <span style="color: #990000">=</span> xlow <span style="color: #990000">+</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>sum_num<span style="color: #990000">)</span> <span style="color: #990000">*</span> sub_length_<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// when thread_num == num_threads - 1, xup_thread = xup</span></span>
          <span style="color: #009900">double</span> xup_thread <span style="color: #990000">=</span>
               xlow <span style="color: #990000">+</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>sum_num <span style="color: #990000">+</span> num_sub_thread<span style="color: #990000">)</span> <span style="color: #990000">*</span> sub_length_<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> thread_num <span style="color: #990000">==</span> num_threads <span style="color: #990000">-</span> <span style="color: #993399">1</span> <span style="color: #990000">)</span>
               xup_thread <span style="color: #990000">=</span> xup<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// update sum_num for next time through loop</span></span>
          sum_num <span style="color: #990000">+=</span> num_sub_thread<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// input information specific to this thread</span></span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>num_sub <span style="color: #990000">=</span> num_sub_thread<span style="color: #990000">;</span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>xlow    <span style="color: #990000">=</span> xlow_thread<span style="color: #990000">;</span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>xup     <span style="color: #990000">=</span> xup_thread<span style="color: #990000">;</span>
          ok <span style="color: #990000">&amp;=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// in case this thread does not get called</span></span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     ok <span style="color: #990000">&amp;=</span> sum_num <span style="color: #990000">==</span> num_sub<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: example/multi_thread/multi_newton.cpp

</body>
</html>
