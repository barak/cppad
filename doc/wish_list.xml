<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>The CppAD Wish List</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="The CppAD Wish List"/>
<meta name="keywords" id="keywords" content=" the cppad wish list optimization taping special operators checkpoint retape testing sparsity patterns check_finite compilation speed base requirements adolc forward mode recomputation iterator interface operation sequence software guidelines tracing atan2 benderquad "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_wish_list_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="bib.xml" target="_top">Prev</a>
</td><td><a href="whats_new.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>wish_list</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>wish_list</option>
<option>whats_new</option>
<option>deprecated</option>
<option>compare_c</option>
<option>numeric_ad</option>
<option>addon</option>
<option>License</option>
</select>
</td>
<td>wish_list</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Optimization</option>
<option>---..Taping</option>
<option>---..Special Operators</option>
<option>checkpoint</option>
<option>---..Retape</option>
<option>---..Testing</option>
<option>Sparsity Patterns</option>
<option>check_finite</option>
<option>Compilation Speed</option>
<option>Base Requirements</option>
<option>Adolc</option>
<option>Forward Mode Recomputation</option>
<option>Iterator Interface</option>
<option>Operation Sequence</option>
<option>Software Guidelines</option>
<option>Tracing</option>
<option>atan2</option>
<option>BenderQuad</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>The CppAD Wish List</big></big></b></center>
<br/>
<b><big><a name="Optimization" id="Optimization">Optimization</a></big></b>


<br/>
<br/>
<b><a name="Optimization.Taping" id="Optimization.Taping">Taping</a></b>
<br/>
Perhaps some of the optimization done while taping forward mode
should be delayed to the <code><font color="blue">optimization</font></code> step.

<br/>
<br/>
<b><a name="Optimization.Special Operators" id="Optimization.Special Operators">Special Operators</a></b>
<br/>
Add special operators that can be implemented more efficiently, e.g.,

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;square(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)&#xA0;=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;*&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
and have the optimizer recognize when they should be used.
(They could also be in the user API, but it would not be expected
that the user would use them.)


<br/>
<br/>
<b><big><a name="checkpoint" id="checkpoint">checkpoint</a></big></b>


<br/>
<br/>
<b><a name="checkpoint.Retape" id="checkpoint.Retape">Retape</a></b>
<br/>
Perhaps there should be a version of the
<a href="checkpoint.xml" target="_top"><span style='white-space: nowrap'>checkpoint</span></a>
 class that uses a tapeless AD package to compute
the derivative values.
This would allow for algorithms where the operations sequence
depends on the independent variable values.
There is a question as to how sparsity patterns would be determined
in this case.
Perhaps they would be passed into the constructor.
If it was known to be constant,
the user could compute the pattern using CppAD.
Otherwise, the user could input
a conservative estimate of the pattern that would be correct.

<br/>
<br/>
<b><a name="checkpoint.Testing" id="checkpoint.Testing">Testing</a></b>
<br/>
There should be some examples and tests for both speed and memory use
that demonstrate that checkpointing is useful.



<br/>
<br/>
<b><big><a name="Sparsity Patterns" id="Sparsity Patterns">Sparsity Patterns</a></big></b>
<br/>
It may be that each set has a large overhead in a large and very sparse
<a href="glossary.xml#Sparsity Pattern.Vector of Sets" target="_top"><span style='white-space: nowrap'>vector&#xA0;of&#xA0;sets</span></a>

representation of a sparsity pattern.
The user API for this representation uses

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&lt;&#xA0;std::set&lt;size_t&gt;&#xA0;&gt;<br/>
</span></font></code>
Perhaps CppAD's API should have a sparse matrix class with the following fields

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&lt;size_t&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&lt;size_t&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>val</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br/>
</span></font></code>
where the vectors are arbitrary <a href="simplevector.xml" target="_top"><span style='white-space: nowrap'>simple&#xA0;vectors</span></a>
.
If the 
<code><i><font color="black"><span style='white-space: nowrap'>val</span></font></i></code>
 vector has size zero,
this would just be a sparsity pattern
(and 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 vectors would have the same size).
Otherwise, it would be a sparse matrix with elements of type 
<code><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i></code>

and 
<code><i><font color="black"><span style='white-space: nowrap'>val</span></font></i></code>
 would have the
same size as 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
.


<br/>
<br/>
<b><big><a name="check_finite" id="check_finite">check_finite</a></big></b>
<br/>
Sometimes one only gets infinite value during zero order forward
and nan when computing corresponding derivatives.
Change <a href="check_for_nan.xml" target="_top"><span style='white-space: nowrap'>check_for_nan</span></a>
 to <code><font color="blue">check_finite</font></code>
(not infinite or nan) so that error detection happens during zero
order forward instead of later.

<br/>
<br/>
<b><big><a name="Compilation Speed" id="Compilation Speed">Compilation Speed</a></big></b>
<br/>
Create a library corresponding to <code><font color="blue">AD&lt;double&gt;</font></code> so that
one does not need to re-compile all the header files every time.

<br/>
<br/>
<b><big><a name="Base Requirements" id="Base Requirements">Base Requirements</a></big></b>
<br/>
Change the <a href="base_require.xml" target="_top"><span style='white-space: nowrap'>Base&#xA0;requirements</span></a>
 to use template
specialization instead of functions so that there is a default value
for each function. The default would result in a
<a href="cppad_assert.xml#Known" target="_top"><span style='white-space: nowrap'>known</span></a>
 assert when the operation is used and not
defined by the base class.
An example of this type of template specialization can be found in
the implementation of <a href="to_string.xml" target="_top"><span style='white-space: nowrap'>to_string</span></a>
.

<br/>
<br/>
<b><big><a name="Adolc" id="Adolc">Adolc</a></big></b>
<br/>
Create a documentation page that shows how to convert Adolc commands to
CppAD commands.

<br/>
<br/>
<b><big><a name="Forward Mode Recomputation" id="Forward Mode Recomputation">Forward Mode Recomputation</a></big></b>
<br/>
If the results of <a href="forward_order.xml" target="_top"><span style='white-space: nowrap'>forward_order</span></a>
 have already been computed and are still
stored in the <a href="adfun.xml" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object (see <a href="size_order.xml" target="_top"><span style='white-space: nowrap'>size_order</span></a>
),
then they do not need to be recomputed and the results can just be returned.

<br/>
<br/>
<b><big><a name="Iterator Interface" id="Iterator Interface">Iterator Interface</a></big></b>
<br/>
All of the CppAD simple vector interfaces should also have an
iterator version for the following reasons:
<ol type="1"><li>
It would not be necessary to copy information to simple vectors
when it was originally stored in a different type of container.
</li><li>

It would not be necessary to reallocate memory for a result that is
repeatedly calculated
(because an iterator for the result container would be passed in).
</li></ol>



<br/>
<br/>
<b><big><a name="Operation Sequence" id="Operation Sequence">Operation Sequence</a></big></b>
<br/>
It is possible to detect if the
AD of 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>

<a href="glossary.xml#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&#xA0;sequence</span></a>

does not depend on any of the
<a href="glossary.xml#Tape.Independent Variable" target="_top"><span style='white-space: nowrap'>independent&#xA0;variable</span></a>
 values.
This could be returned as an extra
<a href="seq_property.xml" target="_top"><span style='white-space: nowrap'>seq_property</span></a>
.

<br/>
<br/>
<b><big><a name="Software Guidelines" id="Software Guidelines">Software Guidelines</a></big></b>
<br/>
The following is a list of some software guidelines taken from
<a href="http://www.boost.org/development/requirements.html#Guidelines" target="_top"><span style='white-space: nowrap'>boost</span></a>
.
These guidelines are not followed by the current CppAD source code,
but perhaps they should be:

<ol type="1"><li>
Names (except as noted below)
should be all lowercase, with words separated by underscores.
For example, acronyms should be treated as ordinary names
(xml_parser instead of XML_parser).

</li><li>

Template parameter names should begin with an uppercase letter.

</li><li>

Use spaces rather than tabs.
Currently, CppAD uses a tabs stops at column multiples of 5.
Five columns were chosen to avoid high levels of indenting and to allow for
<code><font color='blue'><pre style='display:inline'> 
     if( expression )
          statement
     else statement
</pre></font></code>
with a tab after the else.
Automatic conversion to actual spaces should be easy.

</li></ol>


<br/>
<br/>
<b><big><a name="Tracing" id="Tracing">Tracing</a></big></b>
<br/>
Add tracing the operation sequence to the user API and documentation.
Tracing the operation sequence is currently done by changing the CppAD
source code. Use the command
<code><font color='blue'><pre style='display:inline'> 
     grep '^# *define *CPPAD_.*_TRACE' cppad/local/*.hpp
</pre></font></code>
to find all the possible tracing flags.


<br/>
<br/>
<b><big><a name="atan2" id="atan2">atan2</a></big></b>
<br/>
The <a href="atan2.xml" target="_top"><span style='white-space: nowrap'>atan2</span></a>
 function could be made faster by adding
a special operator for it.

<br/>
<br/>
<b><big><a name="BenderQuad" id="BenderQuad">BenderQuad</a></big></b>
<br/>
See the <a href="benderquad.xml#Problem" target="_top"><span style='white-space: nowrap'>problem</span></a>
 with the
current <code><font color="blue">BenderQuad</font></code> specifications.


<hr/>Input File: omh/wish_list.omh

</body>
</html>
