<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>The CppAD Wish List</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="The CppAD Wish List"/>
<meta name="keywords" id="keywords" content=" the cppad wish list base requirements printfor optimization checkpoint machine epsilon examples adolc optimizing nested conditional expressions forward mode recomputation iterator interface compilation speed operation sequence comparison changes software guidelines tracing atan2 benderquad "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_wish_list_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="bib.xml" target="_top">Prev</a>
</td><td><a href="whats_new.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>wish_list</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>wish_list</option>
<option>whats_new</option>
<option>deprecated</option>
<option>compare_c</option>
<option>numeric_ad</option>
<option>addon</option>
<option>License</option>
</select>
</td>
<td>wish_list</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Base Requirements</option>
<option>PrintFor Optimization</option>
<option>checkpoint</option>
<option>Machine Epsilon in Examples</option>
<option>Adolc</option>
<option>Optimizing Nested Conditional Expressions</option>
<option>Forward Mode Recomputation</option>
<option>Iterator Interface</option>
<option>Compilation Speed</option>
<option>Operation Sequence</option>
<option>Comparison Changes and Optimization</option>
<option>Software Guidelines</option>
<option>Tracing</option>
<option>atan2</option>
<option>BenderQuad</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>The CppAD Wish List</big></big></b></center>
<br/>
<b><big><a name="Base Requirements" id="Base Requirements">Base Requirements</a></big></b>
<br/>
Change the <a href="base_require.xml" target="_top"><span style='white-space: nowrap'>Base&#xA0;requirements</span></a>
 to use template
specialization instead of functions so that there is a default value
for each function. The default would result in a
<a href="cppad_assert.xml#Known" target="_top"><span style='white-space: nowrap'>known</span></a>
 assert when the operation is used and not
defined by the base class.
An example of this type of template specialization can be found in
the implementation of <a href="to_string.xml" target="_top"><span style='white-space: nowrap'>to_string</span></a>
.

<br/>
<br/>
<b><big><a name="PrintFor Optimization" id="PrintFor Optimization">PrintFor Optimization</a></big></b>
<br/>
Do not remove <a href="printfor.xml" target="_top"><span style='white-space: nowrap'>PrintFor</span></a>
 operations during <a href="optimize.xml" target="_top"><span style='white-space: nowrap'>optimize</span></a>
 because
they are very useful when debugging expected calculations on the tape.
If not this, we at least need to disable optimization of <a href="checkpoint.xml" target="_top"><span style='white-space: nowrap'>checkpoint</span></a>

functions.

<br/>
<br/>
<b><big><a name="checkpoint" id="checkpoint">checkpoint</a></big></b>
<br/>
There should be some examples and tests for both speed and memory use
that demonstrate that checkpointing is useful.

<br/>
<br/>
<b><big><a name="Machine Epsilon in Examples" id="Machine Epsilon in Examples">Machine Epsilon in Examples</a></big></b>
<br/>
Use a multiple of <code><font color="blue">std::numeric_limits&lt;double&gt;::epsilon()</font></code> instead
<code><font color="blue">1e-10</font></code> for a small number in correctness checks; e.g.,
see <a href="sqrt.cpp.xml" target="_top"><span style='white-space: nowrap'>sqrt.cpp</span></a>
.

<br/>
<br/>
<b><big><a name="Adolc" id="Adolc">Adolc</a></big></b>
<br/>
Create a documentation page that shows how to convert Adolc commands to
CppAD commands.

<br/>
<br/>
<b><big><a name="Optimizing Nested Conditional Expressions" id="Optimizing Nested Conditional Expressions">Optimizing Nested Conditional Expressions</a></big></b>
<br/>
If one <a href="optimize.xml" target="_top"><span style='white-space: nowrap'>optimizes</span></a>
 the code
<code><font color='blue'><pre style='display:inline'> 
     x = CondExpLt(left_x, right_x, true_x, false_x)
     y = CondExpGt(left_y, right_y, true_y, false_y)
     z = CondExpEq(left_z, right_z, x, y)
</pre></font></code>
only two of the expressions
<code><font color="blue">true_x</font></code>, <code><font color="blue">false_x</font></code>, <code><font color="blue">true_y</font></code>, <code><font color="blue">false_y</font></code>
will be evaluated
(two will be skipped depending on the result of <code><font color="blue">left_z == right_z</font></code>).
Not all of the expressions corresponding to
<code><font color="blue">left_x</font></code>, <code><font color="blue">right_x</font></code>, <code><font color="blue">left_y</font></code>, <code><font color="blue">right_y</font></code> need to be
evaluate, but they are.
The optimizer could be improved to skip two more expressions
(depending on the result of <code><font color="blue">left_z == right_z</font></code>).

<br/>
<br/>
<b><big><a name="Forward Mode Recomputation" id="Forward Mode Recomputation">Forward Mode Recomputation</a></big></b>
<br/>
If the results of <a href="forward_order.xml" target="_top"><span style='white-space: nowrap'>forward_order</span></a>
 have already been computed and are still
stored in the <a href="adfun.xml" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object (see <a href="size_order.xml" target="_top"><span style='white-space: nowrap'>size_order</span></a>
),
then they do not need to be recomputed and the results can just be returned.

<br/>
<br/>
<b><big><a name="Iterator Interface" id="Iterator Interface">Iterator Interface</a></big></b>
<br/>
All of the CppAD simple vector interfaces should also have an
iterator version for the following reasons:
<ol type="1"><li>
It would not be necessary to copy information to simple vectors
when it was originally stored in a different type of container.
</li><li>

It would not be necessary to reallocate memory for a result that is
repeatedly calculated
(because an iterator for the result container would be passed in).
</li></ol>


<br/>
<br/>
<b><big><a name="Compilation Speed" id="Compilation Speed">Compilation Speed</a></big></b>
<br/>
One could build a CppAD library for use with the type <code><font color="blue">AD&lt;double&gt;</font></code>.
This would speed up compilation for the most common usage where
the 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 type is <code><font color="blue">double</font></code>.


<br/>
<br/>
<b><big><a name="Operation Sequence" id="Operation Sequence">Operation Sequence</a></big></b>
<br/>
It is possible to detect if the
AD of 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>

<a href="glossary.xml#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&#xA0;sequence</span></a>

does not depend on any of the
<a href="glossary.xml#Tape.Independent Variable" target="_top"><span style='white-space: nowrap'>independent&#xA0;variable</span></a>
 values.
This could be returned as an extra
<a href="seq_property.xml" target="_top"><span style='white-space: nowrap'>seq_property</span></a>
.

<br/>
<br/>
<b><big><a name="Comparison Changes and Optimization" id="Comparison Changes and Optimization">Comparison Changes and Optimization</a></big></b>
<br/>
The comparison operators used to not be taped when
<a href="faq.xml#Speed.NDEBUG" target="_top"><span style='white-space: nowrap'>NDEBUG</span></a>
 was defined.
They are now taped so that the <a href="compare_change.xml" target="_top"><span style='white-space: nowrap'>compare_change</span></a>
 interface
works even for compiler optimize code.
This caused a significant slow down in the
<a href="cppad_det_lu.cpp.xml" target="_top"><span style='white-space: nowrap'>cppad_det_lu.cpp</span></a>
 speed test (with no options specified).
Perhaps there should be an option to skip the comparison taping.

<br/>
<br/>
<b><big><a name="Software Guidelines" id="Software Guidelines">Software Guidelines</a></big></b>
<br/>
The following is a list of some software guidelines taken from
<a href="http://www.boost.org/development/requirements.html#Guidelines" target="_top"><span style='white-space: nowrap'>boost</span></a>
.
These guidelines are not followed by the current CppAD source code,
but perhaps they should be:

<ol type="1"><li>
Names (except as noted below)
should be all lowercase, with words separated by underscores.
For example, acronyms should be treated as ordinary names
(xml_parser instead of XML_parser).

</li><li>

Template parameter names should begin with an uppercase letter.

</li><li>

Use spaces rather than tabs.
Currently, CppAD uses a tabs stops at column multiples of 5.
Five columns were chosen to avoid high levels of indenting and to allow for
<code><font color='blue'><pre style='display:inline'> 
     if( expression )
          statement
     else statement
</pre></font></code>
with a tab after the else.
Automatic conversion to actual spaces should be easy.

</li></ol>


<br/>
<br/>
<b><big><a name="Tracing" id="Tracing">Tracing</a></big></b>
<br/>
Add tracing the operation sequence to the user API and documentation.
Tracing the operation sequence is currently done by changing the CppAD
source code. Use the command
<code><font color='blue'><pre style='display:inline'> 
     grep '^# *define *CPPAD_.*_TRACE' cppad/local/*.hpp
</pre></font></code>
to find all the possible tracing flags.


<br/>
<br/>
<b><big><a name="atan2" id="atan2">atan2</a></big></b>
<br/>
The <a href="atan2.xml" target="_top"><span style='white-space: nowrap'>atan2</span></a>
 function could be made faster by adding
a special operator for it.


<br/>
<br/>
<b><big><a name="BenderQuad" id="BenderQuad">BenderQuad</a></big></b>
<br/>
See the <a href="benderquad.xml#Problem" target="_top"><span style='white-space: nowrap'>problem</span></a>
 with the
current <code><font color="blue">BenderQuad</font></code> specifications.


<hr/>Input File: omh/wish_list.omh

</body>
</html>
