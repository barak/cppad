<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Common Variables use by Multi-Threaded Newton Method</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Common Variables use by Multi-Threaded Newton Method"/>
<meta name="keywords" id="keywords" content=" common variables use multi-threaded newton method purpose source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_newton_common_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="multi_newton.cpp.xml" target="_top">Prev</a>
</td><td><a href="multi_newton_setup.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>multi_newton.cpp</option>
<option>multi_newton_common</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
<option>simple_ad_openmp.cpp</option>
<option>simple_ad_bthread.cpp</option>
<option>simple_ad_pthread.cpp</option>
<option>team_example.cpp</option>
<option>harmonic.cpp</option>
<option>multi_atomic.cpp</option>
<option>multi_newton.cpp</option>
<option>team_thread.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>multi_newton.cpp-&gt;</option>
<option>multi_newton_common</option>
<option>multi_newton_setup</option>
<option>multi_newton_worker</option>
<option>multi_newton_takedown</option>
<option>multi_newton_run</option>
<option>multi_newton_time</option>
</select>
</td>
<td>multi_newton_common</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Source</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Common Variables use by Multi-Threaded Newton Method</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This source code defined the common
include files, defines, and variables that are used by the
multi-newton method.

<br/>
<br/>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/time_test.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cmath&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cstring&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"multi_newton.hpp"</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"team_thread.hpp"</span>
<span style="font-weight: bold"><span style="color: #000080"># define</span></span> USE_THREAD_ALLOC_FOR_WORK_ALL <span style="color: #993399">1</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// fast multi-threadeding memory allocator</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>       <span style="font-style: italic"><span style="color: #9A1900">// uses thread_alloc</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// number of threads, set by multi_newton_time.</span></span>
     <span style="color: #008080">size_t</span> num_threads_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// function we are finding zeros of, set by multi_newton_time</span></span>
     <span style="color: #009900">void</span> <span style="color: #990000">(*</span>fun_<span style="color: #990000">)(</span><span style="color: #009900">double</span> x<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> f<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> df<span style="color: #990000">)</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// convergence criteria, set by multi_newton_setup</span></span>
     <span style="color: #009900">double</span> epsilon_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// maximum number of iterations, set by  multi_newton_setup</span></span>
     <span style="color: #008080">size_t</span> max_itr_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// length for all sub-intervals</span></span>
     <span style="color: #009900">double</span> sub_length_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// structure with information for one thread</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #FF0000">{</span>
          <span style="font-style: italic"><span style="color: #9A1900">// number of sub intervals (worker input)</span></span>
          <span style="color: #008080">size_t</span> num_sub<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// beginning of interval (worker input)</span></span>
          <span style="color: #009900">double</span> xlow<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// end of interval (worker input)</span></span>
          <span style="color: #009900">double</span> xup<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// vector of zero candidates (worker output)</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// after call to multi_newton_setup:    x.size() == 0</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// after call to multi_newton_work:     x.size() is number of zeros</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// after call to multi_newton_takedown: x.size() == 0</span></span>
          <span style="color: #008080">vector&lt;double&gt;</span> x<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// false if an error occurs, true otherwise (worker output)</span></span>
          <span style="color: #009900">bool</span>   ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span> work_one_t<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// vector with information for all threads</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// after call to multi_newton_setup:    work_all.size() == num_threads</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// after call to multi_newton_takedown: work_all.size() == 0</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (use pointers instead of values to avoid false sharing)</span></span>
     <span style="color: #008080">vector&lt;work_one_t*&gt;</span> work_all_<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: example/multi_thread/multi_newton.cpp

</body>
</html>
