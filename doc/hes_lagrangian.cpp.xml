<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Hessian of Lagrangian and ADFun Default Constructor: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Hessian of Lagrangian and ADFun Default Constructor: Example and Test"/>
<meta name="keywords" id="keywords" content=" hessian lagrangian adfun default constructor: example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_hes_lagrangian.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="hessian.cpp.xml" target="_top">Prev</a>
</td><td><a href="forone.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>drivers</option>
<option>Hessian</option>
<option>hes_lagrangian.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>record_adfun</option>
<option>drivers</option>
<option>Forward</option>
<option>Reverse</option>
<option>sparsity_pattern</option>
<option>sparse_derivative</option>
<option>optimize</option>
<option>abs_normal</option>
<option>FunCheck</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>drivers-&gt;</option>
<option>Jacobian</option>
<option>Hessian</option>
<option>ForOne</option>
<option>RevOne</option>
<option>ForTwo</option>
<option>RevTwo</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Hessian-&gt;</option>
<option>hessian.cpp</option>
<option>hes_lagrangian.cpp</option>
</select>
</td>
<td>hes_lagrangian.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Hessian of Lagrangian and ADFun Default Constructor: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cassert&gt;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">Lagragian</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; CppAD::AD&lt;double&gt; &gt;</span> <span style="color: #990000">&amp;</span>xyz <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> xyz<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">6</span> <span style="color: #990000">);</span>

          <span style="color: #008080">AD&lt;double&gt;</span> x0 <span style="color: #990000">=</span> xyz<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          <span style="color: #008080">AD&lt;double&gt;</span> x1 <span style="color: #990000">=</span> xyz<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          <span style="color: #008080">AD&lt;double&gt;</span> x2 <span style="color: #990000">=</span> xyz<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>
          <span style="color: #008080">AD&lt;double&gt;</span> y0 <span style="color: #990000">=</span> xyz<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">];</span>
          <span style="color: #008080">AD&lt;double&gt;</span> y1 <span style="color: #990000">=</span> xyz<span style="color: #990000">[</span><span style="color: #993399">4</span><span style="color: #990000">];</span>
          <span style="color: #008080">AD&lt;double&gt;</span> z  <span style="color: #990000">=</span> xyz<span style="color: #990000">[</span><span style="color: #993399">5</span><span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// compute objective function</span></span>
          <span style="color: #008080">AD&lt;double&gt;</span> f <span style="color: #990000">=</span> x0 <span style="color: #990000">*</span> x0<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// compute constraint functions</span></span>
          <span style="color: #008080">AD&lt;double&gt;</span> g0 <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span> <span style="color: #990000">+</span> <span style="color: #993399">2</span><span style="color: #990000">.*</span>x1 <span style="color: #990000">+</span> <span style="color: #993399">3</span><span style="color: #990000">.*</span>x2<span style="color: #990000">;</span>
          <span style="color: #008080">AD&lt;double&gt;</span> g1 <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span> x0 <span style="color: #990000">*</span> x2 <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// compute the Lagragian</span></span>
          <span style="color: #008080">AD&lt;double&gt;</span> L <span style="color: #990000">=</span> y0 <span style="color: #990000">*</span> g0 <span style="color: #990000">+</span> y1 <span style="color: #990000">*</span> g1 <span style="color: #990000">+</span> z <span style="color: #990000">*</span> f<span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> L<span style="color: #990000">;</span>

     <span style="color: #FF0000">}</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; CppAD::AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">fg</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; CppAD::AD&lt;double&gt; &gt;</span> <span style="color: #990000">&amp;</span>x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">3</span> <span style="color: #990000">);</span>

          <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">fg</span></span><span style="color: #990000">(</span><span style="color: #993399">3</span><span style="color: #990000">);</span>
          fg<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          fg<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span> <span style="color: #990000">+</span> <span style="color: #993399">2</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> <span style="color: #993399">3</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>
          fg<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> fg<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">CheckHessian</span></span><span style="color: #990000">(</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> H <span style="color: #990000">,</span>
     <span style="color: #009900">double</span> x0<span style="color: #990000">,</span> <span style="color: #009900">double</span> x1<span style="color: #990000">,</span> <span style="color: #009900">double</span> x2<span style="color: #990000">,</span> <span style="color: #009900">double</span> y0<span style="color: #990000">,</span> <span style="color: #009900">double</span> y1<span style="color: #990000">,</span> <span style="color: #009900">double</span> z <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
          <span style="color: #009900">double</span> eps99 <span style="color: #990000">=</span> <span style="color: #993399">99.0</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>
          <span style="color: #009900">bool</span> ok  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> H<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">*</span> n <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">/*</span></span>
<span style="font-style: italic"><span style="color: #9A1900">          L   =    z*x0*x0 + y0*(1 + 2*x1 + 3*x2) + y1*log(x0*x2)</span></span>

<span style="font-style: italic"><span style="color: #9A1900">          L_0 = 2 * z * x0 + y1 / x0</span></span>
<span style="font-style: italic"><span style="color: #9A1900">          L_1 = y0 * 2</span></span>
<span style="font-style: italic"><span style="color: #9A1900">          L_2 = y0 * 3 + y1 / x2</span></span>
<span style="font-style: italic"><span style="color: #9A1900">          */</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// L_00 = 2 * z - y1 / ( x0 * x0 )</span></span>
          <span style="color: #009900">double</span> check <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> z <span style="color: #990000">-</span> y1 <span style="color: #990000">/</span> <span style="color: #990000">(</span>x0 <span style="color: #990000">*</span> x0<span style="color: #990000">);</span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>H<span style="color: #990000">[</span><span style="color: #993399">0</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">0</span><span style="color: #990000">],</span> check<span style="color: #990000">,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// L_01 = L_10 = 0</span></span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>H<span style="color: #990000">[</span><span style="color: #993399">0</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">],</span> <span style="color: #993399">0</span><span style="color: #990000">.,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>H<span style="color: #990000">[</span><span style="color: #993399">1</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">0</span><span style="color: #990000">],</span> <span style="color: #993399">0</span><span style="color: #990000">.,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// L_02 = L_20 = 0</span></span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>H<span style="color: #990000">[</span><span style="color: #993399">0</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">2</span><span style="color: #990000">],</span> <span style="color: #993399">0</span><span style="color: #990000">.,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>H<span style="color: #990000">[</span><span style="color: #993399">2</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">0</span><span style="color: #990000">],</span> <span style="color: #993399">0</span><span style="color: #990000">.,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// L_11 = 0</span></span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>H<span style="color: #990000">[</span><span style="color: #993399">1</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">],</span> <span style="color: #993399">0</span><span style="color: #990000">.,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// L_12 = L_21 = 0</span></span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>H<span style="color: #990000">[</span><span style="color: #993399">1</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">2</span><span style="color: #990000">],</span> <span style="color: #993399">0</span><span style="color: #990000">.,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>H<span style="color: #990000">[</span><span style="color: #993399">2</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">],</span> <span style="color: #993399">0</span><span style="color: #990000">.,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// L_22 = - y1 / (x2 * x2)</span></span>
          check <span style="color: #990000">=</span> <span style="color: #990000">-</span> y1 <span style="color: #990000">/</span> <span style="color: #990000">(</span>x2 <span style="color: #990000">*</span> x2<span style="color: #990000">);</span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>H<span style="color: #990000">[</span><span style="color: #993399">2</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">2</span><span style="color: #990000">],</span> check<span style="color: #990000">,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">UseL</span></span><span style="color: #990000">()</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// double values corresponding to x, y, and z vectors</span></span>
          <span style="color: #009900">double</span> <span style="font-weight: bold"><span style="color: #000000">x0</span></span><span style="color: #990000">(.</span><span style="color: #993399">5</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">x1</span></span><span style="color: #990000">(</span><span style="color: #993399">1e3</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">x2</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">y0</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">.),</span> <span style="font-weight: bold"><span style="color: #000000">y1</span></span><span style="color: #990000">(</span><span style="color: #993399">3</span><span style="color: #990000">.),</span> <span style="font-weight: bold"><span style="color: #000000">z</span></span><span style="color: #990000">(</span><span style="color: #993399">4</span><span style="color: #990000">.);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
          <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span>  <span style="font-weight: bold"><span style="color: #000000">a_x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
          a_x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x0<span style="color: #990000">;</span>
          a_x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x1<span style="color: #990000">;</span>
          a_x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x2<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// declare a_x as independent variable vector and start recording</span></span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// vector including x, y, and z</span></span>
          <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">a_xyz</span></span><span style="color: #990000">(</span>n <span style="color: #990000">+</span> <span style="color: #993399">2</span> <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
          a_xyz<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> a_x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          a_xyz<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> a_x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          a_xyz<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> a_x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>
          a_xyz<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> y0<span style="color: #990000">;</span>
          a_xyz<span style="color: #990000">[</span><span style="color: #993399">4</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> y1<span style="color: #990000">;</span>
          a_xyz<span style="color: #990000">[</span><span style="color: #993399">5</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> z<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// range space vector</span></span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span>  <span style="font-weight: bold"><span style="color: #000000">a_L</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
          a_L<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">Lagragian</span></span><span style="color: #990000">(</span>a_xyz<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// create K: x -&gt; L and stop tape recording.</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// Use default ADFun construction for example purposes.</span></span>
          CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> K<span style="color: #990000">;</span>
          K<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">,</span> a_L<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Operation sequence corresponding to K depends on</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// value of y0, y1, and z. Must redo calculations above when</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// y0, y1, or z changes.</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// declare independent variable vector and Hessian</span></span>
          <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
          <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">H</span></span><span style="color: #990000">(</span> n <span style="color: #990000">*</span> n <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// point at which we are computing the Hessian</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (must redo calculations below each time x changes)</span></span>
          x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x0<span style="color: #990000">;</span>
          x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x1<span style="color: #990000">;</span>
          x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x2<span style="color: #990000">;</span>
          H <span style="color: #990000">=</span> K<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Hessian</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// check this Hessian calculation</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #000000">CheckHessian</span></span><span style="color: #990000">(</span>H<span style="color: #990000">,</span> x0<span style="color: #990000">,</span> x1<span style="color: #990000">,</span> x2<span style="color: #990000">,</span> y0<span style="color: #990000">,</span> y1<span style="color: #990000">,</span> z<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">Usefg</span></span><span style="color: #990000">()</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// parameters defining problem</span></span>
          <span style="color: #009900">double</span> <span style="font-weight: bold"><span style="color: #000000">x0</span></span><span style="color: #990000">(.</span><span style="color: #993399">5</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">x1</span></span><span style="color: #990000">(</span><span style="color: #993399">1e3</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">x2</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">y0</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">.),</span> <span style="font-weight: bold"><span style="color: #000000">y1</span></span><span style="color: #990000">(</span><span style="color: #993399">3</span><span style="color: #990000">.),</span> <span style="font-weight: bold"><span style="color: #000000">z</span></span><span style="color: #990000">(</span><span style="color: #993399">4</span><span style="color: #990000">.);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
          <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span>  <span style="font-weight: bold"><span style="color: #000000">a_x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
          a_x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x0<span style="color: #990000">;</span>
          a_x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x1<span style="color: #990000">;</span>
          a_x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x2<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// declare a_x as independent variable vector and start recording</span></span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// range space vector</span></span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
          <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span>  <span style="font-weight: bold"><span style="color: #000000">a_fg</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
          a_fg <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">fg</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// create K: x -&gt; fg and stop tape recording</span></span>
          CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> K<span style="color: #990000">;</span>
          K<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">,</span> a_fg<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Operation sequence corresponding to K does not depend on</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// value of x0, x1, x2, y0, y1, or z.</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// forward and reverse mode arguments and results</span></span>
          <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
          <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">H</span></span><span style="color: #990000">(</span> n <span style="color: #990000">*</span> n <span style="color: #990000">);</span>
          <span style="color: #008080">vector&lt;double&gt;</span>  <span style="font-weight: bold"><span style="color: #000000">dx</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
          <span style="color: #008080">vector&lt;double&gt;</span>   <span style="font-weight: bold"><span style="color: #000000">w</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
          <span style="color: #008080">vector&lt;double&gt;</span>  <span style="font-weight: bold"><span style="color: #000000">dw</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">*</span>n<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// compute Hessian at this value of x</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (must redo calculations below each time x changes)</span></span>
          x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x0<span style="color: #990000">;</span>
          x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x1<span style="color: #990000">;</span>
          x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x2<span style="color: #990000">;</span>
          K<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// set weights to Lagrange multiplier values</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (must redo calculations below each time y0, y1, or z changes)</span></span>
          w<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> z<span style="color: #990000">;</span>
          w<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> y0<span style="color: #990000">;</span>
          w<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> y1<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// initialize dx as zero</span></span>
          <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               dx<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// loop over components of x</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     dx<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>             <span style="font-style: italic"><span style="color: #9A1900">// dx is i-th elementary vector</span></span>
               K<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> dx<span style="color: #990000">);</span>       <span style="font-style: italic"><span style="color: #9A1900">// partial w.r.t dx</span></span>
               dw <span style="color: #990000">=</span> K<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Reverse</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">,</span> w<span style="color: #990000">);</span>   <span style="font-style: italic"><span style="color: #9A1900">// deritavtive of partial</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    H<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> dw<span style="color: #990000">[</span> j <span style="color: #990000">*</span> <span style="color: #993399">2</span> <span style="color: #990000">+</span> <span style="color: #993399">1</span> <span style="color: #990000">];</span>
               dx<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>             <span style="font-style: italic"><span style="color: #9A1900">// dx is zero vector</span></span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// check this Hessian calculation</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #000000">CheckHessian</span></span><span style="color: #990000">(</span>H<span style="color: #990000">,</span> x0<span style="color: #990000">,</span> x1<span style="color: #990000">,</span> x2<span style="color: #990000">,</span> y0<span style="color: #990000">,</span> y1<span style="color: #990000">,</span> z<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">HesLagrangian</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// UseL is simpler, but must retape every time that y of z changes</span></span>
     ok     <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">UseL</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Usefg does not need to retape unless operation sequence changes</span></span>
     ok     <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">Usefg</span></span><span style="color: #990000">();</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: example/general/hes_lagrangian.cpp

</body>
</html>
