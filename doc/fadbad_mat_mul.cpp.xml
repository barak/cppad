<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Fadbad Speed: Matrix Multiplication</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Fadbad Speed: Matrix Multiplication"/>
<meta name="keywords" id="keywords" content=" fadbad speed: matrix multiplication link_mat_mul speed multiply specifications implementation "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_fadbad_mat_mul.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="fadbad_det_lu.cpp.xml" target="_top">Prev</a>
</td><td><a href="fadbad_ode.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_fadbad</option>
<option>fadbad_mat_mul.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>library</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_fadbad-&gt;</option>
<option>fadbad_det_minor.cpp</option>
<option>fadbad_det_lu.cpp</option>
<option>fadbad_mat_mul.cpp</option>
<option>fadbad_ode.cpp</option>
<option>fadbad_poly.cpp</option>
<option>fadbad_sparse_hessian.cpp</option>
<option>fadbad_sparse_jacobian.cpp</option>
</select>
</td>
<td>fadbad_mat_mul.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Specifications</option>
<option>Implementation</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>Fadbad Speed: Matrix Multiplication</big></big></b></center>
<br/>
<b><big><a name="Specifications" id="Specifications">Specifications</a></big></b>
<br/>
See <a href="link_mat_mul.xml" target="_top"><span style='white-space: nowrap'>link_mat_mul</span></a>
.

<br/>
<br/>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>


<code><font color='blue'><pre style='display:inline'> 
# include &lt;FADBAD++/badiff.h&gt;
# include &lt;cppad/speed/mat_sum_sq.hpp&gt;
# include &lt;cppad/speed/uniform_01.hpp&gt;
# include &lt;cppad/vector.hpp&gt;

// list of possible options
extern bool global_memory, global_onetape, global_atomic, global_optimize;

bool link_mat_mul(
	size_t                           size     , 
	size_t                           repeat   , 
	CppAD::vector&lt;double&gt;&amp;           x        ,
	CppAD::vector&lt;double&gt;&amp;           z        ,
	CppAD::vector&lt;double&gt;&amp;           dz       )
{
	// speed test global option values
	if( global_memory || global_onetape || global_atomic || global_optimize )
		return false;
	// The correctness check for this test is failing, so abort (for now).
	return false;

	// -----------------------------------------------------
	// setup

	// object for computing determinant
	typedef fadbad::B&lt;double&gt;       ADScalar; 
	typedef CppAD::vector&lt;ADScalar&gt; ADVector; 

	size_t j;                // temporary index
	size_t m = 1;            // number of dependent variables
	size_t n = size * size;  // number of independent variables
	ADVector   X(n);         // AD domain space vector
	ADVector   Y(n);         // Store product matrix
	ADVector   Z(m);         // AD range space vector
	
	// ------------------------------------------------------
	while(repeat--)
	{	// get the next matrix
		CppAD::uniform_01(n, x);

		// set independent variable values
		for(j = 0; j &lt; n; j++)
			X[j] = x[j];

		// do the computation
		mat_sum_sq(size, X, Y, Z);

		// create function object f : X -&gt; Z
		Z[0].diff(0, m);  // index 0 of m dependent variables

		// evaluate and return gradient using reverse mode
		for(j = 0; j &lt; n; j++)
			dz[j] = X[j].d(0); // partial Z[0] w.r.t X[j]
	}
	// return function value
	z[0] = Z[0].x();

	// ---------------------------------------------------------
	return true;
}
</pre></font></code>


<hr/>Input File: speed/fadbad/mat_mul.cpp

</body>
</html>
