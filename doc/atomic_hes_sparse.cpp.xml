<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Atomic Operation Hessian Sparsity: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Atomic Operation Hessian Sparsity: Example and Test"/>
<meta name="keywords" id="keywords" content=" atomic operation hessian sparsity: example and test sparsity purpose start class definition constructor forward for_sparse_jac rev_sparse_hes use function with x_1 both a variable parameter "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_hes_sparse.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="atomic_tangent.cpp.xml" target="_top">Prev</a>
</td><td><a href="atomic_mat_mul.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_base</option>
<option>atomic_hes_sparse.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>std_math_ad</option>
<option>MathOther</option>
<option>CondExp</option>
<option>Discrete</option>
<option>atomic</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>atomic-&gt;</option>
<option>checkpoint</option>
<option>atomic_base</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>atomic_base-&gt;</option>
<option>atomic_ctor</option>
<option>atomic_option</option>
<option>atomic_afun</option>
<option>atomic_forward</option>
<option>atomic_reverse</option>
<option>atomic_for_sparse_jac</option>
<option>atomic_rev_sparse_jac</option>
<option>atomic_rev_sparse_hes</option>
<option>atomic_base_clear</option>
<option>atomic_get_started.cpp</option>
<option>atomic_norm_sq.cpp</option>
<option>atomic_reciprocal.cpp</option>
<option>atomic_tangent.cpp</option>
<option>atomic_hes_sparse.cpp</option>
<option>atomic_mat_mul.cpp</option>
</select>
</td>
<td>atomic_hes_sparse.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Start Class Definition</option>
<option>Constructor</option>
<option>forward</option>
<option>for_sparse_jac</option>
<option>rev_sparse_hes</option>
<option>Use Atomic Function</option>
<option>Test with x_1 Both a Variable and a Parameter</option>
</select>
</td>
</tr></table><br/>


<center><b><big><big>Atomic Operation Hessian Sparsity: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This example demonstrates calculation of the Hessian sparsity pattern
for an atomic operation.



<br/>
<br/>
<b><big><a name="Start Class Definition" id="Start Class Definition">Start Class Definition</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
# include &lt;cppad/cppad.hpp&gt;
namespace {          // isolate items below to this file
using CppAD::vector; // abbreviate as vector
//
// a utility to compute the union of two sets.
void my_union(
	std::set&lt;size_t&gt;&amp;         result  ,
	const std::set&lt;size_t&gt;&amp;   left    ,
	const std::set&lt;size_t&gt;&amp;   right   )
{	std::set&lt;size_t&gt; temp;
	std::set_union(
		left.begin()              ,
		left.end()                ,
		right.begin()             ,
		right.end()               ,
		std::inserter(temp, temp.begin())
	);
	result.swap(temp);
}
//
class atomic_hes_sparse : public CppAD::atomic_base&lt;double&gt; {
</pre></font></code>

<br/>
<br/>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
	public:
	// constructor (could use const char* for name)
	atomic_hes_sparse(const std::string&amp; name) : 
	CppAD::atomic_base&lt;double&gt;(name)
	{ }
	private:
</pre></font></code>

<br/>
<br/>
<b><big><a name="forward" id="forward">forward</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
	// forward mode routine called by CppAD
	virtual bool forward(
		size_t                    p ,
		size_t                    q ,
		const vector&lt;bool&gt;&amp;      vx ,
		      vector&lt;bool&gt;&amp;      vy ,
		const vector&lt;double&gt;&amp;    tx ,
		      vector&lt;double&gt;&amp;    ty
	)
	{	size_t n = tx.size() / (q + 1);
		size_t m = ty.size() / (q + 1);
		assert( n == 2 );
		assert( m == 2 );

		// return flag
		bool ok = q == 0;
		if( ! ok )
			return ok;

		// check for defining variable information
		// This case must always be implemented
		if( vx.size() &gt; 0 )
		{	vy[0] = vx[0];
			vy[1] = vx[0] || vy[0];
		}

		// Order zero forward mode.
		// This case must always be implemented
		// y^0 = f( x^0 ) = [ x0_0 * x0_0  , x0_0 * x0_1 ]^T
		assert( p &lt;= 0 );
		if( p &lt;= 0 )
		{	ty[0] = tx[0] * tx[0];
			ty[1] = tx[0] * tx[1];
		}
		return ok;
	}
</pre></font></code>

<br/>
<br/>
<b><big><a name="for_sparse_jac" id="for_sparse_jac">for_sparse_jac</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
	// forward Jacobian set sparsity routine called by CppAD
	virtual bool for_sparse_jac(
		size_t                                p ,
		const vector&lt; std::set&lt;size_t&gt; &gt;&amp;     r ,
		      vector&lt; std::set&lt;size_t&gt; &gt;&amp;     s )
	{	// This function needed if using f.ForSparseJac 
		// with afun.option( CppAD::atomic_base&lt;double&gt;::set_sparsity_enum )
		size_t n = r.size();
		size_t m = s.size();
		assert( n == 2 );
		assert( m == 2 );

		// sparsity for S(x) = f'(x) * R is union of rows of R
		s[0] = r[0];
		my_union(s[1], r[0], r[1]);

		return true; 
	}
</pre></font></code>

<br/>
<br/>
<b><big><a name="rev_sparse_hes" id="rev_sparse_hes">rev_sparse_hes</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
	// reverse Hessian set sparsity routine called by CppAD
	virtual bool rev_sparse_hes(
		const vector&lt;bool&gt;&amp;                   vx,
		const vector&lt;bool&gt;&amp;                   s ,
		      vector&lt;bool&gt;&amp;                   t ,
		size_t                                p ,
		const vector&lt; std::set&lt;size_t&gt; &gt;&amp;     r ,
		const vector&lt; std::set&lt;size_t&gt; &gt;&amp;     u ,
		      vector&lt; std::set&lt;size_t&gt; &gt;&amp;     v )
	{	// This function needed if using RevSparseHes
		// with afun.option( CppAD::atomic_base&lt;double&gt;::set_sparsity_enum )
		size_t n = vx.size();
		size_t m = s.size();
		assert( t.size() == n );
		assert( r.size() == n );
		assert( u.size() == m );
		assert( v.size() == n );
		assert( n == 2 );
		assert( m == 2 );

		// There are no cross term second derivatives for this case,
		// so it is not necessary to vx.

		// sparsity for T(x) = S(x) * f'(x) 
		t[0] = s[0];
		t[1] = s[0] || s[1];
	
		// V(x) = f'(x)^T * g''(y) * f'(x) * R  +  g'(y) * f''(x) * R 
		// U(x) = g''(y) * f'(x) * R
		// S(x) = g'(y)
		
		// back propagate the sparsity for U,
		// note both components of f'(x) may be non-zero;
		v[0] = u[0];
		my_union(v[1], u[0], u[1]);

		// include forward Jacobian sparsity in Hessian sparsity
		// f_0''(x) * R 
		if( s[0] )
			my_union(v[0], v[0], r[0] );
		// f_1''(x) * R 
		if( s[1] )
		{	my_union(v[1], v[1], r[0] );
			my_union(v[0], v[0], r[1] );
		}
		return true;
	}
}; // End of atomic_hes_sparse class

</pre></font></code>

<br/>
<br/>
<b><big><a name="Use Atomic Function" id="Use Atomic Function">Use Atomic Function</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
bool use_atomic_hes_sparse(bool x_1_variable)
{	bool ok = true;
	using CppAD::AD;
	using CppAD::NearEqual;
	double eps = 10. * CppAD::numeric_limits&lt;double&gt;::epsilon();
	//
	// Create the atomic hes_sparse object
	atomic_hes_sparse afun(&quot;atomic_hes_sparse&quot;);
	//
	// Create the function f(u)
	//
	// domain space vector
	size_t n  = 2;
	double x0_0 = 0.75, x0_1 = 2.00;
	vector&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt; au(n);
	au[0] = x0_0;
	au[1] = x0_1; 

	// declare independent variables and start tape recording
	CppAD::<a href="independent.xml" target="_top">Independent</a>(au);

	// range space vector 
	size_t m = 2;
	vector&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt; ay(m);

	// call user function 
	vector&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt; ax(n);
	ax[0] = au[0];
	if( x_1_variable )
		ax[1] = au[1];
	else
		ax[1] = x0_1;
	afun(ax, ay);        // y = [ x[0] * x[0] ,  x[0] * x[1] ] ^T

	// create f: u -&gt; y and stop tape recording
	CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f;
	f.Dependent (au, ay);  // f(u) = y
	//
	// check function value 
	double check_y0_0 = x0_0 * x0_0;
	double check_y0_1 = x0_0 * x0_1;
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>( Value(ay[0]) , check_y0_0,  eps, eps);
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>( Value(ay[1]) , check_y0_1,  eps, eps);

	// check zero order forward mode
	size_t q;
	vector&lt;double&gt; uq(n), yq(m);
	q     = 0;
	uq[0] = x0_0;
	uq[1] = x0_1;
	yq    = f.<a href="forward.xml" target="_top">Forward</a>(q, uq);
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(yq[0] , check_y0_0,  eps, eps);
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(yq[1] , check_y0_1,  eps, eps);

	// forward sparse jacobian
	afun.option( CppAD::atomic_base&lt;double&gt;::set_sparsity_enum );
	vector&lt; std::set&lt;size_t&gt; &gt; r(2), jac_s(2), check_s(2);
	r[0].insert(0);
	r[1].insert(1);
	jac_s = f.ForSparseJac(n, r);
	check_s[0].insert(0);
	ok &amp;= jac_s[0] == check_s[0];   
	check_s[1].insert(0);
	if( x_1_variable )
		check_s[1].insert(1);
	ok &amp;= jac_s[1] == check_s[1];   

	// reverse sparse Hessian
	vector&lt; std::set&lt;size_t&gt; &gt; h(2), check_h(2), hes_s(1);
	hes_s[0].insert(0);
	hes_s[0].insert(1);
	h = f.RevSparseHes(n, hes_s);
	check_h[0].insert(0);
	if( x_1_variable )
		check_h[0].insert(1);
	ok &amp;= h[0] == check_h[0];
	if( x_1_variable )
		check_h[1].insert(0);
	ok &amp;= h[1] == check_h[1];

	return ok;
}
}  // End empty namespace
</pre></font></code>

<br/>
<br/>
<b><big><a name="Test with x_1 Both a Variable and a Parameter" id="Test with x_1 Both a Variable and a Parameter">Test with x_1 Both a Variable and a Parameter</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
bool hes_sparse(void)
{	bool ok = true;
	// test with x_1 a variable
	ok     &amp;= use_atomic_hes_sparse(true);
	// test with x_1 a parameter
	ok     &amp;= use_atomic_hes_sparse(false);
	return ok;
}
</pre></font></code>

 

<hr/>Input File: example/atomic/hes_sparse.cpp

</body>
</html>
