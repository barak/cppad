<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Interfacing to C: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Interfacing to C: Example and Test"/>
<meta name="keywords" id="keywords" content=" interfacing to c: example test C interface difference central "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_interface2c.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="hes_lu_det.cpp.xml" target="_top">Prev</a>
</td><td><a href="jac_minor_det.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>interface2c.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>testvector</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>General-&gt;</option>
<option>ad_fun.cpp</option>
<option>ad_in_c.cpp</option>
<option>conj_grad.cpp</option>
<option>cppad_eigen.hpp</option>
<option>hes_minor_det.cpp</option>
<option>hes_lu_det.cpp</option>
<option>interface2c.cpp</option>
<option>jac_minor_det.cpp</option>
<option>jac_lu_det.cpp</option>
<option>mul_level</option>
<option>ode_stiff.cpp</option>
<option>mul_level_ode.cpp</option>
<option>mul_level_adolc_ode.cpp</option>
<option>ode_taylor.cpp</option>
<option>stack_machine.cpp</option>
</select>
</td>
<td>interface2c.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Interfacing to C: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>  <span style="font-style: italic"><span style="color: #9A1900">// CppAD utilities</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cassert&gt;</span>        <span style="font-style: italic"><span style="color: #9A1900">// assert macro</span></span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// Begin empty namespace</span></span>
<span style="font-style: italic"><span style="color: #9A1900">/*</span></span>
<span style="font-style: italic"><span style="color: #9A1900">Compute the value of a sum of Gaussians defined by a and evaluated at x</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     y = sum_{i=1}^n a[3*i] exp( (x - a[3*i+1])^2 / a[3*i+2])^2 )</span></span>
<span style="font-style: italic"><span style="color: #9A1900">where the floating point type is a template parameter</span></span>
<span style="font-style: italic"><span style="color: #9A1900">*/</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Float</span><span style="color: #990000">&gt;</span>
<span style="color: #008080">Float</span> <span style="font-weight: bold"><span style="color: #000000">sumGauss</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">Float</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;Float&gt;</span> <span style="color: #990000">&amp;</span>a<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>
     <span style="font-style: italic"><span style="color: #9A1900">// number of components in a</span></span>
     <span style="color: #008080">size_t</span> na <span style="color: #990000">=</span> a<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// number of Gaussians</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> na <span style="color: #990000">/</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the restricitons on na</span></span>
     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> na <span style="color: #990000">==</span> n <span style="color: #990000">*</span> <span style="color: #993399">3</span> <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare temporaries used inside of loop</span></span>
     <span style="color: #008080">Float</span> ex<span style="color: #990000">,</span> arg<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// initialize sum</span></span>
     <span style="color: #008080">Float</span> y <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// loop with respect to Gaussians</span></span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>
          arg <span style="color: #990000">=</span>   <span style="color: #990000">(</span>x <span style="color: #990000">-</span> a<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">*</span>i<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">])</span> <span style="color: #990000">/</span> a<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">*</span>i<span style="color: #990000">+</span><span style="color: #993399">2</span><span style="color: #990000">];</span>
          ex  <span style="color: #990000">=</span>   <span style="font-weight: bold"><span style="color: #000000">exp</span></span><span style="color: #990000">(-</span>arg <span style="color: #990000">*</span> arg<span style="color: #990000">);</span>
          y  <span style="color: #990000">+=</span>   a<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">*</span>i<span style="color: #990000">]</span> <span style="color: #990000">*</span> ex<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> y<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="font-style: italic"><span style="color: #9A1900">/*</span></span>
<span style="font-style: italic"><span style="color: #9A1900">Create a C function interface that computes both</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     y = sum_{i=1}^n a[3*i] exp( (x - a[3*i+1])^2 / a[3*i+2])^2 )</span></span>
<span style="font-style: italic"><span style="color: #9A1900">and its derivative with respect to the parameter vector a.</span></span>
<span style="font-style: italic"><span style="color: #9A1900">*/</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #FF0000">"C"</span>
<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">sumGauss</span></span><span style="color: #990000">(</span><span style="color: #009900">float</span> x<span style="color: #990000">,</span> <span style="color: #009900">float</span> a<span style="color: #990000">[],</span> <span style="color: #009900">float</span> <span style="color: #990000">*</span>y<span style="color: #990000">,</span> <span style="color: #009900">float</span> dyda<span style="color: #990000">[],</span> <span style="color: #008080">size_t</span> na<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// Note that any simple vector could replace CppAD::vector;</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// for example, std::vector, std::valarray</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the restrictions on na</span></span>
     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> na <span style="color: #990000">%</span> <span style="color: #993399">3</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// mod(na, 3) = 0</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// use the shorthand ADfloat for the type CppAD::AD&lt;float&gt;</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;float&gt;</span> ADfloat<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// vector for indpendent variables</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;ADfloat&gt;</span> <span style="font-weight: bold"><span style="color: #000000">A</span></span><span style="color: #990000">(</span>na<span style="color: #990000">);</span>      <span style="font-style: italic"><span style="color: #9A1900">// used with template function above</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;float&gt;</span>   <span style="font-weight: bold"><span style="color: #000000">acopy</span></span><span style="color: #990000">(</span>na<span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// used for derivative calculations</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// vector for the dependent variables (there is only one)</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;ADfloat&gt;</span> <span style="font-weight: bold"><span style="color: #000000">Y</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// copy the independent variables from C vector to CppAD vectors</span></span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> na<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          A<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> acopy<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> a<span style="color: #990000">[</span>i<span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare that A is the independent variable vector</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>A<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// value of x as an ADfloat object</span></span>
     <span style="color: #008080">ADfloat</span> X <span style="color: #990000">=</span> x<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Evaluate template version of sumGauss with ADfloat as the template</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// parameter. Set the independent variable to the resulting value</span></span>
     Y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">sumGauss</span></span><span style="color: #990000">(</span>X<span style="color: #990000">,</span> A<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// create the AD function object F : A -&gt; Y</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">F</span></span><span style="color: #990000">(</span>A<span style="color: #990000">,</span> Y<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// use Value to convert Y[0] to float and return y = F(a)</span></span>
     <span style="color: #990000">*</span>y <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Value</span></span><span style="color: #990000">(</span>Y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// evaluate the derivative F'(a)</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">J</span></span><span style="color: #990000">(</span>na<span style="color: #990000">);</span>
     J <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Jacobian</span></span><span style="color: #990000">(</span>acopy<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// return the value of dyda = F'(a) as a C vector</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> na<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          dyda<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> J<span style="color: #990000">[</span>i<span style="color: #990000">];</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="font-style: italic"><span style="color: #9A1900">/*</span></span>
<span style="font-style: italic"><span style="color: #9A1900">Link CppAD::NearEqual so do not have to use namespace notation in Interface2C</span></span>
<span style="font-style: italic"><span style="color: #9A1900">*/</span></span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span><span style="color: #009900">float</span> x<span style="color: #990000">,</span> <span style="color: #009900">float</span> y<span style="color: #990000">,</span> <span style="color: #009900">float</span> r<span style="color: #990000">,</span> <span style="color: #009900">float</span> a<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> y<span style="color: #990000">,</span> r<span style="color: #990000">,</span> a<span style="color: #990000">);</span>
<span style="color: #FF0000">}</span>

<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// End empty namespace</span></span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">Interface2C</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// This routine is intentionally coded as if it were a C routine</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// except for the fact that it uses the predefined type bool.</span></span>
     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare variables</span></span>
     <span style="color: #009900">float</span> x<span style="color: #990000">,</span> a<span style="color: #990000">[</span><span style="color: #993399">6</span><span style="color: #990000">],</span> y<span style="color: #990000">,</span> dyda<span style="color: #990000">[</span><span style="color: #993399">6</span><span style="color: #990000">],</span> tmp<span style="color: #990000">[</span><span style="color: #993399">6</span><span style="color: #990000">];</span>
     <span style="color: #008080">size_t</span> na<span style="color: #990000">,</span> i<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// number of parameters (3 for each Gaussian)</span></span>
     na <span style="color: #990000">=</span> <span style="color: #993399">6</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// number of Gaussians: n  = na / 3;</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// value of x</span></span>
     x <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// value of the parameter vector a</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> na<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          a<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">(</span><span style="color: #009900">float</span><span style="color: #990000">)</span> <span style="color: #990000">(</span>i<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// evaulate function and derivative</span></span>
     <span style="font-weight: bold"><span style="color: #000000">sumGauss</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> a<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>y<span style="color: #990000">,</span> dyda<span style="color: #990000">,</span> na<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compare dyda to central difference approximation for deriative</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> na<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// local variables</span></span>
          <span style="color: #009900">float</span> small<span style="color: #990000">,</span> ai<span style="color: #990000">,</span> yp<span style="color: #990000">,</span> ym<span style="color: #990000">,</span> dy_da<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// We assume that the type float has at least 7 digits of</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// precision, so we choose small to be about pow(10., -7./2.).</span></span>
          small  <span style="color: #990000">=</span> <span style="color: #990000">(</span><span style="color: #009900">float</span><span style="color: #990000">)</span> <span style="color: #993399">3e-4</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// value of this component of a</span></span>
          ai    <span style="color: #990000">=</span> a<span style="color: #990000">[</span>i<span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// evaluate F( a + small * ei )</span></span>
          a<span style="color: #990000">[</span>i<span style="color: #990000">]</span>  <span style="color: #990000">=</span> ai <span style="color: #990000">+</span> small<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">sumGauss</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> a<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>yp<span style="color: #990000">,</span> tmp<span style="color: #990000">,</span> na<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// evaluate F( a - small * ei )</span></span>
          a<span style="color: #990000">[</span>i<span style="color: #990000">]</span>  <span style="color: #990000">=</span> ai <span style="color: #990000">-</span> small<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">sumGauss</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> a<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>ym<span style="color: #990000">,</span> tmp<span style="color: #990000">,</span> na<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// evaluate central difference approximates for partial</span></span>
          dy_da <span style="color: #990000">=</span> <span style="color: #990000">(</span>yp <span style="color: #990000">-</span> ym<span style="color: #990000">)</span> <span style="color: #990000">/</span> <span style="color: #990000">(</span><span style="color: #993399">2</span> <span style="color: #990000">*</span> small<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// restore this component of a</span></span>
          a<span style="color: #990000">[</span>i<span style="color: #990000">]</span>  <span style="color: #990000">=</span> ai<span style="color: #990000">;</span>

          ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dyda<span style="color: #990000">[</span>i<span style="color: #990000">],</span> dy_da<span style="color: #990000">,</span> small<span style="color: #990000">,</span> small<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: example/interface2c.cpp

</body>
</html>
