<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Using vectorBool Sparsity To Conserve Memory: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Using vectorBool Sparsity To Conserve Memory: Example and Test"/>
<meta name="keywords" id="keywords" content=" using vectorbool sparsity to conserve memory: example test purpose "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_bool_sparsity.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="for_sparse_hes.cpp.xml" target="_top">Prev</a>
</td><td><a href="drivers.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>FunEval</option>
<option>Sparse</option>
<option>bool_sparsity.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>abort_recording</option>
<option>seq_property</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>optimize</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>FunEval-&gt;</option>
<option>Forward</option>
<option>Reverse</option>
<option>Sparse</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Sparse-&gt;</option>
<option>ForSparseJac</option>
<option>RevSparseJac</option>
<option>dependency.cpp</option>
<option>RevSparseHes</option>
<option>ForSparseHes</option>
<option>bool_sparsity.cpp</option>
</select>
</td>
<td>bool_sparsity.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Using vectorBool Sparsity To Conserve Memory: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This example show how to conserve memory when computing sparsity patterns.

<code><font color="blue">
<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>cout<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vectorBool<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>ADFun<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// function f(x) that we are computing sparsity patterns for</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Float</span><span style="color: #990000">&gt;</span>
     <span style="color: #008080">vector&lt;Float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">fun</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span>Float<span style="color: #990000">&gt;&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> n  <span style="color: #990000">=</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">vector&lt;Float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">ret</span></span><span style="color: #990000">(</span>n <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #990000">(</span>j <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">%</span> n<span style="color: #990000">;</span>
               ret<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          ret<span style="color: #990000">[</span>n<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ret<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// check sparsity pattern for f(x)</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">check_jac</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vectorBool<span style="color: #990000">&amp;</span> pattern<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> n<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #990000">(</span>i <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">%</span> n<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> non_zero <span style="color: #990000">=</span> <span style="color: #990000">(</span>i <span style="color: #990000">==</span> j<span style="color: #990000">)</span> <span style="color: #990000">||</span> <span style="color: #990000">(</span>j <span style="color: #990000">==</span> k<span style="color: #990000">);</span>
                    ok <span style="color: #990000">&amp;=</span> pattern<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">==</span> non_zero<span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               ok <span style="color: #990000">&amp;=</span> pattern<span style="color: #990000">[</span> n <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// check sparsity pattern for the Hessian of sum_i f_i(x)</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">check_hes</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vectorBool<span style="color: #990000">&amp;</span> pattern<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> n<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> k1 <span style="color: #990000">=</span> <span style="color: #990000">(</span>i <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">%</span> n<span style="color: #990000">;</span>
               <span style="color: #008080">size_t</span> k2 <span style="color: #990000">=</span> <span style="color: #990000">(</span>n <span style="color: #990000">+</span> i <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">%</span> n<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> non_zero <span style="color: #990000">=</span> <span style="color: #990000">(</span>i <span style="color: #990000">==</span> j<span style="color: #990000">)</span> <span style="color: #990000">||</span> <span style="color: #990000">(</span>j <span style="color: #990000">==</span> k1<span style="color: #990000">)</span> <span style="color: #990000">||</span> <span style="color: #990000">(</span>j <span style="color: #990000">==</span> k2<span style="color: #990000">);</span>
                    ok <span style="color: #990000">&amp;=</span> pattern<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">==</span> non_zero<span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// compute sparsity for Jacobian of f(x) using forward mode</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">for_sparse_jac</span></span><span style="color: #990000">(</span>ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> f<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Domain</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Range</span></span><span style="color: #990000">();</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// number of columns of the sparsity patter to compute at a time</span></span>
          <span style="color: #008080">size_t</span> n_col <span style="color: #990000">=</span> vectorBool<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">bit_per_unit</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">pattern</span></span><span style="color: #990000">(</span>m <span style="color: #990000">*</span> n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">s</span></span><span style="color: #990000">(</span>m <span style="color: #990000">*</span> n_col<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">r</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n_col<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="color: #008080">size_t</span> n_loop <span style="color: #990000">=</span> <span style="color: #990000">(</span>n <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">/</span> n_col <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i_loop <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i_loop <span style="color: #990000">&lt;</span> n_loop<span style="color: #990000">;</span> i_loop<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> j_col <span style="color: #990000">=</span> i_loop <span style="color: #990000">*</span> n_col<span style="color: #990000">;</span>

               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n_col<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                         r<span style="color: #990000">[</span>i <span style="color: #990000">*</span> n_col <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">(</span>i <span style="color: #990000">==</span> j_col <span style="color: #990000">+</span> j<span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
               s <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">ForSparseJac</span></span><span style="color: #990000">(</span>n_col<span style="color: #990000">,</span> r<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n_col<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                         <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> j_col <span style="color: #990000">+</span> j <span style="color: #990000">&lt;</span> n <span style="color: #990000">)</span>
                              pattern<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j_col <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> s<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n_col <span style="color: #990000">+</span> j<span style="color: #990000">];</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">check_jac</span></span><span style="color: #990000">(</span>pattern<span style="color: #990000">,</span> n<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// compute sparsity for Jacobian of f(x) using reverse mode</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_jac</span></span><span style="color: #990000">(</span>ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> f<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Domain</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Range</span></span><span style="color: #990000">();</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// number of rows of the sparsity patter to compute at a time</span></span>
          <span style="color: #008080">size_t</span> n_row <span style="color: #990000">=</span> vectorBool<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">bit_per_unit</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">pattern</span></span><span style="color: #990000">(</span>m <span style="color: #990000">*</span> n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">s</span></span><span style="color: #990000">(</span>n_row <span style="color: #990000">*</span> n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">r</span></span><span style="color: #990000">(</span>n_row <span style="color: #990000">*</span> m<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="color: #008080">size_t</span> n_loop <span style="color: #990000">=</span> <span style="color: #990000">(</span>m <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">/</span> n_row <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i_loop <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i_loop <span style="color: #990000">&lt;</span> n_loop<span style="color: #990000">;</span> i_loop<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_row <span style="color: #990000">=</span> i_loop <span style="color: #990000">*</span> n_row<span style="color: #990000">;</span>

               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n_row<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                         r<span style="color: #990000">[</span>i <span style="color: #990000">*</span> m <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">(</span>i_row <span style="color: #990000">+</span> i <span style="color: #990000">==</span> j<span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
               s <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseJac</span></span><span style="color: #990000">(</span>n_row<span style="color: #990000">,</span> r<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n_row<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                         <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i_row <span style="color: #990000">+</span> i <span style="color: #990000">&lt;</span> m <span style="color: #990000">)</span>
                              pattern<span style="color: #990000">[</span> <span style="color: #990000">(</span>i_row <span style="color: #990000">+</span> i<span style="color: #990000">)</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> s<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">];</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">check_jac</span></span><span style="color: #990000">(</span>pattern<span style="color: #990000">,</span> n<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// compute sparsity for Hessian of sum_i f_i (x)</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_hes</span></span><span style="color: #990000">(</span>ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> f<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Domain</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Range</span></span><span style="color: #990000">();</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// number of columns of the sparsity patter to compute at a time</span></span>
          <span style="color: #008080">size_t</span> n_col <span style="color: #990000">=</span> vectorBool<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">bit_per_unit</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">pattern</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">r</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n_col<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">h</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n_col<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// consider case where Hessian for sum of f_i(x) w.r.t i</span></span>
          <span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">s</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               s<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="color: #008080">size_t</span> n_loop <span style="color: #990000">=</span> <span style="color: #990000">(</span>n <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">/</span> n_col <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i_loop <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i_loop <span style="color: #990000">&lt;</span> n_loop<span style="color: #990000">;</span> i_loop<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> j_col <span style="color: #990000">=</span> i_loop <span style="color: #990000">*</span> n_col<span style="color: #990000">;</span>

               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n_col<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                         r<span style="color: #990000">[</span>i <span style="color: #990000">*</span> n_col <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">(</span>i <span style="color: #990000">==</span> j_col <span style="color: #990000">+</span> j<span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">ForSparseJac</span></span><span style="color: #990000">(</span>n_col<span style="color: #990000">,</span> r<span style="color: #990000">);</span>
               <span style="color: #009900">bool</span> transpose <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
               h <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseHes</span></span><span style="color: #990000">(</span>n_col<span style="color: #990000">,</span> s<span style="color: #990000">,</span> transpose<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n_col<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                         <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> j_col <span style="color: #990000">+</span> j <span style="color: #990000">&lt;</span> n <span style="color: #990000">)</span>
                              pattern<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j_col <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> h<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n_col <span style="color: #990000">+</span> j<span style="color: #990000">];</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">check_hes</span></span><span style="color: #990000">(</span>pattern<span style="color: #990000">,</span> n<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>
<span style="font-style: italic"><span style="color: #9A1900">// driver for all of the cases above</span></span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">bool_sparsity</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// record the funcion</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">100</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> n <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span>j<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>
     y <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">fun</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>
     <span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> y<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// run the three example / tests</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">for_sparse_jac</span></span><span style="color: #990000">(</span>f<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_jac</span></span><span style="color: #990000">(</span>f<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_hes</span></span><span style="color: #990000">(</span>f<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: example/bool_sparsity.cpp

</body>
</html>
