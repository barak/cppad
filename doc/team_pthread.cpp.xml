<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Pthread Implementation of a Team of AD Threads</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Pthread Implementation of a Team of AD Threads"/>
<meta name="keywords" id="keywords" content=" pthread implementation team ad threads pthread_exit bug cygwin "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_team_pthread.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="team_bthread.cpp.xml" target="_top">Prev</a>
</td><td><a href="utility.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>team_thread.hpp</option>
<option>team_pthread.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
<option>simple_ad_openmp.cpp</option>
<option>simple_ad_bthread.cpp</option>
<option>simple_ad_pthread.cpp</option>
<option>team_example.cpp</option>
<option>harmonic.cpp</option>
<option>multi_newton.cpp</option>
<option>team_thread.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>team_thread.hpp-&gt;</option>
<option>team_openmp.cpp</option>
<option>team_bthread.cpp</option>
<option>team_pthread.cpp</option>
</select>
</td>
<td>team_pthread.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Bug in Cygwin</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Pthread Implementation of a Team of AD Threads</big></big></b></center>
See <a href="team_thread.hpp.xml" target="_top"><span style='white-space: nowrap'>team_thread.hpp</span></a>
 for this routines specifications.

<br/>
<br/>
<b><big><a name="Bug in Cygwin" id="Bug in Cygwin">Bug in Cygwin</a></big></b>
<br/>
There is a bug in <code><font color="blue">pthread_exit</font></code>,
using cygwin 5.1 and g++ version 4.3.4,
whereby calling <code><font color="blue">pthread_exit</font></code> is not the same as returning from
the corresponding routine.
To be specific, destructors for the vectors are not called
and a memory leaks result.
Set the following preprocessor symbol to 1 to demonstrate this bug:
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #000080"># define</span></span> DEMONSTRATE_BUG_IN_CYGWIN <span style="color: #993399">0</span>
</tt></pre>
<code><font color="blue"><pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;pthread.h&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"../team_thread.hpp"</span>
<span style="font-weight: bold"><span style="color: #000080"># define</span></span> MAX_NUMBER_THREADS <span style="color: #993399">48</span>

<span style="font-style: italic"><span style="color: #9A1900">// It seems that when a barrier is passed, its counter is automatically reset</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// to its original value and it can be used again, but where is this</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// stated in the pthreads speicifcations ?</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// number of threads in the team</span></span>
     <span style="color: #008080">size_t</span> num_threads_ <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// key for accessing thread specific information</span></span>
     <span style="color: #008080">pthread_key_t</span> thread_specific_key_<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// no need to destroy thread specific information</span></span>
     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">thread_specific_destructor</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">*</span> thread_num_vptr<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// type of the job currently being done by each thread</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">enum</span></span> thread_job_t <span style="color: #FF0000">{</span> init_enum<span style="color: #990000">,</span> work_enum<span style="color: #990000">,</span> join_enum <span style="color: #FF0000">}</span> thread_job_<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// barrier used to wait for other threads to finish work</span></span>
     <span style="color: #008080">pthread_barrier_t</span> wait_for_work_<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// barrier used to wait for master thread to set next job</span></span>
     <span style="color: #008080">pthread_barrier_t</span> wait_for_job_<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Are we in sequential mode; i.e., other threads are waiting for</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// master thread to set up next job ?</span></span>
     <span style="color: #009900">bool</span> sequential_execution_ <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// structure with information for one thread</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #FF0000">{</span>
          <span style="font-style: italic"><span style="color: #9A1900">// cppad unique identifier for thread that uses this struct</span></span>
          <span style="color: #008080">size_t</span>          thread_num<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// pthread unique identifier for thread that uses this struct</span></span>
          <span style="color: #008080">pthread_t</span>       pthread_id<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// true if no error for this thread, false otherwise.</span></span>
          <span style="color: #009900">bool</span>            ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span> thread_one_t<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// vector with information for all threads</span></span>
     <span style="color: #008080">thread_one_t</span> thread_all_<span style="color: #990000">[</span>MAX_NUMBER_THREADS<span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// pointer to function that does the work for one thread</span></span>
     <span style="color: #009900">void</span> <span style="color: #990000">(*</span> worker_<span style="color: #990000">)(</span><span style="color: #009900">void</span><span style="color: #990000">)</span> <span style="color: #990000">=</span> CPPAD_NULL<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// ---------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// in_parallel()</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">in_parallel</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">!</span> sequential_execution_<span style="color: #990000">;</span> <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// ---------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// thread_number()</span></span>
     <span style="color: #008080">size_t</span> <span style="font-weight: bold"><span style="color: #000000">thread_number</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// get thread specific information</span></span>
          <span style="color: #009900">void</span><span style="color: #990000">*</span>   thread_num_vptr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_getspecific</span></span><span style="color: #990000">(</span>thread_specific_key_<span style="color: #990000">);</span>
          size_t<span style="color: #990000">*</span> thread_num_ptr  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span>size_t<span style="color: #990000">*&gt;(</span>thread_num_vptr<span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span>  thread_num      <span style="color: #990000">=</span> <span style="color: #990000">*</span>thread_num_ptr<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> thread_num <span style="color: #990000">&gt;=</span> num_threads_ <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"thread_number: program error"</span> <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span>endl<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #000000">exit</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> thread_num<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// function that gets called by pthread_create</span></span>
     <span style="color: #009900">void</span><span style="color: #990000">*</span> <span style="font-weight: bold"><span style="color: #000000">thread_work</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">*</span> thread_num_vptr<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">int</span> rc<span style="color: #990000">;</span>
          <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Set thread specific data where other routines can access it</span></span>
          rc <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_setspecific</span></span><span style="color: #990000">(</span>thread_specific_key_<span style="color: #990000">,</span> thread_num_vptr<span style="color: #990000">);</span>
          ok <span style="color: #990000">&amp;=</span> rc <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// thread_num to problem specific information for this thread</span></span>
          <span style="color: #008080">size_t</span> thread_num <span style="color: #990000">=</span> <span style="color: #990000">*</span><span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span>size_t<span style="color: #990000">*&gt;(</span>thread_num_vptr<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// master thread does not use this routine</span></span>
          ok <span style="color: #990000">&amp;=</span> thread_num <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>
               <span style="font-style: italic"><span style="color: #9A1900">// Use wait_for_job_ to give master time in sequential mode</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// (so it can change global infromation like thread_job_)</span></span>
               rc <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_barrier_wait</span></span><span style="color: #990000">(&amp;</span>wait_for_job_<span style="color: #990000">);</span>
               ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>rc <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> rc <span style="color: #990000">==</span> PTHREAD_BARRIER_SERIAL_THREAD<span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// case where we are terminating this thread (no more work)</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> thread_job_ <span style="color: #990000">==</span> join_enum <span style="color: #990000">)</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

               <span style="font-style: italic"><span style="color: #9A1900">// only other case once wait_for_job_ barrier is passed (so far)</span></span>
               ok <span style="color: #990000">&amp;=</span> thread_job_ <span style="color: #990000">==</span> work_enum<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #000000">worker_</span></span><span style="color: #990000">();</span>

               <span style="font-style: italic"><span style="color: #9A1900">// Use wait_for_work_ to inform master that our work is done and</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// that this thread will not use global information until</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// passing its barrier wait_for_job_ above.</span></span>
               rc <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_barrier_wait</span></span><span style="color: #990000">(&amp;</span>wait_for_work_<span style="color: #990000">);</span>
               ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>rc <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> rc <span style="color: #990000">==</span> PTHREAD_BARRIER_SERIAL_THREAD<span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          thread_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">].</span>ok <span style="color: #990000">=</span> ok<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># if</span></span> DEMONSTRATE_BUG_IN_CYGWIN
          <span style="font-style: italic"><span style="color: #9A1900">// Terminate this thread</span></span>
          <span style="color: #009900">void</span><span style="color: #990000">*</span> no_status <span style="color: #990000">=</span> CPPAD_NULL<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">pthread_exit</span></span><span style="color: #990000">(</span>no_status<span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> CPPAD_NULL<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">team_create</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> num_threads<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;;</span>
     <span style="color: #009900">int</span> rc<span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> num_threads <span style="color: #990000">&gt;</span> MAX_NUMBER_THREADS <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"team_create: num_threads greater than "</span><span style="color: #990000">;</span>
          std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> MAX_NUMBER_THREADS <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span>endl<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">exit</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// check that we currently do not have multiple threads running</span></span>
     ok  <span style="color: #990000">=</span> num_threads_ <span style="color: #990000">==</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> sequential_execution_<span style="color: #990000">;</span>

     <span style="color: #008080">size_t</span> thread_num<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>thread_num <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> thread_num <span style="color: #990000">&lt;</span> num_threads<span style="color: #990000">;</span> thread_num<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// Each thread gets a pointer to its version of this thread_num</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// so it knows which section of thread_all_ it is working with</span></span>
          thread_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">].</span>thread_num <span style="color: #990000">=</span> thread_num<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// initialize</span></span>
          thread_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">].</span>ok         <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// Finish setup of thread_all_ for this thread</span></span>
     thread_all_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span>pthread_id <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_self</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// create a key for thread specific information</span></span>
     rc <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_key_create</span></span><span style="color: #990000">(&amp;</span>thread_specific_key_<span style="color: #990000">,</span>thread_specific_destructor<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>rc <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// set thread specific information for this (master thread)</span></span>
     <span style="color: #009900">void</span><span style="color: #990000">*</span> thread_num_vptr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">void</span><span style="color: #990000">*&gt;(&amp;(</span>thread_all_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span>thread_num<span style="color: #990000">));</span>
     rc <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_setspecific</span></span><span style="color: #990000">(</span>thread_specific_key_<span style="color: #990000">,</span> thread_num_vptr<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>rc <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Now that thread_number() has necessary information for this thread</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (number zero), and while still in sequential mode,</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// call setup for using CppAD::AD&lt;double&gt; in parallel mode.</span></span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">parallel_setup</span></span><span style="color: #990000">(</span>num_threads<span style="color: #990000">,</span> in_parallel<span style="color: #990000">,</span> thread_number<span style="color: #990000">);</span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">hold_memory</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>
     CppAD<span style="color: #990000">::</span>parallel_ad<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Now change num_threads_ to its final value. Waiting till now allows</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// calls to thread_number during parallel_setup to check thread_num == 0.</span></span>
     num_threads_ <span style="color: #990000">=</span> num_threads<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// initialize two barriers, one for work done, one for new job ready</span></span>
     pthread_barrierattr_t<span style="color: #990000">*</span> no_barrierattr <span style="color: #990000">=</span> CPPAD_NULL<span style="color: #990000">;</span>
     rc <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_barrier_init</span></span><span style="color: #990000">(</span>
          <span style="color: #990000">&amp;</span>wait_for_work_<span style="color: #990000">,</span> no_barrierattr<span style="color: #990000">,</span> num_threads
     <span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>rc <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>
     rc  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_barrier_init</span></span><span style="color: #990000">(</span>
          <span style="color: #990000">&amp;</span>wait_for_job_<span style="color: #990000">,</span> no_barrierattr<span style="color: #990000">,</span> num_threads
     <span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>rc <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// structure used to create the threads</span></span>
     <span style="color: #008080">pthread_t</span>       pthread_id<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// default for pthread_attr_setdetachstate is PTHREAD_CREATE_JOINABLE</span></span>
     pthread_attr_t<span style="color: #990000">*</span> no_attr<span style="color: #990000">=</span> CPPAD_NULL<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// initial job for the threads</span></span>
     thread_job_           <span style="color: #990000">=</span> init_enum<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> num_threads <span style="color: #990000">&gt;</span> <span style="color: #993399">1</span> <span style="color: #990000">)</span>
          sequential_execution_ <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// This master thread is already running, we need to create</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// num_threads - 1 more threads</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>thread_num <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> thread_num <span style="color: #990000">&lt;</span> num_threads<span style="color: #990000">;</span> thread_num<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>
          <span style="font-style: italic"><span style="color: #9A1900">// Create the thread with thread number equal to thread_num</span></span>
          thread_num_vptr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">void</span><span style="color: #990000">*&gt;</span> <span style="color: #990000">(</span>
               <span style="color: #990000">&amp;(</span>thread_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">].</span>thread_num<span style="color: #990000">)</span>
          <span style="color: #990000">);</span>
          rc <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_create</span></span><span style="color: #990000">(</span>
                    <span style="color: #990000">&amp;</span>pthread_id <span style="color: #990000">,</span>
                    no_attr     <span style="color: #990000">,</span>
                    thread_work <span style="color: #990000">,</span>
                    thread_num_vptr
          <span style="color: #990000">);</span>
          thread_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">].</span>pthread_id <span style="color: #990000">=</span> pthread_id<span style="color: #990000">;</span>
          ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>rc <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Current state is other threads are at wait_for_job_.</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// This master thread (thread zero) has not completed wait_for_job_</span></span>
     sequential_execution_ <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">team_work</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">worker</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">))</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">int</span> rc<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Current state is other threads are at wait_for_job_.</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// This master thread (thread zero) has not completed wait_for_job_</span></span>
     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> sequential_execution_<span style="color: #990000">;</span>
     ok     <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">thread_number</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// set global version of this work routine</span></span>
     worker_ <span style="color: #990000">=</span> worker<span style="color: #990000">;</span>


     <span style="font-style: italic"><span style="color: #9A1900">// set the new job that other threads are waiting for</span></span>
     thread_job_ <span style="color: #990000">=</span> work_enum<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// enter parallel execution soon as master thread completes wait_for_job_</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> num_threads_ <span style="color: #990000">&gt;</span> <span style="color: #993399">1</span> <span style="color: #990000">)</span>
          sequential_execution_ <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// wait until all threads have completed wait_for_job_</span></span>
     rc  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_barrier_wait</span></span><span style="color: #990000">(&amp;</span>wait_for_job_<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>rc <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> rc <span style="color: #990000">==</span> PTHREAD_BARRIER_SERIAL_THREAD<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Now do the work in this thread and then wait</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// until all threads have completed wait_for_work_</span></span>
     <span style="font-weight: bold"><span style="color: #000000">worker</span></span><span style="color: #990000">();</span>
     rc <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_barrier_wait</span></span><span style="color: #990000">(&amp;</span>wait_for_work_<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>rc <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> rc <span style="color: #990000">==</span> PTHREAD_BARRIER_SERIAL_THREAD<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Current state is other threads are at wait_for_job_.</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// This master thread (thread zero) has not completed wait_for_job_</span></span>
     sequential_execution_ <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     <span style="color: #008080">size_t</span> thread_num<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>thread_num <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> thread_num <span style="color: #990000">&lt;</span> num_threads_<span style="color: #990000">;</span> thread_num<span style="color: #990000">++)</span>
          ok <span style="color: #990000">&amp;=</span> thread_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">].</span>ok<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">team_destroy</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">int</span> rc<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Current state is other threads are at wait_for_job_.</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// This master thread (thread zero) has not completed wait_for_job_</span></span>
     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> sequential_execution_<span style="color: #990000">;</span>
     ok     <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">thread_number</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// set the new job that other threads are waiting for</span></span>
     thread_job_ <span style="color: #990000">=</span> join_enum<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Enter parallel exectuion soon as master thread completes wait_for_job_</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> num_threads_ <span style="color: #990000">&gt;</span> <span style="color: #993399">1</span> <span style="color: #990000">)</span>
               sequential_execution_ <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     rc  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_barrier_wait</span></span><span style="color: #990000">(&amp;</span>wait_for_job_<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>rc <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> rc <span style="color: #990000">==</span> PTHREAD_BARRIER_SERIAL_THREAD<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// now wait for the other threads to exit</span></span>
     <span style="color: #008080">size_t</span> thread_num<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>thread_num <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> thread_num <span style="color: #990000">&lt;</span> num_threads_<span style="color: #990000">;</span> thread_num<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">void</span><span style="color: #990000">*</span> no_status <span style="color: #990000">=</span> CPPAD_NULL<span style="color: #990000">;</span>
          rc      <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_join</span></span><span style="color: #990000">(</span>
               thread_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">].</span>pthread_id<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>no_status
          <span style="color: #990000">);</span>
          ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>rc <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// now we are down to just the master thread (thread zero)</span></span>
     sequential_execution_ <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// destroy the key for thread specific data</span></span>
     <span style="font-weight: bold"><span style="color: #000000">pthread_key_delete</span></span><span style="color: #990000">(</span>thread_specific_key_<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// destroy wait_for_work_</span></span>
     rc  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_barrier_destroy</span></span><span style="color: #990000">(&amp;</span>wait_for_work_<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>rc <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// destroy wait_for_job_</span></span>
     rc  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">pthread_barrier_destroy</span></span><span style="color: #990000">(&amp;</span>wait_for_job_<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>rc <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check ok before changing num_threads_</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>thread_num <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> thread_num <span style="color: #990000">&lt;</span> num_threads_<span style="color: #990000">;</span> thread_num<span style="color: #990000">++)</span>
          ok <span style="color: #990000">&amp;=</span> thread_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">].</span>ok<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// now inform CppAD that there is only one thread</span></span>
     num_threads_ <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">parallel_setup</span></span><span style="color: #990000">(</span>num_threads_<span style="color: #990000">,</span> CPPAD_NULL<span style="color: #990000">,</span> CPPAD_NULL<span style="color: #990000">);</span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">hold_memory</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">);</span>
     CppAD<span style="color: #990000">::</span>parallel_ad<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;();</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span><span style="color: #990000">*</span> <span style="font-weight: bold"><span style="color: #000000">team_name</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #FF0000">"pthread"</span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: multi_thread/pthread/team_pthread.cpp

</body>
</html>
