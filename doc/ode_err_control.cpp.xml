<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>OdeErrControl: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="OdeErrControl: Example and Test"/>
<meta name="keywords" id="keywords" content=" odeerrcontrol: example test nan "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ode_err_control.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="odeerrcontrol.xml" target="_top">Prev</a>
</td><td><a href="ode_err_maxabs.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>OdeErrControl</option>
<option>ode_err_control.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>utility-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>time_test</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>CppAD_vector</option>
<option>thread_alloc</option>
<option>index_sort</option>
<option>to_string</option>
<option>set_union</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>OdeErrControl-&gt;</option>
<option>ode_err_control.cpp</option>
<option>ode_err_maxabs.cpp</option>
</select>
</td>
<td>ode_err_control.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Nan</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>OdeErrControl: Example and Test</big></big></b></center>
Define

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>X</mi>
<mo stretchy="false">:</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mo stretchy="false">&#x02192;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mn>2</mn>
</msup>
</mrow></math>

 by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<msub><mi mathvariant='italic'>X</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mn>1</mn>
</mtd></mtr><mtr><mtd columnalign="right" >
<msub><mi mathvariant='italic'>X</mi>
<mn>1</mn>
</msub>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mn>0</mn>
</mtd></mtr><mtr><mtd columnalign="right" >
<msubsup><mi mathvariant='italic'>X</mi>
<mn>0</mn>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msubsup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<msub><mi mathvariant='italic'>X</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="right" >
<msubsup><mi mathvariant='italic'>X</mi>
<mn>1</mn>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msubsup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mn>1</mn>
<mo stretchy="false">/</mo>
<msub><mi mathvariant='italic'>X</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
</mtd></mtr></mtable>
</mrow></math>

It follows that

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<msub><mi mathvariant='italic'>X</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mi>exp</mi>
<mo stretchy="false">(</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
</mtd></mtr><mtr><mtd columnalign="right" >
<msub><mi mathvariant='italic'>X</mi>
<mn>1</mn>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">[</mo>
<mi>exp</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">-</mo>
<mn>1</mn>
<mo stretchy="false">]</mo>
<mo stretchy="false">/</mo>
<mi mathvariant='normal'>&#x003B1;</mi>
</mtd></mtr></mtable>
</mrow></math>

This example tests OdeErrControl using the relations above.

<br/>
<br/>
<b><big><a name="Nan" id="Nan">Nan</a></big></b>
<br/>
Note that 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>X</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">&gt;</mo>
<mn>0</mn>
</mrow></math>

 for all 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>t</mi>
</mrow></math>

 and that the
ODE goes through a singularity between 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>X</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">&gt;</mo>
<mn>0</mn>
</mrow></math>


and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>X</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">&lt;</mo>
<mn>0</mn>
</mrow></math>

.
If 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>X</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">&lt;</mo>
<mn>0</mn>
</mrow></math>

,
we return <code><font color="blue">nan</font></code> in order to inform
<code><font color="blue">OdeErrControl</font></code> that its is taking to large a step.


<code><font color="blue">
<pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;limits&gt;</span>                      <span style="font-style: italic"><span style="color: #9A1900">// for quiet_NaN</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cstddef&gt;</span>                     <span style="font-style: italic"><span style="color: #9A1900">// for size_t</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cmath&gt;</span>                       <span style="font-style: italic"><span style="color: #9A1900">// for exp</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/ode_err_control.hpp&gt;</span>   <span style="font-style: italic"><span style="color: #9A1900">// CppAD::OdeErrControl</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/near_equal.hpp&gt;</span>        <span style="font-style: italic"><span style="color: #9A1900">// CppAD::NearEqual</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/vector.hpp&gt;</span>            <span style="font-style: italic"><span style="color: #9A1900">// CppAD::vector</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/runge_45.hpp&gt;</span>          <span style="font-style: italic"><span style="color: #9A1900">// CppAD::Runge45</span></span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Fun</span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">double</span> alpha_<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
          <span style="font-style: italic"><span style="color: #9A1900">// constructor</span></span>
          <span style="font-weight: bold"><span style="color: #000000">Fun</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span> alpha<span style="color: #990000">)</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #000000">alpha_</span></span><span style="color: #990000">(</span>alpha<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// set f = x'(t)</span></span>
          <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">Ode</span></span><span style="color: #990000">(</span>
               <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">double</span>                <span style="color: #990000">&amp;</span>t<span style="color: #990000">,</span>
               <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">,</span>
               CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span>       <span style="color: #990000">&amp;</span>f<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     f<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span> alpha_ <span style="color: #990000">*</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               f<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span> <span style="color: #990000">/</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               <span style="font-style: italic"><span style="color: #9A1900">// case where ODE does not make sense</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">&lt;</span> <span style="color: #993399">0</span><span style="color: #990000">.</span> <span style="color: #990000">)</span>
                    f<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">quiet_NaN</span></span><span style="color: #990000">();</span>
          <span style="color: #FF0000">}</span>

     <span style="color: #FF0000">}</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Method</span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span>
          <span style="color: #008080">Fun</span> F<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
          <span style="font-style: italic"><span style="color: #9A1900">// constructor</span></span>
          <span style="font-weight: bold"><span style="color: #000000">Method</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span> alpha<span style="color: #990000">)</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #000000">F</span></span><span style="color: #990000">(</span>alpha<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>
          <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">step</span></span><span style="color: #990000">(</span>
               <span style="color: #009900">double</span> ta<span style="color: #990000">,</span>
               <span style="color: #009900">double</span> tb<span style="color: #990000">,</span>
               CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> <span style="color: #990000">&amp;</span>xa <span style="color: #990000">,</span>
               CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> <span style="color: #990000">&amp;</span>xb <span style="color: #990000">,</span>
               CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> <span style="color: #990000">&amp;</span>eb <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     xb <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Runge45</span></span><span style="color: #990000">(</span>F<span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span> ta<span style="color: #990000">,</span> tb<span style="color: #990000">,</span> xa<span style="color: #990000">,</span> eb<span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="color: #008080">size_t</span> <span style="font-weight: bold"><span style="color: #000000">order</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #993399">4</span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">OdeErrControl</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>     <span style="font-style: italic"><span style="color: #9A1900">// initial return value</span></span>

     <span style="color: #009900">double</span> alpha <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">.;</span>
     <span style="color: #008080">Method</span> <span style="font-weight: bold"><span style="color: #000000">method</span></span><span style="color: #990000">(</span>alpha<span style="color: #990000">);</span>

     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">xi</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     xi<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     xi<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>

     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">eabs</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     eabs<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1e-4</span><span style="color: #990000">;</span>
     eabs<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1e-4</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// inputs</span></span>
     <span style="color: #009900">double</span> ti   <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     <span style="color: #009900">double</span> tf   <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     <span style="color: #009900">double</span> smin <span style="color: #990000">=</span> <span style="color: #993399">1e-4</span><span style="color: #990000">;</span>
     <span style="color: #009900">double</span> smax <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     <span style="color: #009900">double</span> scur <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     <span style="color: #009900">double</span> erel <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// outputs</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">ef</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">xf</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">maxabs</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     <span style="color: #008080">size_t</span> nstep<span style="color: #990000">;</span>


     xf <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">OdeErrControl</span></span><span style="color: #990000">(</span>method<span style="color: #990000">,</span>
          ti<span style="color: #990000">,</span> tf<span style="color: #990000">,</span> xi<span style="color: #990000">,</span> smin<span style="color: #990000">,</span> smax<span style="color: #990000">,</span> scur<span style="color: #990000">,</span> eabs<span style="color: #990000">,</span> erel<span style="color: #990000">,</span> ef<span style="color: #990000">,</span> maxabs<span style="color: #990000">,</span> nstep<span style="color: #990000">);</span>

     <span style="color: #009900">double</span> x0 <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">exp</span></span><span style="color: #990000">(-</span>alpha<span style="color: #990000">*</span>tf<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>x0<span style="color: #990000">,</span> xf<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> <span style="color: #993399">1e-4</span><span style="color: #990000">,</span> <span style="color: #993399">1e-4</span><span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">.,</span> ef<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> <span style="color: #993399">1e-4</span><span style="color: #990000">,</span> <span style="color: #993399">1e-4</span><span style="color: #990000">);</span>

     <span style="color: #009900">double</span> x1 <span style="color: #990000">=</span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">exp</span></span><span style="color: #990000">(</span>alpha<span style="color: #990000">*</span>tf<span style="color: #990000">)</span> <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">/</span> alpha<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>x1<span style="color: #990000">,</span> xf<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> <span style="color: #993399">1e-4</span><span style="color: #990000">,</span> <span style="color: #993399">1e-4</span><span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">.,</span> ef<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> <span style="color: #993399">1e-4</span><span style="color: #990000">,</span> <span style="color: #993399">1e-4</span><span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: example/ode_err_control.cpp

</body>
</html>
