<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Double Speed: Sparse Hessian</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Double Speed: Sparse Hessian"/>
<meta name="keywords" id="keywords" content=" double speed: sparse hessian link_sparse_hessian speed specifications implementation "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_double_sparse_hessian.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="double_poly.cpp.xml" target="_top">Prev</a>
</td><td><a href="double_sparse_jacobian.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_double</option>
<option>double_sparse_hessian.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_double-&gt;</option>
<option>double_det_minor.cpp</option>
<option>double_det_lu.cpp</option>
<option>double_mat_mul.cpp</option>
<option>double_ode.cpp</option>
<option>double_poly.cpp</option>
<option>double_sparse_hessian.cpp</option>
<option>double_sparse_jacobian.cpp</option>
</select>
</td>
<td>double_sparse_hessian.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Specifications</option>
<option>Implementation</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Double Speed: Sparse Hessian</big></big></b></center>
<br/>
<b><big><a name="Specifications" id="Specifications">Specifications</a></big></b>
<br/>
See <a href="link_sparse_hessian.xml" target="_top"><span style='white-space: nowrap'>link_sparse_hessian</span></a>
.

<br/>
<br/>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>


<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/vector.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/speed/uniform_01.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/speed/sparse_hes_fun.hpp&gt;</span>

<span style="font-style: italic"><span style="color: #9A1900">// Note that CppAD uses global_option["memory"] at the main program level</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;map&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> std<span style="color: #990000">::</span><span style="color: #008080">map&lt;std::string, bool&gt;</span> global_option<span style="color: #990000">;</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">link_sparse_hessian</span></span><span style="color: #990000">(</span>
     <span style="color: #008080">size_t</span>                           size     <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>                           repeat   <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;&amp;</span>     row      <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;&amp;</span>     col      <span style="color: #990000">,</span>
     CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>           x        <span style="color: #990000">,</span>
     CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>           hessian  <span style="color: #990000">,</span>
     size_t<span style="color: #990000">&amp;</span>                          n_sweep  <span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>global_option<span style="color: #990000">[</span><span style="color: #FF0000">"onetape"</span><span style="color: #990000">]||</span>global_option<span style="color: #990000">[</span><span style="color: #FF0000">"atomic"</span><span style="color: #990000">]||</span>global_option<span style="color: #990000">[</span><span style="color: #FF0000">"optimize"</span><span style="color: #990000">]||</span>global_option<span style="color: #990000">[</span><span style="color: #FF0000">"boolsparsity"</span><span style="color: #990000">])</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// setup</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> order <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>          <span style="font-style: italic"><span style="color: #9A1900">// derivative order corresponding to function</span></span>
     <span style="color: #008080">size_t</span> n     <span style="color: #990000">=</span> size<span style="color: #990000">;</span>       <span style="font-style: italic"><span style="color: #9A1900">// argument space dimension</span></span>
     <span style="color: #008080">size_t</span> m     <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>          <span style="font-style: italic"><span style="color: #9A1900">// range space dimension</span></span>
     <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>       <span style="font-style: italic"><span style="color: #9A1900">// function value</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// choose a value for x</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">uniform_01</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> x<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// ------------------------------------------------------</span></span>

     <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>repeat<span style="color: #990000">--)</span>
     <span style="color: #FF0000">{</span>
          <span style="font-style: italic"><span style="color: #9A1900">// computation of the function</span></span>
          CppAD<span style="color: #990000">::</span>sparse_hes_fun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span>n<span style="color: #990000">,</span> x<span style="color: #990000">,</span> row<span style="color: #990000">,</span> col<span style="color: #990000">,</span> order<span style="color: #990000">,</span> y<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     hessian<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: speed/double/sparse_hessian.cpp

</body>
</html>
