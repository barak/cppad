<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Atomic Sparsity with Set Patterns: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Atomic Sparsity with Set Patterns: Example and Test"/>
<meta name="keywords" id="keywords" content=" atomic sparsity with set patterns: example test function set_sparsity_enum start class definition constructor forward for_sparse_jac rev_sparse_jac for_sparse_hes rev_sparse_hes end recording result "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_set_sparsity.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="atomic_reciprocal.cpp.xml" target="_top">Prev</a>
</td><td><a href="atomic_tangent.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_base</option>
<option>atomic_set_sparsity.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>unary_standard_math</option>
<option>binary_math</option>
<option>CondExp</option>
<option>Discrete</option>
<option>numeric_limits</option>
<option>atomic</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>atomic-&gt;</option>
<option>checkpoint</option>
<option>atomic_base</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>atomic_base-&gt;</option>
<option>atomic_ctor</option>
<option>atomic_option</option>
<option>atomic_afun</option>
<option>atomic_forward</option>
<option>atomic_reverse</option>
<option>atomic_for_sparse_jac</option>
<option>atomic_rev_sparse_jac</option>
<option>atomic_for_sparse_hes</option>
<option>atomic_rev_sparse_hes</option>
<option>atomic_base_clear</option>
<option>atomic_get_started.cpp</option>
<option>atomic_norm_sq.cpp</option>
<option>atomic_reciprocal.cpp</option>
<option>atomic_set_sparsity.cpp</option>
<option>atomic_tangent.cpp</option>
<option>atomic_eigen_mat_mul.cpp</option>
<option>atomic_eigen_mat_inv.cpp</option>
<option>atomic_eigen_cholesky.cpp</option>
<option>atomic_mat_mul.cpp</option>
</select>
</td>
<td>atomic_set_sparsity.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>function</option>
<option>set_sparsity_enum</option>
<option>Start Class Definition</option>
<option>Constructor</option>
<option>forward</option>
<option>for_sparse_jac</option>
<option>rev_sparse_jac</option>
<option>for_sparse_hes</option>
<option>rev_sparse_hes</option>
<option>End Class Definition</option>
<option>Test Atomic Function</option>
<option>---..Constructor</option>
<option>---..Recording</option>
<option>---..for_sparse_jac</option>
<option>---..rev_sparse_jac</option>
<option>---..for_sparse_hes</option>
<option>---..rev_sparse_hes</option>
<option>---..Test Result</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Atomic Sparsity with Set Patterns: Example and Test</big></big></b></center>
<br/>
<b><big><a name="function" id="function">function</a></big></b>
<br/>
For this example, the atomic function

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mn>3</mn>
</msup>
<mo stretchy="false">&#x02192;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mn>2</mn>
</msup>
</mrow></math>

 is defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<msub><mi mathvariant='italic'>x</mi>
<mn>2</mn>
</msub>
</mtd></mtr><mtr><mtd columnalign="center" >
<msub><mi mathvariant='italic'>x</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">*</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>1</mn>
</msub>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
</mrow></math>

<br/>
<b><big><a name="set_sparsity_enum" id="set_sparsity_enum">set_sparsity_enum</a></big></b>
<br/>
This example only uses set sparsity patterns.



<br/>
<br/>
<b><big><a name="Start Class Definition" id="Start Class Definition">Start Class Definition</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>   <span style="font-style: italic"><span style="color: #9A1900">// isolate items below to this file</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span>   CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>                          <span style="font-style: italic"><span style="color: #9A1900">// vector</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="color: #008080">vector&lt; std::set&lt;size_t&gt; &gt;</span> set_vector<span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// atomic_sparsity</span></span>
<span style="font-style: italic"><span style="color: #9A1900">//</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// a utility to compute the union of two sets.</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>set_union<span style="color: #990000">;</span>
<span style="font-style: italic"><span style="color: #9A1900">//</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">atomic_set_sparsity</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #FF0000">{</span></tt></pre>
<br/>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
     <span style="font-style: italic"><span style="color: #9A1900">// constructor</span></span>
     <span style="font-weight: bold"><span style="color: #000000">atomic_set_sparsity</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span>string<span style="color: #990000">&amp;</span> name<span style="color: #990000">)</span> <span style="color: #990000">:</span>
     <span style="font-style: italic"><span style="color: #9A1900">// this exampel only uses set sparsity patterns</span></span>
     CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span>name<span style="color: #990000">,</span> set_sparsity_enum <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>
<span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span></tt></pre>
<br/>
<b><big><a name="forward" id="forward">forward</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// forward</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">forward</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                    p <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    q <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>      vx <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>            vy <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>    tx <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>          ty
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> <span style="color: #990000">(</span>q <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> <span style="color: #990000">(</span>q <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">3</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// only order zero</span></span>
          <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> q <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> ok <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// check for defining variable information</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     ok   <span style="color: #990000">&amp;=</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n<span style="color: #990000">;</span>
               vy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> vx<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>
               vy<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> vx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">||</span> vx<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Order zero forward mode.</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// y[0] = x[2], y[1] = x[0] * x[1]</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> p <span style="color: #990000">&lt;=</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     ty<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> tx<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>
               ty<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> tx<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="for_sparse_jac" id="for_sparse_jac">for_sparse_jac</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// for_sparse_jac</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">for_sparse_jac</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                          p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> set_vector<span style="color: #990000">&amp;</span>               r <span style="color: #990000">,</span>
          set_vector<span style="color: #990000">&amp;</span>                     s <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>           x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// This function needed if using f.ForSparseJac</span></span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">3</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for S(x) = f'(x) * R  = [ 0,   0, 1 ] * R</span></span>
          s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> r<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>
          <span style="font-style: italic"><span style="color: #9A1900">// s[1] = union(r[0], r[1])</span></span>
          s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> r<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="rev_sparse_jac" id="rev_sparse_jac">rev_sparse_jac</a></big></b>

<pre><tt>     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_jac</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                                p  <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> set_vector<span style="color: #990000">&amp;</span>                     rt <span style="color: #990000">,</span>
          set_vector<span style="color: #990000">&amp;</span>                           st <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>                 x  <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// This function needed if using RevSparseJac or optimize</span></span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> st<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> rt<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">3</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">//                                       [ 0, x1 ]</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for S(x)^T = f'(x)^T * R^T = [ 0, x0 ] * R^T</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//                                       [ 1, 0  ]</span></span>
          st<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> rt<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          st<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> rt<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          st<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> rt<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="for_sparse_hes" id="for_sparse_hes">for_sparse_hes</a></big></b>

<pre><tt>     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">for_sparse_hes</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   vx<span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   r <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   s <span style="color: #990000">,</span>
          set_vector<span style="color: #990000">&amp;</span>                           h <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>                 x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> h<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">3</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// initialize h as empty</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               h<span style="color: #990000">[</span>i<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>

          <span style="font-style: italic"><span style="color: #9A1900">// only f_1 has a non-zero hessian</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// only the cross term between x[0] and x[1] is non-zero</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> <span style="color: #990000">(</span> r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">&amp;</span> r<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// set the possibly non-zero terms in the hessian</span></span>
          h<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
          h<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="rev_sparse_hes" id="rev_sparse_hes">rev_sparse_hes</a></big></b>

<pre><tt>     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_hes</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   vx<span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   s <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                         t <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> set_vector<span style="color: #990000">&amp;</span>                     r <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> set_vector<span style="color: #990000">&amp;</span>                     u <span style="color: #990000">,</span>
          set_vector<span style="color: #990000">&amp;</span>                           v <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>                 x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// This function needed if using RevSparseHes</span></span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> t<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> u<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> m <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> v<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">3</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for T(x) = S(x) * f'(x) = S(x) * [  0,  0,  1 ]</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//                                           [ x1, x0,  0 ]</span></span>
          t<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          t<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          t<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// V(x) = f'(x)^T * g''(y) * f'(x) * R  +  g'(y) * f''(x) * R</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// U(x) = g''(y) * f'(x) * R</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// S(x) = g'(y)</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">//                                      [ 0, x1 ]</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for W(x) = f'(x)^T * U(x) = [ 0, x0 ] * U(x)</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//                                      [ 1, 0  ]</span></span>
          v<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> u<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          v<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> u<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          v<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> u<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//                                      [ 0, 1, 0 ]</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for V(x) = W(x) + S_1 (x) * [ 1, 0, 0 ] * R</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//                                      [ 0, 0, 0 ]</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// v[0] = union( v[0], r[1] )</span></span>
               v<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>v<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> r<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// v[1] = union( v[1], r[0] )</span></span>
               v<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>v<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="End Class Definition" id="End Class Definition">End Class Definition</a></big></b>

<pre style='display:inline'><tt>
<span style="color: #FF0000">}</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// End of atomic_set_sparsity class</span></span>
<span style="color: #FF0000">}</span>  <span style="font-style: italic"><span style="color: #9A1900">// End empty namespace</span></span>

</tt></pre>
<b><big><a name="Test Atomic Function" id="Test Atomic Function">Test Atomic Function</a></big></b>

<pre><tt><span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">set_sparsity</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> eps <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span></tt></pre>
<br/>
<b><a name="Test Atomic Function.Constructor" id="Test Atomic Function.Constructor">Constructor</a></b>

<pre style='display:inline'><tt>
     <span style="font-style: italic"><span style="color: #9A1900">// Create the atomic get_started object</span></span>
     <span style="color: #008080">atomic_set_sparsity</span> <span style="font-weight: bold"><span style="color: #000000">afun</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"atomic_set_sparsity"</span><span style="color: #990000">);</span>
</tt></pre>
<br/>
<b><a name="Test Atomic Function.Recording" id="Test Atomic Function.Recording">Recording</a></b>

<pre><tt>     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">ax</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">ay</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          ax<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>j <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and start tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// call user function</span></span>
     <span style="font-weight: bold"><span style="color: #000000">afun</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">,</span> ay<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// create f: x -&gt; y and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> f<span style="color: #990000">;</span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span> <span style="color: #990000">(</span>ax<span style="color: #990000">,</span> ay<span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// f(x) = x</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// check function value</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>ay<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> ax<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">],</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>ay<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> ax<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
</tt></pre>
<b><a name="Test Atomic Function.for_sparse_jac" id="Test Atomic Function.for_sparse_jac">for_sparse_jac</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// correct Jacobian result</span></span>
     <span style="color: #008080">set_vector</span> <span style="font-weight: bold"><span style="color: #000000">check_s</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     check_s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     check_s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     check_s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">// compute and test forward mode</span></span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">set_vector</span> <span style="font-weight: bold"><span style="color: #000000">r</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">s</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               r<span style="color: #990000">[</span>i<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
          s <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">ForSparseJac</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> r<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               ok <span style="color: #990000">&amp;=</span> s<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">==</span> check_s<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><a name="Test Atomic Function.rev_sparse_jac" id="Test Atomic Function.rev_sparse_jac">rev_sparse_jac</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// compute and test reverse mode</span></span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">set_vector</span> <span style="font-weight: bold"><span style="color: #000000">r</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">s</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               r<span style="color: #990000">[</span>i<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
          s <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseJac</span></span><span style="color: #990000">(</span>m<span style="color: #990000">,</span> r<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               ok <span style="color: #990000">&amp;=</span> s<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">==</span> check_s<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><a name="Test Atomic Function.for_sparse_hes" id="Test Atomic Function.for_sparse_hes">for_sparse_hes</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// correct Hessian result</span></span>
     <span style="color: #008080">set_vector</span> <span style="font-weight: bold"><span style="color: #000000">check_h</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     check_h<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     check_h<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">// compute and test forward mode</span></span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">set_vector</span> <span style="font-weight: bold"><span style="color: #000000">r</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">s</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">h</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span>j<span style="color: #990000">);</span>
          h <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">ForSparseHes</span></span><span style="color: #990000">(</span>r<span style="color: #990000">,</span> s<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               ok <span style="color: #990000">&amp;=</span> h<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">==</span> check_h<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><a name="Test Atomic Function.rev_sparse_hes" id="Test Atomic Function.rev_sparse_hes">rev_sparse_hes</a></b>
<br/>
Note the previous call to <code><font color="blue">ForSparseJac</font></code> above
stored its results in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// compute and test reverse mode</span></span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">set_vector</span> <span style="font-weight: bold"><span style="color: #000000">s</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">h</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
          h <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseHes</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> s<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               ok <span style="color: #990000">&amp;=</span> h<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">==</span> check_h<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><a name="Test Atomic Function.Test Result" id="Test Atomic Function.Test Result">Test Result</a></b>

<pre style='display:inline'><tt>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>

<hr/>Input File: example/atomic/set_sparsity.cpp

</body>
</html>
