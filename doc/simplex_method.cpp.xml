<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>abs_normal simplex_method: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="abs_normal simplex_method: Example and Test"/>
<meta name="keywords" id="keywords" content=" abs_normal simplex_method: example test problem source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_simplex_method.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="simplex_method.xml" target="_top">Prev</a>
</td><td><a href="simplex_method.hpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>abs_normal</option>
<option>simplex_method</option>
<option>simplex_method.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>record_adfun</option>
<option>drivers</option>
<option>Forward</option>
<option>Reverse</option>
<option>sparsity_pattern</option>
<option>sparse_derivative</option>
<option>optimize</option>
<option>abs_normal</option>
<option>FunCheck</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>abs_normal-&gt;</option>
<option>abs_normal_fun</option>
<option>abs_print_mat</option>
<option>abs_eval</option>
<option>simplex_method</option>
<option>lp_box</option>
<option>abs_min_linear</option>
<option>min_nso_linear</option>
<option>qp_interior</option>
<option>qp_box</option>
<option>abs_min_quad</option>
<option>min_nso_quad</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>simplex_method-&gt;</option>
<option>simplex_method.cpp</option>
<option>simplex_method.hpp</option>
</select>
</td>
<td>simplex_method.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Problem</option>
<option>Source</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>abs_normal simplex_method: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Problem" id="Problem">Problem</a></big></b>
<br/>
Our original problem is

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>minimize</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
<mn>1</mn>
<mo stretchy="false">|</mo>
<mspace width='.3em'/>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>w</mi>
<mo stretchy="false">.</mo>
<mi mathvariant='normal'>r</mi>
<mo stretchy="false">.</mo>
<mi mathvariant='normal'>t</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">&#x02208;</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
</mrow></math>

We reformulate this as the following problem

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>minimize</mi>
</mstyle></mrow>
</mtd><mtd columnalign="left" >
<mi mathvariant='italic'>v</mi>
</mtd><mtd columnalign="right" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>w</mi>
<mo stretchy="false">.</mo>
<mi mathvariant='normal'>r</mi>
<mo stretchy="false">.</mo>
<mi mathvariant='normal'>t</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>v</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mn>2</mn>
</msup>
</mtd></mtr><mtr><mtd columnalign="right" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>subject</mi>
<mspace width='.3em'/>
<mi mathvariant='normal'>to</mi>
</mstyle></mrow>
</mtd><mtd columnalign="left" >
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
<mn>1</mn>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>v</mi>
</mtd></mtr><mtr><mtd columnalign="right" >
</mtd><mtd columnalign="left" >
<mn>1</mn>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>v</mi>
</mtd></mtr></mtable>
</mrow></math>

We know that the value of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>v</mi>
</mrow></math>

 at the solution is greater than
or equal zero. Hence we can reformulate this problem as

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>minimize</mi>
</mstyle></mrow>
</mtd><mtd columnalign="left" >
<mi mathvariant='italic'>v</mi>
</mtd><mtd columnalign="right" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>w</mi>
<mo stretchy="false">.</mo>
<mi mathvariant='normal'>r</mi>
<mo stretchy="false">.</mo>
<mi mathvariant='normal'>t</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
</msub>
<mo stretchy="false">,</mo>
<msub><mi mathvariant='italic'>u</mi>
<mo stretchy="false">+</mo>
</msub>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>v</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x02208;</mo>
<msubsup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mo stretchy="false">+</mo>
<mn>3</mn>
</msubsup>
</mtd></mtr><mtr><mtd columnalign="right" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>subject</mi>
<mspace width='.3em'/>
<mi mathvariant='normal'>to</mi>
</mstyle></mrow>
</mtd><mtd columnalign="left" >
<msub><mi mathvariant='italic'>u</mi>
<mo stretchy="false">+</mo>
</msub>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
</msub>
<mo stretchy="false">-</mo>
<mn>1</mn>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>v</mi>
</mtd></mtr><mtr><mtd columnalign="right" >
</mtd><mtd columnalign="left" >
<mn>1</mn>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>u</mi>
<mo stretchy="false">+</mo>
</msub>
<mo stretchy="false">+</mo>
<msub><mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
</msub>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='italic'>v</mi>
</mtd></mtr></mtable>
</mrow></math>

This is equivalent to

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>minimize</mi>
</mstyle></mrow>
</mtd><mtd columnalign="left" >
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x000B7;</mo>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>u</mi>
<mo stretchy="false">+</mo>
</msub>
<mo stretchy="false">,</mo>
<msub><mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
</msub>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>v</mi>
<msup><mo stretchy="false">)</mo>
<mi mathvariant='italic'>T</mi>
</msup>
</mtd><mtd columnalign="right" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>w</mi>
<mo stretchy="false">.</mo>
<mi mathvariant='normal'>r</mi>
<mo stretchy="false">.</mo>
<mi mathvariant='normal'>t</mi>
</mstyle></mrow>
<mspace width='.3em'/>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>u</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>v</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">&#x02208;</mo>
<msubsup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mo stretchy="false">+</mo>
<mn>3</mn>
</msubsup>
</mtd></mtr><mtr><mtd columnalign="right" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>subject</mi>
<mspace width='.3em'/>
<mi mathvariant='normal'>to</mi>
</mstyle></mrow>
</mtd><mtd columnalign="left" >
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mo stretchy="false">+</mo>
<mn>1</mn>
</mtd><mtd columnalign="center" >
<mn>-1</mn>
</mtd><mtd columnalign="center" >
<mn>-1</mn>
</mtd></mtr><mtr><mtd columnalign="center" >
<mn>-1</mn>
</mtd><mtd columnalign="center" >
<mo stretchy="false">+</mo>
<mn>1</mn>
</mtd><mtd columnalign="center" >
<mo stretchy="false">+</mo>
<mn>1</mn>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<msub><mi mathvariant='italic'>u</mi>
<mo stretchy="false">+</mo>
</msub>
</mtd></mtr><mtr><mtd columnalign="center" >
<msub><mi mathvariant='italic'>u</mi>
<mo stretchy="false">-</mo>
</msub>
</mtd></mtr><mtr><mtd columnalign="center" >
<mi mathvariant='italic'>v</mi>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
<mo stretchy="false">+</mo>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mn>-1</mn>
</mtd></mtr><mtr><mtd columnalign="center" >
<mn>1</mn>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
<mo stretchy="false">&#x02264;</mo>
<mn>0</mn>
</mtd></mtr></mtable>
</mrow></math>

which is in the form expected by <a href="simplex_method.xml" target="_top"><span style='white-space: nowrap'>simplex_method</span></a>
.


<br/>
<br/>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;limits&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/vector.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"simplex_method.hpp"</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">simplex_method</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> vector<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> eps99 <span style="color: #990000">=</span> <span style="color: #993399">99.0</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector</span> <span style="font-weight: bold"><span style="color: #000000">A</span></span><span style="color: #990000">(</span>m <span style="color: #990000">*</span> n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">b</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">c</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">xout</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     A<span style="color: #990000">[</span> <span style="color: #993399">0</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">0</span> <span style="color: #990000">]</span> <span style="color: #990000">=</span>  <span style="color: #993399">1.0</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// A(0,0)</span></span>
     A<span style="color: #990000">[</span> <span style="color: #993399">0</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">1</span> <span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1.0</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// A(0,1)</span></span>
     A<span style="color: #990000">[</span> <span style="color: #993399">0</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">2</span> <span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1.0</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// A(0,2)</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     A<span style="color: #990000">[</span> <span style="color: #993399">1</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">0</span> <span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1.0</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// A(1,0)</span></span>
     A<span style="color: #990000">[</span> <span style="color: #993399">1</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">1</span> <span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">+</span><span style="color: #993399">1.0</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// A(1,1)</span></span>
     A<span style="color: #990000">[</span> <span style="color: #993399">1</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">2</span> <span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1.0</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// A(1,2)</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     b<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>           <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1.0</span><span style="color: #990000">;</span>
     b<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span>           <span style="color: #990000">=</span>  <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     c<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>           <span style="color: #990000">=</span>  <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
     c<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span>           <span style="color: #990000">=</span>  <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
     c<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span>           <span style="color: #990000">=</span>  <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="color: #008080">size_t</span> maxitr  <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> level   <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">simplex_method</span></span><span style="color: #990000">(</span>level<span style="color: #990000">,</span> A<span style="color: #990000">,</span> b<span style="color: #990000">,</span> c<span style="color: #990000">,</span>  maxitr<span style="color: #990000">,</span> xout<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// check optimal value for u</span></span>
     ok <span style="color: #990000">&amp;=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span> xout<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">-</span> <span style="color: #993399">1.0</span> <span style="color: #990000">)</span> <span style="color: #990000">&lt;</span> eps99<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// check optimal value for v</span></span>
     ok <span style="color: #990000">&amp;=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span> xout<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">&lt;</span> eps99<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: example/abs_normal/simplex_method.cpp

</body>
</html>
