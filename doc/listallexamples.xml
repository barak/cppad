<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>List of All the CppAD Examples</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="List of All the CppAD Examples"/>
<meta name="keywords" id="keywords" content=" list all the cppad examples "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_listallexamples_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="lu_vec_ad_ok.cpp.xml" target="_top">Prev</a>
</td><td><a href="testvector.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>ListAllExamples</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>testvector</option>
</select>
</td>
<td>ListAllExamples</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>List of All the CppAD Examples</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<a href="a11c_bthread.cpp.xml" target="_top">a11c_bthread.cpp</a></td><td>
A Simple Boost Thread Example and Test</td></tr>
<tr><td>
<a href="a11c_openmp.cpp.xml" target="_top">a11c_openmp.cpp</a></td><td>
A Simple OpenMP Example and Test</td></tr>
<tr><td>
<a href="a11c_pthread.cpp.xml" target="_top">a11c_pthread.cpp</a></td><td>
A Simple Parallel Pthread Example and Test</td></tr>
<tr><td>
<a href="abort_recording.cpp.xml" target="_top">abort_recording.cpp</a></td><td>
Abort Current Recording: Example and Test</td></tr>
<tr><td>
<a href="abs.cpp.xml" target="_top">Abs.cpp</a></td><td>
AD Absolute Value Function: Example and Test</td></tr>
<tr><td>
<a href="acos.cpp.xml" target="_top">acos.cpp</a></td><td>
The AD acos Function: Example and Test</td></tr>
<tr><td>
<a href="acosh.cpp.xml" target="_top">acosh.cpp</a></td><td>
The AD acosh Function: Example and Test</td></tr>
<tr><td>
<a href="ad_assign.cpp.xml" target="_top">ad_assign.cpp</a></td><td>
AD Assignment: Example and Test</td></tr>
<tr><td>
<a href="ad_ctor.cpp.xml" target="_top">ad_ctor.cpp</a></td><td>
AD Constructors: Example and Test</td></tr>
<tr><td>
<a href="add.cpp.xml" target="_top">add.cpp</a></td><td>
AD Binary Addition: Example and Test</td></tr>
<tr><td>
<a href="addeq.cpp.xml" target="_top">AddEq.cpp</a></td><td>
AD Computed Assignment Addition: Example and Test</td></tr>
<tr><td>
<a href="ad_fun.cpp.xml" target="_top">ad_fun.cpp</a></td><td>
Creating Your Own Interface to an ADFun Object</td></tr>
<tr><td>
<a href="ad_in_c.cpp.xml" target="_top">ad_in_c.cpp</a></td><td>
Example and Test Linking CppAD to Languages Other than C++</td></tr>
<tr><td>
<a href="ad_input.cpp.xml" target="_top">ad_input.cpp</a></td><td>
AD Output Operator: Example and Test</td></tr>
<tr><td>
<a href="ad_output.cpp.xml" target="_top">ad_output.cpp</a></td><td>
AD Output Operator: Example and Test</td></tr>
<tr><td>
<a href="asin.cpp.xml" target="_top">asin.cpp</a></td><td>
The AD asin Function: Example and Test</td></tr>
<tr><td>
<a href="asinh.cpp.xml" target="_top">asinh.cpp</a></td><td>
The AD asinh Function: Example and Test</td></tr>
<tr><td>
<a href="atan2.cpp.xml" target="_top">atan2.cpp</a></td><td>
The AD atan2 Function: Example and Test</td></tr>
<tr><td>
<a href="atan.cpp.xml" target="_top">atan.cpp</a></td><td>
The AD atan Function: Example and Test</td></tr>
<tr><td>
<a href="atanh.cpp.xml" target="_top">atanh.cpp</a></td><td>
The AD atanh Function: Example and Test</td></tr>
<tr><td>
<a href="atomic_eigen_cholesky.cpp.xml" target="_top">atomic_eigen_cholesky.cpp</a></td><td>
Atomic Eigen Cholesky Factorization: Example and Test</td></tr>
<tr><td>
<a href="atomic_eigen_cholesky.hpp.xml" target="_top">atomic_eigen_cholesky.hpp</a></td><td>
Atomic Eigen Cholesky Factorization Class</td></tr>
<tr><td>
<a href="atomic_eigen_mat_inv.cpp.xml" target="_top">atomic_eigen_mat_inv.cpp</a></td><td>
Atomic Eigen Matrix Inverse: Example and Test</td></tr>
<tr><td>
<a href="atomic_eigen_mat_inv.hpp.xml" target="_top">atomic_eigen_mat_inv.hpp</a></td><td>
Atomic Eigen Matrix Inversion Class</td></tr>
<tr><td>
<a href="atomic_eigen_mat_mul.cpp.xml" target="_top">atomic_eigen_mat_mul.cpp</a></td><td>
Atomic Eigen Matrix Multiply: Example and Test</td></tr>
<tr><td>
<a href="atomic_eigen_mat_mul.hpp.xml" target="_top">atomic_eigen_mat_mul.hpp</a></td><td>
Atomic Eigen Matrix Multiply Class</td></tr>
<tr><td>
<a href="checkpoint_extended_ode.cpp.xml" target="_top">checkpoint_extended_ode.cpp</a></td><td>
Checkpointing an Extended ODE Solver: Example and Test</td></tr>
<tr><td>
<a href="atomic_for_sparse_hes.cpp.xml" target="_top">atomic_for_sparse_hes.cpp</a></td><td>
Atomic Forward Hessian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="atomic_for_sparse_jac.cpp.xml" target="_top">atomic_for_sparse_jac.cpp</a></td><td>
Atomic Forward Jacobian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="atomic_forward.cpp.xml" target="_top">atomic_forward.cpp</a></td><td>
Atomic Forward: Example and Test</td></tr>
<tr><td>
<a href="atomic_get_started.cpp.xml" target="_top">atomic_get_started.cpp</a></td><td>
Getting Started with Atomic Operations: Example and Test</td></tr>
<tr><td>
<a href="atomic_mat_mul.cpp.xml" target="_top">atomic_mat_mul.cpp</a></td><td>
User Atomic Matrix Multiply: Example and Test</td></tr>
<tr><td>
<a href="atomic_mat_mul.hpp.xml" target="_top">atomic_mat_mul.hpp</a></td><td>
Matrix Multiply as an Atomic Operation</td></tr>
<tr><td>
<a href="atomic_mul_level.cpp.xml" target="_top">atomic_mul_level.cpp</a></td><td>
Atomic Operations and Multiple-Levels of AD: Example and Test</td></tr>
<tr><td>
<a href="atomic_norm_sq.cpp.xml" target="_top">atomic_norm_sq.cpp</a></td><td>
Atomic Euclidean Norm Squared: Example and Test</td></tr>
<tr><td>
<a href="checkpoint_ode.cpp.xml" target="_top">checkpoint_ode.cpp</a></td><td>
Checkpointing an ODE Solver: Example and Test</td></tr>
<tr><td>
<a href="atomic_reciprocal.cpp.xml" target="_top">atomic_reciprocal.cpp</a></td><td>
Reciprocal as an Atomic Operation: Example and Test</td></tr>
<tr><td>
<a href="atomic_reverse.cpp.xml" target="_top">atomic_reverse.cpp</a></td><td>
Atomic Reverse: Example and Test</td></tr>
<tr><td>
<a href="atomic_rev_sparse_hes.cpp.xml" target="_top">atomic_rev_sparse_hes.cpp</a></td><td>
Atomic Reverse Hessian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="atomic_rev_sparse_jac.cpp.xml" target="_top">atomic_rev_sparse_jac.cpp</a></td><td>
Atomic Reverse Jacobian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="atomic_set_sparsity.cpp.xml" target="_top">atomic_set_sparsity.cpp</a></td><td>
Atomic Sparsity with Set Patterns: Example and Test</td></tr>
<tr><td>
<a href="atomic_tangent.cpp.xml" target="_top">atomic_tangent.cpp</a></td><td>
Tan and Tanh as User Atomic Operations: Example and Test</td></tr>
<tr><td>
<a href="azmul.cpp.xml" target="_top">azmul.cpp</a></td><td>
AD Absolute Zero Multiplication: Example and Test</td></tr>
<tr><td>
<a href="base_adolc.hpp.xml" target="_top">base_adolc.hpp</a></td><td>
Enable use of AD&lt;Base&gt; where Base is Adolc's adouble Type</td></tr>
<tr><td>
<a href="base_alloc.hpp.xml" target="_top">base_alloc.hpp</a></td><td>
Example AD&lt;Base&gt; Where Base Constructor Allocates Memory</td></tr>
<tr><td>
<a href="base_complex.hpp.xml" target="_top">base_complex.hpp</a></td><td>
Enable use of AD&lt;Base&gt; where Base is std::complex&lt;double&gt;</td></tr>
<tr><td>
<a href="base_require.cpp.xml" target="_top">base_require.cpp</a></td><td>
Using a User Defined AD Base Type: Example and Test</td></tr>
<tr><td>
<a href="bender_quad.cpp.xml" target="_top">bender_quad.cpp</a></td><td>
BenderQuad: Example and Test</td></tr>
<tr><td>
<a href="bool_fun.cpp.xml" target="_top">bool_fun.cpp</a></td><td>
AD Boolean Functions: Example and Test</td></tr>
<tr><td>
<a href="bool_sparsity.cpp.xml" target="_top">bool_sparsity.cpp</a></td><td>
Using vectorBool Sparsity To Conserve Memory: Example and Test</td></tr>
<tr><td>
<a href="capacity_order.cpp.xml" target="_top">capacity_order.cpp</a></td><td>
Controlling Taylor Coefficient Memory Allocation: Example and Test</td></tr>
<tr><td>
<a href="change_param.cpp.xml" target="_top">change_param.cpp</a></td><td>
Computing a Jacobian With Constants that Change</td></tr>
<tr><td>
<a href="check_for_nan.cpp.xml" target="_top">check_for_nan.cpp</a></td><td>
ADFun Checking For Nan: Example and Test</td></tr>
<tr><td>
<a href="check_numeric_type.cpp.xml" target="_top">check_numeric_type.cpp</a></td><td>
The CheckNumericType Function: Example and Test</td></tr>
<tr><td>
<a href="checkpoint.cpp.xml" target="_top">checkpoint.cpp</a></td><td>
Simple Checkpointing: Example and Test</td></tr>
<tr><td>
<a href="check_simple_vector.cpp.xml" target="_top">check_simple_vector.cpp</a></td><td>
The CheckSimpleVector Function: Example and Test</td></tr>
<tr><td>
<a href="colpack_hes.cpp.xml" target="_top">colpack_hes.cpp</a></td><td>
Using ColPack: Example and Test</td></tr>
<tr><td>
<a href="colpack_jac.cpp.xml" target="_top">colpack_jac.cpp</a></td><td>
Using ColPack: Example and Test</td></tr>
<tr><td>
<a href="compare_change.cpp.xml" target="_top">compare_change.cpp</a></td><td>
CompareChange and Re-Tape: Example and Test</td></tr>
<tr><td>
<a href="compare.cpp.xml" target="_top">compare.cpp</a></td><td>
AD Binary Comparison Operators: Example and Test</td></tr>
<tr><td>
<a href="complex_poly.cpp.xml" target="_top">complex_poly.cpp</a></td><td>
Complex Polynomial: Example and Test</td></tr>
<tr><td>
<a href="cond_exp.cpp.xml" target="_top">cond_exp.cpp</a></td><td>
Conditional Expressions: Example and Test</td></tr>
<tr><td>
<a href="conj_grad.cpp.xml" target="_top">conj_grad.cpp</a></td><td>
Differentiate Conjugate Gradient Algorithm: Example and Test</td></tr>
<tr><td>
<a href="cos.cpp.xml" target="_top">cos.cpp</a></td><td>
The AD cos Function: Example and Test</td></tr>
<tr><td>
<a href="cosh.cpp.xml" target="_top">cosh.cpp</a></td><td>
The AD cosh Function: Example and Test</td></tr>
<tr><td>
<a href="cppad_eigen.hpp.xml" target="_top">cppad_eigen.hpp</a></td><td>
Enable Use of Eigen Linear Algebra Package with CppAD</td></tr>
<tr><td>
<a href="cppad_vector.cpp.xml" target="_top">cppad_vector.cpp</a></td><td>
CppAD::vector Template Class: Example and Test</td></tr>
<tr><td>
<a href="dependency.cpp.xml" target="_top">dependency.cpp</a></td><td>
Computing Dependency: Example and Test</td></tr>
<tr><td>
<a href="det_by_lu.cpp.xml" target="_top">det_by_lu.cpp</a></td><td>
Determinant Using Lu Factorization: Example and Test</td></tr>
<tr><td>
<a href="det_by_minor.cpp.xml" target="_top">det_by_minor.cpp</a></td><td>
Determinant Using Expansion by Minors: Example and Test</td></tr>
<tr><td>
<a href="det_of_minor.cpp.xml" target="_top">det_of_minor.cpp</a></td><td>
Determinant of a Minor: Example and Test</td></tr>
<tr><td>
<a href="div.cpp.xml" target="_top">div.cpp</a></td><td>
AD Binary Division: Example and Test</td></tr>
<tr><td>
<a href="div_eq.cpp.xml" target="_top">div_eq.cpp</a></td><td>
AD Computed Assignment Division: Example and Test</td></tr>
<tr><td>
<a href="eigen_array.cpp.xml" target="_top">eigen_array.cpp</a></td><td>
Using Eigen Arrays: Example and Test</td></tr>
<tr><td>
<a href="eigen_det.cpp.xml" target="_top">eigen_det.cpp</a></td><td>
Using Eigen To Compute Determinant: Example and Test</td></tr>
<tr><td>
<a href="eigen_plugin.hpp.xml" target="_top">eigen_plugin.hpp</a></td><td>
Source Code for eigen_plugin.hpp</td></tr>
<tr><td>
<a href="elapsed_seconds.cpp.xml" target="_top">elapsed_seconds.cpp</a></td><td>
Elapsed Seconds: Example and Test</td></tr>
<tr><td>
<a href="equal_op_seq.cpp.xml" target="_top">equal_op_seq.cpp</a></td><td>
EqualOpSeq: Example and Test</td></tr>
<tr><td>
<a href="erf.cpp.xml" target="_top">erf.cpp</a></td><td>
The AD erf Function: Example and Test</td></tr>
<tr><td>
<a href="error_handler.cpp.xml" target="_top">error_handler.cpp</a></td><td>
Replacing The CppAD Error Handler: Example and Test</td></tr>
<tr><td>
<a href="example.cpp.xml" target="_top">example.cpp</a></td><td>
CppAD Examples and Tests</td></tr>
<tr><td>
<a href="exp.cpp.xml" target="_top">exp.cpp</a></td><td>
The AD exp Function: Example and Test</td></tr>
<tr><td>
<a href="expm1.cpp.xml" target="_top">expm1.cpp</a></td><td>
The AD exp Function: Example and Test</td></tr>
<tr><td>
<a href="expm1.cpp.xml" target="_top">expm1.cpp</a></td><td>
The AD exp Function: Example and Test</td></tr>
<tr><td>
<a href="for_one.cpp.xml" target="_top">for_one.cpp</a></td><td>
First Order Partial Driver: Example and Test</td></tr>
<tr><td>
<a href="for_sparse_hes.cpp.xml" target="_top">for_sparse_hes.cpp</a></td><td>
Forward Mode Hessian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="for_sparse_jac.cpp.xml" target="_top">for_sparse_jac.cpp</a></td><td>
Forward Mode Jacobian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="for_two.cpp.xml" target="_top">for_two.cpp</a></td><td>
Subset of Second Order Partials: Example and Test</td></tr>
<tr><td>
<a href="forward.cpp.xml" target="_top">forward.cpp</a></td><td>
Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="forward_dir.cpp.xml" target="_top">forward_dir.cpp</a></td><td>
Forward Mode: Example and Test of Multiple Directions</td></tr>
<tr><td>
<a href="forward_order.cpp.xml" target="_top">forward_order.cpp</a></td><td>
Forward Mode: Example and Test of Multiple Orders</td></tr>
<tr><td>
<a href="fun_assign.cpp.xml" target="_top">fun_assign.cpp</a></td><td>
ADFun Assignment: Example and Test</td></tr>
<tr><td>
<a href="fun_check.cpp.xml" target="_top">fun_check.cpp</a></td><td>
ADFun Check and Re-Tape: Example and Test</td></tr>
<tr><td>
<a href="get_started.cpp.xml" target="_top">get_started.cpp</a></td><td>
Getting Started Using CppAD to Compute Derivatives</td></tr>
<tr><td>
<a href="harmonic.cpp.xml" target="_top">harmonic.cpp</a></td><td>
Multi-Threaded Implementation of Summation of 1/i</td></tr>
<tr><td>
<a href="harmonic_time.cpp.xml" target="_top">harmonic_time.cpp</a></td><td>
Timing Test of Multi-Threaded Summation of 1/i</td></tr>
<tr><td>
<a href="harmonic_work.cpp.xml" target="_top">harmonic_work.cpp</a></td><td>
Multi-threading Sum of 1/i Utility Routines</td></tr>
<tr><td>
<a href="hes_lagrangian.cpp.xml" target="_top">hes_lagrangian.cpp</a></td><td>
Hessian of Lagrangian and  ADFun Default Constructor: Example and Test</td></tr>
<tr><td>
<a href="hes_lu_det.cpp.xml" target="_top">hes_lu_det.cpp</a></td><td>
Gradient of Determinant Using LU Factorization: Example and Test</td></tr>
<tr><td>
<a href="hes_minor_det.cpp.xml" target="_top">hes_minor_det.cpp</a></td><td>
Gradient of Determinant Using Expansion by Minors: Example and Test</td></tr>
<tr><td>
<a href="hessian.cpp.xml" target="_top">hessian.cpp</a></td><td>
Hessian: Example and Test</td></tr>
<tr><td>
<a href="hes_times_dir.cpp.xml" target="_top">hes_times_dir.cpp</a></td><td>
Hessian Times Direction: Example and Test</td></tr>
<tr><td>
<a href="independent.cpp.xml" target="_top">independent.cpp</a></td><td>
Independent and ADFun Constructor: Example and Test</td></tr>
<tr><td>
<a href="index_sort.cpp.xml" target="_top">index_sort.cpp</a></td><td>
Index Sort: Example and Test</td></tr>
<tr><td>
<a href="integer.cpp.xml" target="_top">integer.cpp</a></td><td>
Convert From AD to Integer: Example and Test</td></tr>
<tr><td>
<a href="interface2c.cpp.xml" target="_top">interface2c.cpp</a></td><td>
Interfacing to C: Example and Test</td></tr>
<tr><td>
<a href="interp_onetape.cpp.xml" target="_top">interp_onetape.cpp</a></td><td>
Interpolation With Out Retaping: Example and Test</td></tr>
<tr><td>
<a href="interp_retape.cpp.xml" target="_top">interp_retape.cpp</a></td><td>
Interpolation With Retaping: Example and Test</td></tr>
<tr><td>
<a href="ipopt_solve_get_started.cpp.xml" target="_top">ipopt_solve_get_started.cpp</a></td><td>
Nonlinear Programming Using CppAD and Ipopt: Example and Test</td></tr>
<tr><td>
<a href="ipopt_solve_ode_inverse.cpp.xml" target="_top">ipopt_solve_ode_inverse.cpp</a></td><td>
ODE Inverse Problem Definitions: Source Code</td></tr>
<tr><td>
<a href="ipopt_solve_retape.cpp.xml" target="_top">ipopt_solve_retape.cpp</a></td><td>
Nonlinear Programming Retaping: Example and Test</td></tr>
<tr><td>
<a href="jac_lu_det.cpp.xml" target="_top">jac_lu_det.cpp</a></td><td>
Gradient of Determinant Using Lu Factorization: Example and Test</td></tr>
<tr><td>
<a href="jac_minor_det.cpp.xml" target="_top">jac_minor_det.cpp</a></td><td>
Gradient of Determinant Using Expansion by Minors: Example and Test</td></tr>
<tr><td>
<a href="jacobian.cpp.xml" target="_top">jacobian.cpp</a></td><td>
Jacobian: Example and Test</td></tr>
<tr><td>
<a href="log10.cpp.xml" target="_top">log10.cpp</a></td><td>
The AD log10 Function: Example and Test</td></tr>
<tr><td>
<a href="log1p.cpp.xml" target="_top">log1p.cpp</a></td><td>
The AD log1p Function: Example and Test</td></tr>
<tr><td>
<a href="log.cpp.xml" target="_top">log.cpp</a></td><td>
The AD log Function: Example and Test</td></tr>
<tr><td>
<a href="lu_factor.cpp.xml" target="_top">lu_factor.cpp</a></td><td>
LuFactor: Example and Test</td></tr>
<tr><td>
<a href="lu_invert.cpp.xml" target="_top">lu_invert.cpp</a></td><td>
LuInvert: Example and Test</td></tr>
<tr><td>
<a href="lu_ratio.cpp.xml" target="_top">lu_ratio.cpp</a></td><td>
LuRatio: Example and Test</td></tr>
<tr><td>
<a href="lu_solve.cpp.xml" target="_top">lu_solve.cpp</a></td><td>
LuSolve With Complex Arguments: Example and Test</td></tr>
<tr><td>
<a href="lu_vec_ad_ok.cpp.xml" target="_top">lu_vec_ad_ok.cpp</a></td><td>
Lu Factor and Solve With Recorded Pivoting: Example and Test</td></tr>
<tr><td>
<a href="mat_sum_sq.cpp.xml" target="_top">mat_sum_sq.cpp</a></td><td>
Sum of the Elements of the Square of a Matrix: Example and Test</td></tr>
<tr><td>
<a href="mul.cpp.xml" target="_top">mul.cpp</a></td><td>
AD Binary Multiplication: Example and Test</td></tr>
<tr><td>
<a href="mul_eq.cpp.xml" target="_top">mul_eq.cpp</a></td><td>
AD Computed Assignment Multiplication: Example and Test</td></tr>
<tr><td>
<a href="mul_level_adolc.cpp.xml" target="_top">mul_level_adolc.cpp</a></td><td>
Using Adolc with Multiple Levels of Taping: Example and Test</td></tr>
<tr><td>
<a href="mul_level_adolc_ode.cpp.xml" target="_top">mul_level_adolc_ode.cpp</a></td><td>
Taylor's Ode Solver: A Multi-Level Adolc Example and Test</td></tr>
<tr><td>
<a href="mul_level.cpp.xml" target="_top">mul_level.cpp</a></td><td>
Multiple Level of AD: Example and Test</td></tr>
<tr><td>
<a href="mul_level_ode.cpp.xml" target="_top">mul_level_ode.cpp</a></td><td>
Taylor's Ode Solver: A Multi-Level AD Example and Test</td></tr>
<tr><td>
<a href="multi_newton.cpp.xml" target="_top">multi_newton.cpp</a></td><td>
A Multi-Threaded Newton's Method</td></tr>
<tr><td>
<a href="multi_newton_time.cpp.xml" target="_top">multi_newton_time.cpp</a></td><td>
Timing Test of Multi-Threaded Newton Method</td></tr>
<tr><td>
<a href="multi_newton_work.cpp.xml" target="_top">multi_newton_work.cpp</a></td><td>
Multi-threading Newton Method Utility Routines</td></tr>
<tr><td>
<a href="nan.cpp.xml" target="_top">nan.cpp</a></td><td>
nan: Example and Test</td></tr>
<tr><td>
<a href="near_equal.cpp.xml" target="_top">near_equal.cpp</a></td><td>
NearEqual Function: Example and Test</td></tr>
<tr><td>
<a href="near_equal_ext.cpp.xml" target="_top">near_equal_ext.cpp</a></td><td>
Compare AD with Base Objects: Example and Test</td></tr>
<tr><td>
<a href="number_skip.cpp.xml" target="_top">number_skip.cpp</a></td><td>
Number of Variables That Can be Skipped: Example and Test</td></tr>
<tr><td>
<a href="numeric_type.cpp.xml" target="_top">numeric_type.cpp</a></td><td>
The NumericType: Example and Test</td></tr>
<tr><td>
<a href="num_limits.cpp.xml" target="_top">num_limits.cpp</a></td><td>
Numeric Limits: Example and Test</td></tr>
<tr><td>
<a href="ode_err_control.cpp.xml" target="_top">ode_err_control.cpp</a></td><td>
OdeErrControl: Example and Test</td></tr>
<tr><td>
<a href="ode_err_maxabs.cpp.xml" target="_top">ode_err_maxabs.cpp</a></td><td>
OdeErrControl: Example and Test Using Maxabs Argument</td></tr>
<tr><td>
<a href="ode_evaluate.cpp.xml" target="_top">ode_evaluate.cpp</a></td><td>
ode_evaluate: Example and test</td></tr>
<tr><td>
<a href="ode_gear_control.cpp.xml" target="_top">ode_gear_control.cpp</a></td><td>
OdeGearControl: Example and Test</td></tr>
<tr><td>
<a href="ode_gear.cpp.xml" target="_top">ode_gear.cpp</a></td><td>
OdeGear: Example and Test</td></tr>
<tr><td>
<a href="ode_stiff.cpp.xml" target="_top">ode_stiff.cpp</a></td><td>
A Stiff Ode: Example and Test</td></tr>
<tr><td>
<a href="ode_taylor.cpp.xml" target="_top">ode_taylor.cpp</a></td><td>
Taylor's Ode Solver: An Example and Test</td></tr>
<tr><td>
<a href="optimize_compare_op.cpp.xml" target="_top">optimize_compare_op.cpp</a></td><td>
Example Optimization and Comparison Operators</td></tr>
<tr><td>
<a href="optimize_conditional_skip.cpp.xml" target="_top">optimize_conditional_skip.cpp</a></td><td>
Example Optimization and Conditional Expressions</td></tr>
<tr><td>
<a href="optimize_cumulative_sum.cpp.xml" target="_top">optimize_cumulative_sum.cpp</a></td><td>
Example Optimization and Cumulative Sum Operations</td></tr>
<tr><td>
<a href="optimize_forward_active.cpp.xml" target="_top">optimize_forward_active.cpp</a></td><td>
Example Optimization and Forward Activity Analysis</td></tr>
<tr><td>
<a href="optimize_nest_conditional.cpp.xml" target="_top">optimize_nest_conditional.cpp</a></td><td>
Example Optimization and Nested Conditional Expressions</td></tr>
<tr><td>
<a href="optimize_print_for.cpp.xml" target="_top">optimize_print_for.cpp</a></td><td>
Example Optimization and Print Forward Operators</td></tr>
<tr><td>
<a href="optimize_reverse_active.cpp.xml" target="_top">optimize_reverse_active.cpp</a></td><td>
Example Optimization and Reverse Activity Analysis</td></tr>
<tr><td>
<a href="opt_val_hes.cpp.xml" target="_top">opt_val_hes.cpp</a></td><td>
opt_val_hes: Example and Test</td></tr>
<tr><td>
<a href="par_var.cpp.xml" target="_top">par_var.cpp</a></td><td>
AD Parameter and Variable Functions: Example and Test</td></tr>
<tr><td>
<a href="poly.cpp.xml" target="_top">poly.cpp</a></td><td>
Polynomial Evaluation: Example and Test</td></tr>
<tr><td>
<a href="pow.cpp.xml" target="_top">pow.cpp</a></td><td>
The AD Power Function: Example and Test</td></tr>
<tr><td>
<a href="pow_int.cpp.xml" target="_top">pow_int.cpp</a></td><td>
The Pow Integer Exponent: Example and Test</td></tr>
<tr><td>
<a href="print_for_cout.cpp.xml" target="_top">print_for_cout.cpp</a></td><td>
Printing During Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="print_for_string.cpp.xml" target="_top">print_for_string.cpp</a></td><td>
Print During Zero Order Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="reverse_checkpoint.cpp.xml" target="_top">reverse_checkpoint.cpp</a></td><td>
Reverse Mode General Case (Checkpointing): Example and Test</td></tr>
<tr><td>
<a href="reverse_one.cpp.xml" target="_top">reverse_one.cpp</a></td><td>
First Order Reverse Mode: Example and Test</td></tr>
<tr><td>
<a href="reverse_three.cpp.xml" target="_top">reverse_three.cpp</a></td><td>
Third Order Reverse Mode: Example and Test</td></tr>
<tr><td>
<a href="reverse_two.cpp.xml" target="_top">reverse_two.cpp</a></td><td>
Second Order Reverse ModeExample and Test</td></tr>
<tr><td>
<a href="rev_one.cpp.xml" target="_top">rev_one.cpp</a></td><td>
First Order Derivative Driver: Example and Test</td></tr>
<tr><td>
<a href="rev_sparse_hes.cpp.xml" target="_top">rev_sparse_hes.cpp</a></td><td>
Reverse Mode Hessian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="rev_sparse_jac.cpp.xml" target="_top">rev_sparse_jac.cpp</a></td><td>
Reverse Mode Jacobian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="rev_two.cpp.xml" target="_top">rev_two.cpp</a></td><td>
Second Partials Reverse Driver: Example and Test</td></tr>
<tr><td>
<a href="rombergmul.cpp.xml" target="_top">Rombergmul.cpp</a></td><td>
One Dimensional Romberg Integration: Example and Test</td></tr>
<tr><td>
<a href="romberg_one.cpp.xml" target="_top">romberg_one.cpp</a></td><td>
One Dimensional Romberg Integration: Example and Test</td></tr>
<tr><td>
<a href="rosen_34.cpp.xml" target="_top">rosen_34.cpp</a></td><td>
Rosen34: Example and Test</td></tr>
<tr><td>
<a href="runge45_1.cpp.xml" target="_top">runge45_1.cpp</a></td><td>
Runge45: Example and Test</td></tr>
<tr><td>
<a href="runge45_2.cpp.xml" target="_top">runge45_2.cpp</a></td><td>
Runge45: Example and Test</td></tr>
<tr><td>
<a href="seq_property.cpp.xml" target="_top">seq_property.cpp</a></td><td>
ADFun Sequence Properties: Example and Test</td></tr>
<tr><td>
<a href="set_union.cpp.xml" target="_top">set_union.cpp</a></td><td>
Set Union: Example and Test</td></tr>
<tr><td>
<a href="simple_ad_bthread.cpp.xml" target="_top">simple_ad_bthread.cpp</a></td><td>
A Simple Boost Threading AD: Example and Test</td></tr>
<tr><td>
<a href="simple_ad_openmp.cpp.xml" target="_top">simple_ad_openmp.cpp</a></td><td>
A Simple OpenMP AD: Example and Test</td></tr>
<tr><td>
<a href="simple_ad_pthread.cpp.xml" target="_top">simple_ad_pthread.cpp</a></td><td>
A Simple pthread AD: Example and Test</td></tr>
<tr><td>
<a href="simple_vector.cpp.xml" target="_top">simple_vector.cpp</a></td><td>
Simple Vector Template Class: Example and Test</td></tr>
<tr><td>
<a href="sin.cpp.xml" target="_top">sin.cpp</a></td><td>
The AD sin Function: Example and Test</td></tr>
<tr><td>
<a href="sinh.cpp.xml" target="_top">sinh.cpp</a></td><td>
The AD sinh Function: Example and Test</td></tr>
<tr><td>
<a href="sparse_hes_fun.cpp.xml" target="_top">sparse_hes_fun.cpp</a></td><td>
sparse_hes_fun: Example and test</td></tr>
<tr><td>
<a href="sparse_hessian.cpp.xml" target="_top">sparse_hessian.cpp</a></td><td>
Sparse Hessian: Example and Test</td></tr>
<tr><td>
<a href="sparse_jac_fun.cpp.xml" target="_top">sparse_jac_fun.cpp</a></td><td>
sparse_jac_fun: Example and test</td></tr>
<tr><td>
<a href="sparse_jacobian.cpp.xml" target="_top">sparse_jacobian.cpp</a></td><td>
Sparse Jacobian: Example and Test</td></tr>
<tr><td>
<a href="sparse_sub_hes.cpp.xml" target="_top">sparse_sub_hes.cpp</a></td><td>
Sparse Hessian on Subset of Variables: Example and Test</td></tr>
<tr><td>
<a href="sparsity_sub.cpp.xml" target="_top">sparsity_sub.cpp</a></td><td>
Sparsity Patterns For a Subset of Variables: Example and Test</td></tr>
<tr><td>
<a href="speed_example.cpp.xml" target="_top">speed_example.cpp</a></td><td>
Run the Speed Examples</td></tr>
<tr><td>
<a href="speed_program.cpp.xml" target="_top">speed_program.cpp</a></td><td>
Example Use of SpeedTest</td></tr>
<tr><td>
<a href="speed_test.cpp.xml" target="_top">speed_test.cpp</a></td><td>
speed_test: Example and test</td></tr>
<tr><td>
<a href="sqrt.cpp.xml" target="_top">sqrt.cpp</a></td><td>
The AD sqrt Function: Example and Test</td></tr>
<tr><td>
<a href="stack_machine.cpp.xml" target="_top">stack_machine.cpp</a></td><td>
Example Differentiating a Stack Machine Interpreter</td></tr>
<tr><td>
<a href="sub.cpp.xml" target="_top">sub.cpp</a></td><td>
AD Binary Subtraction: Example and Test</td></tr>
<tr><td>
<a href="sub_eq.cpp.xml" target="_top">sub_eq.cpp</a></td><td>
AD Computed Assignment Subtraction: Example and Test</td></tr>
<tr><td>
<a href="sub_sparse_hes.cpp.xml" target="_top">sub_sparse_hes.cpp</a></td><td>
Computing Sparse Hessian for a Subset of Variables</td></tr>
<tr><td>
<a href="tan.cpp.xml" target="_top">tan.cpp</a></td><td>
The AD tan Function: Example and Test</td></tr>
<tr><td>
<a href="tanh.cpp.xml" target="_top">tanh.cpp</a></td><td>
The AD tanh Function: Example and Test</td></tr>
<tr><td>
<a href="tape_index.cpp.xml" target="_top">tape_index.cpp</a></td><td>
Taping Array Index Operation: Example and Test</td></tr>
<tr><td>
<a href="team_bthread.cpp.xml" target="_top">team_bthread.cpp</a></td><td>
Boost Thread Implementation of a Team of AD Threads</td></tr>
<tr><td>
<a href="team_example.cpp.xml" target="_top">team_example.cpp</a></td><td>
Using a Team of AD Threads: Example and Test</td></tr>
<tr><td>
<a href="team_openmp.cpp.xml" target="_top">team_openmp.cpp</a></td><td>
OpenMP Implementation of a Team of AD Threads</td></tr>
<tr><td>
<a href="team_pthread.cpp.xml" target="_top">team_pthread.cpp</a></td><td>
Pthread Implementation of a Team of AD Threads</td></tr>
<tr><td>
<a href="team_thread.hpp.xml" target="_top">team_thread.hpp</a></td><td>
Specifications for A Team of AD Threads</td></tr>
<tr><td>
<a href="thread_alloc.cpp.xml" target="_top">thread_alloc.cpp</a></td><td>
Fast Multi-Threading Memory Allocator: Example and Test</td></tr>
<tr><td>
<a href="thread_test.cpp.xml" target="_top">thread_test.cpp</a></td><td>
Run Multi-Threading Examples and Speed Tests</td></tr>
<tr><td>
<a href="time_test.cpp.xml" target="_top">time_test.cpp</a></td><td>
time_test: Example and test</td></tr>
<tr><td>
<a href="to_string.cpp.xml" target="_top">to_string.cpp</a></td><td>
to_string: Example and Test</td></tr>
<tr><td>
<a href="unary_minus.cpp.xml" target="_top">unary_minus.cpp</a></td><td>
AD Unary Minus Operator: Example and Test</td></tr>
<tr><td>
<a href="unary_plus.cpp.xml" target="_top">unary_plus.cpp</a></td><td>
AD Unary Plus Operator: Example and Test</td></tr>
<tr><td>
<a href="value.cpp.xml" target="_top">value.cpp</a></td><td>
Convert From AD to its Base Type: Example and Test</td></tr>
<tr><td>
<a href="var2par.cpp.xml" target="_top">var2par.cpp</a></td><td>
Convert an AD Variable to a Parameter: Example and Test</td></tr>
<tr><td>
<a href="vec_ad.cpp.xml" target="_top">vec_ad.cpp</a></td><td>
AD Vectors that Record Index Operations: Example and Test</td></tr>
<tr><td>
<a href="vector_bool.cpp.xml" target="_top">vector_bool.cpp</a></td><td>
CppAD::vectorBool Class: Example and Test</td></tr>
<tr><td>
</td></tr>
</table>

<hr/>Input File: omh/example_list.omh

</body>
</html>
