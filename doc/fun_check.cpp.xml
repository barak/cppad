<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>ADFun Check and Re-Tape: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="ADFun Check and Re-Tape: Example and Test"/>
<meta name="keywords" id="keywords" content=" adfun check re-tape: example test Funcheck Dependent "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_fun_check.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="funcheck.xml" target="_top">Prev</a>
</td><td><a href="check_for_nan.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>FunCheck</option>
<option>fun_check.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADFun-&gt;</option>
<option>record_adfun</option>
<option>drivers</option>
<option>Forward</option>
<option>Reverse</option>
<option>sparsity_pattern</option>
<option>sparse_derivative</option>
<option>optimize</option>
<option>abs_normal</option>
<option>FunCheck</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>FunCheck-&gt;</option>
<option>fun_check.cpp</option>
</select>
</td>
<td>fun_check.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>ADFun Check and Re-Tape: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// define the template function object Fun&lt;Type,Vector&gt; in empty namespace</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Type</span><span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Vector</span><span style="color: #990000">&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Fun</span> <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span>
     <span style="color: #008080">size_t</span> n<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
     <span style="font-style: italic"><span style="color: #9A1900">// function constructor</span></span>
     <span style="font-weight: bold"><span style="color: #000000">Fun</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> n_<span style="color: #990000">)</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #000000">n</span></span><span style="color: #990000">(</span>n_<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// function evaluator</span></span>
     <span style="color: #008080">Vector</span> <span style="font-weight: bold"><span style="color: #0000FF">operator</span></span><span style="color: #990000">()</span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">Vector</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">Vector</span> <span style="font-weight: bold"><span style="color: #000000">y</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// This operaiton sequence depends on x</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">&gt;=</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
                    y<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">exp</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span>i<span style="color: #990000">]);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>     y<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">exp</span></span><span style="color: #990000">(-</span>x<span style="color: #990000">[</span>i<span style="color: #990000">]);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> y<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span><span style="color: #990000">;</span>
<span style="font-style: italic"><span style="color: #9A1900">// template function FunCheckCases&lt;Vector, ADVector&gt; in empty namespace</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Vector</span><span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">ADVector</span><span style="color: #990000">&gt;</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">FunCheckCases</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>ADFun<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>Independent<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> eps99 <span style="color: #990000">=</span> <span style="color: #993399">99.0</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// use the ADFun default constructor</span></span>
     <span style="color: #008080">ADFun&lt;double&gt;</span> f<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="color: #008080">ADVector</span> <span style="font-weight: bold"><span style="color: #000000">X</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     X<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">.;</span>
     X<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and starting recording</span></span>
     <span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>X<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// create function object to use with AD&lt;double&gt;</span></span>
     <span style="color: #008080">Fun&lt; AD&lt;double&gt;, ADVector &gt;</span> <span style="font-weight: bold"><span style="color: #000000">G</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// range space vector</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> n<span style="color: #990000">;</span>
     <span style="color: #008080">ADVector</span> <span style="font-weight: bold"><span style="color: #000000">Y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     Y <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">G</span></span><span style="color: #990000">(</span>X<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// stop tape and store operation sequence in f : X -&gt; Y</span></span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span><span style="color: #990000">(</span>X<span style="color: #990000">,</span> Y<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size_order</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// no implicit forward operation</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// create function object to use with double</span></span>
     <span style="color: #008080">Fun&lt;double, Vector&gt;</span> <span style="font-weight: bold"><span style="color: #000000">g</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// function values should agree when the independent variable</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// values are the same as during recording</span></span>
     <span style="color: #008080">Vector</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="color: #008080">size_t</span> j<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">Value</span></span><span style="color: #990000">(</span>X<span style="color: #990000">[</span>j<span style="color: #990000">]);</span>
     <span style="color: #009900">double</span> r <span style="color: #990000">=</span> eps99<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> a <span style="color: #990000">=</span> eps99<span style="color: #990000">;</span>
     ok      <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">FunCheck</span></span><span style="color: #990000">(</span>f<span style="color: #990000">,</span> g<span style="color: #990000">,</span> x<span style="color: #990000">,</span> a<span style="color: #990000">,</span> r<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// function values should not agree when the independent variable</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// values are the negative of values during recording</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span> <span style="font-weight: bold"><span style="color: #000000">Value</span></span><span style="color: #990000">(</span>X<span style="color: #990000">[</span>j<span style="color: #990000">]);</span>
     ok      <span style="color: #990000">&amp;=</span> <span style="color: #990000">!</span> <span style="font-weight: bold"><span style="color: #000000">FunCheck</span></span><span style="color: #990000">(</span>f<span style="color: #990000">,</span> g<span style="color: #990000">,</span> x<span style="color: #990000">,</span> a<span style="color: #990000">,</span> r<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// re-tape to obtain the new AD of double operation sequence</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          X<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
     <span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>X<span style="color: #990000">);</span>
     Y <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">G</span></span><span style="color: #990000">(</span>X<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// stop tape and store operation sequence in f : X -&gt; Y</span></span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span><span style="color: #990000">(</span>X<span style="color: #990000">,</span> Y<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size_order</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// no implicit forward with this x</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// function values should agree now</span></span>
     ok      <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">FunCheck</span></span><span style="color: #990000">(</span>f<span style="color: #990000">,</span> g<span style="color: #990000">,</span> x<span style="color: #990000">,</span> a<span style="color: #990000">,</span> r<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// End empty namespace</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;vector&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;valarray&gt;</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">FunCheck</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span>                Vector1<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; CppAD::AD&lt;double&gt; &gt;</span> ADVector1<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span>   std<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span>                Vector2<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span>   std<span style="color: #990000">::</span><span style="color: #008080">vector&lt; CppAD::AD&lt;double&gt; &gt;</span> ADVector2<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> std<span style="color: #990000">::</span><span style="color: #008080">valarray&lt;double&gt;</span>                Vector3<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> std<span style="color: #990000">::</span><span style="color: #008080">valarray&lt; CppAD::AD&lt;double&gt; &gt;</span> ADVector3<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// Run with Vector and ADVector equal to three different cases</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// all of which are Simple Vectors with elements of type</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// double and AD&lt;double&gt; respectively.</span></span>
     ok <span style="color: #990000">&amp;=</span> FunCheckCases<span style="color: #990000">&lt;</span> Vector1<span style="color: #990000">,</span> ADVector2 <span style="color: #990000">&gt;();</span>
     ok <span style="color: #990000">&amp;=</span> FunCheckCases<span style="color: #990000">&lt;</span> Vector2<span style="color: #990000">,</span> ADVector3 <span style="color: #990000">&gt;();</span>
     ok <span style="color: #990000">&amp;=</span> FunCheckCases<span style="color: #990000">&lt;</span> Vector3<span style="color: #990000">,</span> ADVector1 <span style="color: #990000">&gt;();</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: example/general/fun_check.cpp

</body>
</html>
