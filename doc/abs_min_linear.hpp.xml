<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>abs_min_linear Source Code</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="abs_min_linear Source Code"/>
<meta name="keywords" id="keywords" content=" abs_min_linear source code "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_abs_min_linear.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="abs_min_linear.cpp.xml" target="_top">Prev</a>
</td><td><a href="min_nso_linear.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>abs_normal</option>
<option>abs_min_linear</option>
<option>abs_min_linear.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>record_adfun</option>
<option>drivers</option>
<option>Forward</option>
<option>Reverse</option>
<option>sparsity_pattern</option>
<option>sparse_derivative</option>
<option>optimize</option>
<option>abs_normal</option>
<option>FunCheck</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>abs_normal-&gt;</option>
<option>abs_normal_fun</option>
<option>abs_print_mat</option>
<option>abs_eval</option>
<option>simplex_method</option>
<option>lp_box</option>
<option>abs_min_linear</option>
<option>min_nso_linear</option>
<option>qp_interior</option>
<option>qp_box</option>
<option>abs_min_quad</option>
<option>min_nso_quad</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>abs_min_linear-&gt;</option>
<option>abs_min_linear.cpp</option>
<option>abs_min_linear.hpp</option>
</select>
</td>
<td>abs_min_linear.hpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>abs_min_linear Source Code</big></big></b></center>
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// BEGIN_CPPAD_NAMESPACE</span></span>

<span style="font-style: italic"><span style="color: #9A1900">// BEGIN PROTOTYPE</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">DblVector</span><span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">SizeVector</span><span style="color: #990000">&gt;</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">abs_min_linear</span></span><span style="color: #990000">(</span>
     <span style="color: #008080">size_t</span>            level   <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>            n       <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>            m       <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>            s       <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> DblVector<span style="color: #990000">&amp;</span>  g_hat   <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> DblVector<span style="color: #990000">&amp;</span>  g_jac   <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> DblVector<span style="color: #990000">&amp;</span>  bound   <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> DblVector<span style="color: #990000">&amp;</span>  epsilon <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> SizeVector<span style="color: #990000">&amp;</span> maxitr  <span style="color: #990000">,</span>
     DblVector<span style="color: #990000">&amp;</span>        delta_x <span style="color: #990000">)</span>
<span style="font-style: italic"><span style="color: #9A1900">// END PROTOTYPE</span></span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>fabs<span style="color: #990000">;</span>
     <span style="color: #009900">bool</span> ok    <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #009900">double</span> inf <span style="color: #990000">=</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">infinity</span></span><span style="color: #990000">();</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          level <span style="color: #990000">&lt;=</span> <span style="color: #993399">4</span><span style="color: #990000">,</span>
          <span style="color: #FF0000">"abs_min_linear: level is not less that or equal 4"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>epsilon<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">,</span>
          <span style="color: #FF0000">"abs_min_linear: size of epsilon not equal to 2"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>maxitr<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">,</span>
          <span style="color: #FF0000">"abs_min_linear: size of maxitr not equal to 2"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          m <span style="color: #990000">==</span> <span style="color: #993399">1</span><span style="color: #990000">,</span>
          <span style="color: #FF0000">"abs_min_linear: m is not equal to 1"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>delta_x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> n<span style="color: #990000">,</span>
          <span style="color: #FF0000">"abs_min_linear: size of delta_x not equal to n"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>bound<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> n<span style="color: #990000">,</span>
          <span style="color: #FF0000">"abs_min_linear: size of bound not equal to n"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>g_hat<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> m <span style="color: #990000">+</span> s<span style="color: #990000">,</span>
          <span style="color: #FF0000">"abs_min_linear: size of g_hat not equal to m + s"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>g_jac<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> <span style="color: #990000">(</span>m <span style="color: #990000">+</span> s<span style="color: #990000">)</span> <span style="color: #990000">*</span> <span style="color: #990000">(</span>n <span style="color: #990000">+</span> s<span style="color: #990000">),</span>
          <span style="color: #FF0000">"abs_min_linear: size of g_jac not equal to (m + s)*(n + s)"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>bound<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> n<span style="color: #990000">,</span>
          <span style="color: #FF0000">"abs_min_linear: size of bound is not equal to n"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> level <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span>cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"start abs_min_linear</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span><span style="color: #990000">;</span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_print_mat</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"bound"</span><span style="color: #990000">,</span> n<span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span> bound<span style="color: #990000">);</span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_print_mat</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"g_hat"</span><span style="color: #990000">,</span> m <span style="color: #990000">+</span> s<span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span> g_hat<span style="color: #990000">);</span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_print_mat</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"g_jac"</span><span style="color: #990000">,</span> m <span style="color: #990000">+</span> s<span style="color: #990000">,</span> n <span style="color: #990000">+</span> s<span style="color: #990000">,</span> g_jac<span style="color: #990000">);</span>

     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial y(x, u) w.r.t x (J in reference)</span></span>
     <span style="color: #008080">DblVector</span> <span style="font-weight: bold"><span style="color: #000000">py_px</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          py_px<span style="color: #990000">[</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> g_jac<span style="color: #990000">[</span> j <span style="color: #990000">];</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial y(x, u) w.r.t u (Y in reference)</span></span>
     <span style="color: #008080">DblVector</span> <span style="font-weight: bold"><span style="color: #000000">py_pu</span></span><span style="color: #990000">(</span>s<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          py_pu<span style="color: #990000">[</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> g_jac<span style="color: #990000">[</span> n <span style="color: #990000">+</span> j <span style="color: #990000">];</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial z(x, u) w.r.t x (Z in reference)</span></span>
     <span style="color: #008080">DblVector</span> <span style="font-weight: bold"><span style="color: #000000">pz_px</span></span><span style="color: #990000">(</span>s <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     pz_px<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> g_jac<span style="color: #990000">[</span> <span style="color: #990000">(</span>n <span style="color: #990000">+</span> s<span style="color: #990000">)</span> <span style="color: #990000">*</span> <span style="color: #990000">(</span>i <span style="color: #990000">+</span> m<span style="color: #990000">)</span> <span style="color: #990000">+</span> j <span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial z(x, u) w.r.t u (L in reference)</span></span>
     <span style="color: #008080">DblVector</span> <span style="font-weight: bold"><span style="color: #000000">pz_pu</span></span><span style="color: #990000">(</span>s <span style="color: #990000">*</span> s<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     pz_pu<span style="color: #990000">[</span> i <span style="color: #990000">*</span> s <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> g_jac<span style="color: #990000">[</span> <span style="color: #990000">(</span>n <span style="color: #990000">+</span> s<span style="color: #990000">)</span> <span style="color: #990000">*</span> <span style="color: #990000">(</span>i <span style="color: #990000">+</span> m<span style="color: #990000">)</span> <span style="color: #990000">+</span> n <span style="color: #990000">+</span> j <span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// initailize delta_x</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          delta_x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// value of approximation for g(x, u) at current delta_x</span></span>
     <span style="color: #008080">DblVector</span> g_tilde <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_eval</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> m<span style="color: #990000">,</span> s<span style="color: #990000">,</span> g_hat<span style="color: #990000">,</span> g_jac<span style="color: #990000">,</span> delta_x<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// value of sigma at delta_x = 0; i.e., sign( z(x, u) )</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">sigma</span></span><span style="color: #990000">(</span>s<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          sigma<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">sign</span></span><span style="color: #990000">(</span> g_tilde<span style="color: #990000">[</span>m <span style="color: #990000">+</span> i<span style="color: #990000">]</span> <span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// current set of cutting planes</span></span>
     <span style="color: #008080">DblVector</span> <span style="font-weight: bold"><span style="color: #000000">C</span></span><span style="color: #990000">(</span>maxitr<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">c</span></span><span style="color: #990000">(</span>maxitr<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="color: #008080">size_t</span> n_plane <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> itr <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> itr <span style="color: #990000">&lt;</span> maxitr<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span> itr<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>
          <span style="font-style: italic"><span style="color: #9A1900">// Equation (5), Propostion 3.1 of reference</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// dy_dx = py_px + py_pu * Sigma * (I - pz_pu * Sigma)^-1 * pz_px</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// tmp_ss = I - pz_pu * Sigma</span></span>
          <span style="color: #008080">DblVector</span> <span style="font-weight: bold"><span style="color: #000000">tmp_ss</span></span><span style="color: #990000">(</span>s <span style="color: #990000">*</span> s<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    tmp_ss<span style="color: #990000">[</span>i <span style="color: #990000">*</span> s <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span> pz_pu<span style="color: #990000">[</span>i <span style="color: #990000">*</span> s <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">*</span> sigma<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
               tmp_ss<span style="color: #990000">[</span>i <span style="color: #990000">*</span> s <span style="color: #990000">+</span> i<span style="color: #990000">]</span> <span style="color: #990000">+=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// tmp_sn = (I - pz_pu * Sigma)^-1 * pz_px</span></span>
          <span style="color: #009900">double</span> logdet<span style="color: #990000">;</span>
          <span style="color: #008080">DblVector</span> <span style="font-weight: bold"><span style="color: #000000">tmp_sn</span></span><span style="color: #990000">(</span>s <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">LuSolve</span></span><span style="color: #990000">(</span>s<span style="color: #990000">,</span> n<span style="color: #990000">,</span> tmp_ss<span style="color: #990000">,</span> pz_px<span style="color: #990000">,</span> tmp_sn<span style="color: #990000">,</span> logdet<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// tmp_sn = Sigma * (I - pz_pu * Sigma)^-1 * pz_px</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    tmp_sn<span style="color: #990000">[</span>i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">*=</span> sigma<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// dy_dx = py_px + py_pu * Sigma * (I - pz_pu * Sigma)^-1 * pz_px</span></span>
          <span style="color: #008080">DblVector</span> <span style="font-weight: bold"><span style="color: #000000">dy_dx</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     dy_dx<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> py_px<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    dy_dx<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">+=</span> py_pu<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> tmp_sn<span style="color: #990000">[</span> k <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// check for case where derivative of hyperplane is zero</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (in convex case, this is the minimizer)</span></span>
          <span style="color: #009900">bool</span> near_zero <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               near_zero <span style="color: #990000">&amp;=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span> dy_dx<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">&lt;</span> epsilon<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> near_zero <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> level <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
                    std<span style="color: #990000">::</span>cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"end abs_min_linear: local derivative near zero</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// value of hyperplane at delta_x</span></span>
          <span style="color: #009900">double</span> plane_at_zero <span style="color: #990000">=</span> g_tilde<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          <span style="font-style: italic"><span style="color: #9A1900">// value of hyperplane at 0</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               plane_at_zero <span style="color: #990000">-=</span> dy_dx<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">*</span> delta_x<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// add a cutting plane with value g_tilde[0] at delta_x</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// and derivative dy_dx</span></span>
          c<span style="color: #990000">[</span>n_plane<span style="color: #990000">]</span> <span style="color: #990000">=</span> plane_at_zero<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               C<span style="color: #990000">[</span>n_plane <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> dy_dx<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          <span style="color: #990000">++</span>n_plane<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// variables for cutting plane problem are (dx, w)</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// c[i] + C[i,:]*dx &lt;= w</span></span>
          <span style="color: #008080">DblVector</span> <span style="font-weight: bold"><span style="color: #000000">b_box</span></span><span style="color: #990000">(</span>n_plane<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">A_box</span></span><span style="color: #990000">(</span>n_plane <span style="color: #990000">*</span> <span style="color: #990000">(</span>n <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">));</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n_plane<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     b_box<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> c<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    A_box<span style="color: #990000">[</span>i <span style="color: #990000">*</span> <span style="color: #990000">(</span>n<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> C<span style="color: #990000">[</span>i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">];</span>
               A_box<span style="color: #990000">[</span>i <span style="color: #990000">*(</span>n<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">+</span> n<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1.0</span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// w is the objective</span></span>
          <span style="color: #008080">DblVector</span> <span style="font-weight: bold"><span style="color: #000000">c_box</span></span><span style="color: #990000">(</span>n <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>c_box<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">());</span> i<span style="color: #990000">++)</span>
               c_box<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
          c_box<span style="color: #990000">[</span>n<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// d_box</span></span>
          <span style="color: #008080">DblVector</span> <span style="font-weight: bold"><span style="color: #000000">d_box</span></span><span style="color: #990000">(</span>n<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               d_box<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> bound<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          d_box<span style="color: #990000">[</span>n<span style="color: #990000">]</span> <span style="color: #990000">=</span> inf<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// solve the cutting plane problem</span></span>
          <span style="color: #008080">DblVector</span> <span style="font-weight: bold"><span style="color: #000000">xout_box</span></span><span style="color: #990000">(</span>n <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> level_box <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> level <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
               level_box <span style="color: #990000">=</span> level <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">lp_box</span></span><span style="color: #990000">(</span>
               level_box<span style="color: #990000">,</span>
               A_box<span style="color: #990000">,</span>
               b_box<span style="color: #990000">,</span>
               c_box<span style="color: #990000">,</span>
               d_box<span style="color: #990000">,</span>
               maxitr<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span>
               xout_box
          <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> ok <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> level <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
               <span style="color: #FF0000">{</span>     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_print_mat</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"delta_x"</span><span style="color: #990000">,</span> n<span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span> delta_x<span style="color: #990000">);</span>
                    std<span style="color: #990000">::</span>cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"end abs_min_linear: lp_box failed</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span><span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// check for convergence</span></span>
          <span style="color: #009900">double</span> max_diff <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #009900">double</span> diff <span style="color: #990000">=</span> delta_x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">-</span> xout_box<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
               max_diff    <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">(</span> max_diff<span style="color: #990000">,</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>diff<span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// check for descent in value of approximation objective</span></span>
          <span style="color: #008080">DblVector</span> <span style="font-weight: bold"><span style="color: #000000">delta_new</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               delta_new<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> xout_box<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          <span style="color: #008080">DblVector</span> g_new <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_eval</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> m<span style="color: #990000">,</span> s<span style="color: #990000">,</span> g_hat<span style="color: #990000">,</span> g_jac<span style="color: #990000">,</span> delta_new<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> level <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span>cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"itr = "</span> <span style="color: #990000">&lt;&lt;</span> itr <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">", max_diff = "</span> <span style="color: #990000">&lt;&lt;</span> max_diff
                    <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">", y_cur = "</span> <span style="color: #990000">&lt;&lt;</span> g_tilde<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">", y_new = "</span> <span style="color: #990000">&lt;&lt;</span> g_new<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>
                    <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span><span style="color: #990000">;</span>
               CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_print_mat</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"delta_new"</span><span style="color: #990000">,</span> n<span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span> delta_new<span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          g_tilde <span style="color: #990000">=</span> g_new<span style="color: #990000">;</span>
          delta_x <span style="color: #990000">=</span> delta_new<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// value of sigma at new delta_x; i.e., sign( z(x, u) )</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               sigma<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">sign</span></span><span style="color: #990000">(</span> g_tilde<span style="color: #990000">[</span>m <span style="color: #990000">+</span> i<span style="color: #990000">]</span> <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> max_diff <span style="color: #990000">&lt;</span> epsilon<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> level <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
                    std<span style="color: #990000">::</span>cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"end abs_min_linear: change in delta_x near zero</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> level <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          std<span style="color: #990000">::</span>cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"end abs_min_linear: maximum number of iterations exceeded</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// END_CPPAD_NAMESPACE</span></span></tt></pre>

<hr/>Input File: example/abs_normal/abs_min_linear.omh

</body>
</html>
