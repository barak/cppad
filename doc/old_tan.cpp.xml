<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Old Tan and Tanh as User Atomic Operations: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Old Tan and Tanh as User Atomic Operations: Example and Test"/>
<meta name="keywords" id="keywords" content=" old tan tanh user atomic operations: example test deprecated 2013-05-27 theory "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_old_tan.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="old_usead_2.cpp.xml" target="_top">Prev</a>
</td><td><a href="old_mat_mul.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>old_atomic</option>
<option>old_tan.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>directory</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>wish_list</option>
<option>whats_new</option>
<option>deprecated</option>
<option>compare_c</option>
<option>numeric_ad</option>
<option>addon</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>deprecated-&gt;</option>
<option>include_deprecated</option>
<option>FunDeprecated</option>
<option>CompareChange</option>
<option>omp_max_thread</option>
<option>TrackNewDel</option>
<option>omp_alloc</option>
<option>memory_leak</option>
<option>epsilon</option>
<option>test_vector</option>
<option>cppad_ipopt_nlp</option>
<option>old_atomic</option>
<option>zdouble</option>
<option>autotools</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>old_atomic-&gt;</option>
<option>old_reciprocal.cpp</option>
<option>old_usead_1.cpp</option>
<option>old_usead_2.cpp</option>
<option>old_tan.cpp</option>
<option>old_mat_mul.cpp</option>
</select>
</td>
<td>old_tan.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Deprecated 2013-05-27</option>
<option>Theory</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Old Tan and Tanh as User Atomic Operations: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Deprecated 2013-05-27" id="Deprecated 2013-05-27">Deprecated 2013-05-27</a></big></b>
<br/>
This example has not deprecated;
see <a href="atomic_tangent.cpp.xml" target="_top"><span style='white-space: nowrap'>atomic_tangent.cpp</span></a>
 instead.

<br/>
<br/>
<b><big><a name="Theory" id="Theory">Theory</a></big></b>
<br/>
The code below uses the <a href="tan_forward.xml" target="_top"><span style='white-space: nowrap'>tan_forward</span></a>
 and <a href="tan_reverse.xml" target="_top"><span style='white-space: nowrap'>tan_reverse</span></a>

to implement the tangent (
<code><i><font color="black"><span style='white-space: nowrap'>id</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;==&#xA0;0</span></font></code>
) and hyperbolic tangent
(
<code><i><font color="black"><span style='white-space: nowrap'>id</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;==&#xA0;1</span></font></code>
) functions as user atomic operations.

<code><font color="blue">
<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// Begin empty namespace</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// a utility to compute the union of two sets.</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>set_union<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// forward mode routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">old_tan_forward</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                   id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                order <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    m <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>      vx <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>           vzy <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>     tx <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>          tzy
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> id <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> <span style="color: #990000">(</span>order<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> tzy<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> <span style="color: #990000">(</span>order<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> m <span style="color: #990000">);</span>

          <span style="color: #008080">size_t</span> n_order <span style="color: #990000">=</span> order <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> order<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> k<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// check if this is during the call to old_tan(id, ax, ay)</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> n <span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vzy<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> m <span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// now setvzy</span></span>
               vzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> vx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               vzy<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> vx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>

          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> j <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// z^{(0)} = tan( x^{(0)} ) or tanh( x^{(0)} )</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
                    tzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">float</span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">tan</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>     tzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">float</span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">tanh</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// y^{(0)} = z^{(0)} * z^{(0)}</span></span>
               tzy<span style="color: #990000">[</span>n_order <span style="color: #990000">+</span> <span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> tzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> tzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
          <span style="color: #FF0000">{</span>     <span style="color: #009900">float</span> j_inv <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span>f <span style="color: #990000">/</span> <span style="color: #009900">float</span><span style="color: #990000">(</span>j<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">)</span>
                    j_inv <span style="color: #990000">=</span> <span style="color: #990000">-</span> j_inv<span style="color: #990000">;</span>

               <span style="font-style: italic"><span style="color: #9A1900">// z^{(j)} = x^{(j)} +- sum_{k=1}^j k x^{(k)} y^{(j-k)} / j</span></span>
               tzy<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> tx<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;=</span> j<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    tzy<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">+=</span> tx<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> tzy<span style="color: #990000">[</span>n_order <span style="color: #990000">+</span> j<span style="color: #990000">-</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> <span style="color: #009900">float</span><span style="color: #990000">(</span>k<span style="color: #990000">)</span> <span style="color: #990000">*</span> j_inv<span style="color: #990000">;</span>

               <span style="font-style: italic"><span style="color: #9A1900">// y^{(j)} = sum_{k=0}^j z^{(k)} z^{(j-k)}</span></span>
               tzy<span style="color: #990000">[</span>n_order <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;=</span> j<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    tzy<span style="color: #990000">[</span>n_order <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">+=</span> tzy<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> tzy<span style="color: #990000">[</span>j<span style="color: #990000">-</span>k<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// All orders are implemented and there are no possible errors</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// reverse mode routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">old_tan_reverse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                   id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                order <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    m <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>     tx <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>    tzy <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>           px <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>    pzy
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> id <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> <span style="color: #990000">(</span>order<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> tzy<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> <span style="color: #990000">(</span>order<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> m <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> px<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> <span style="color: #990000">(</span>order<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> pzy<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> <span style="color: #990000">(</span>order<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> m <span style="color: #990000">);</span>

          <span style="color: #008080">size_t</span> n_order <span style="color: #990000">=</span> order <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> j<span style="color: #990000">,</span> k<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// copy because partials w.r.t. y and z need to change</span></span>
          <span style="color: #008080">vector&lt;float&gt;</span> qzy <span style="color: #990000">=</span> pzy<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// initialize accumultion of reverse mode partials</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               px<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// eliminate positive orders</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> order<span style="color: #990000">;</span> j <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j<span style="color: #990000">--)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #009900">float</span> j_inv <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span>f <span style="color: #990000">/</span> <span style="color: #009900">float</span><span style="color: #990000">(</span>j<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">)</span>
                    j_inv <span style="color: #990000">=</span> <span style="color: #990000">-</span> j_inv<span style="color: #990000">;</span>

               <span style="font-style: italic"><span style="color: #9A1900">// H_{x^{(k)}} += delta(j-k) +- H_{z^{(j)} y^{(j-k)} * k / j</span></span>
               px<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">+=</span> qzy<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;=</span> j<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    px<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">+=</span> qzy<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">*</span> tzy<span style="color: #990000">[</span>n_order <span style="color: #990000">+</span> j<span style="color: #990000">-</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> <span style="color: #009900">float</span><span style="color: #990000">(</span>k<span style="color: #990000">)</span> <span style="color: #990000">*</span> j_inv<span style="color: #990000">;</span>

               <span style="font-style: italic"><span style="color: #9A1900">// H_{y^{j-k)} += +- H_{z^{(j)} x^{(k)} * k / j</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;=</span> j<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    qzy<span style="color: #990000">[</span>n_order <span style="color: #990000">+</span> j<span style="color: #990000">-</span>k<span style="color: #990000">]</span> <span style="color: #990000">+=</span> qzy<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">*</span> tx<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> <span style="color: #009900">float</span><span style="color: #990000">(</span>k<span style="color: #990000">)</span> <span style="color: #990000">*</span> j_inv<span style="color: #990000">;</span>

               <span style="font-style: italic"><span style="color: #9A1900">// H_{z^{(k)}} += H_{y^{(j-1)}} * z^{(j-k-1)} * 2.</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> j<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    qzy<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">+=</span> qzy<span style="color: #990000">[</span>n_order <span style="color: #990000">+</span> j<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> tzy<span style="color: #990000">[</span>j<span style="color: #990000">-</span>k<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> <span style="color: #993399">2</span><span style="color: #990000">.</span>f<span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// eliminate order zero</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
               px<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+=</span> qzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> <span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">.</span>f <span style="color: #990000">+</span> tzy<span style="color: #990000">[</span>n_order <span style="color: #990000">+</span> <span style="color: #993399">0</span><span style="color: #990000">]);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
               px<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+=</span> qzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> <span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">.</span>f <span style="color: #990000">-</span> tzy<span style="color: #990000">[</span>n_order <span style="color: #990000">+</span> <span style="color: #993399">0</span><span style="color: #990000">]);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// forward Jacobian sparsity routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">old_tan_for_jac_sparse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                               id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                m <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     r <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>           s <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> id <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> m <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for z and y are the same as for x</span></span>
          s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// reverse Jacobian sparsity routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">old_tan_rev_jac_sparse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                               id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                m <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>           r <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     s <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> id <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> m <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// note that, if the users code only uses z, and not y,</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// we could just set r[0] = s[0]</span></span>
          r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// reverse Hessian sparsity routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">old_tan_rev_hes_sparse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                               id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                m <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     r <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   s <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                         t <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     u <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>           v <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> id <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> m <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> t<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> u<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> m <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> v<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> n <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// back propagate Jacobian sparsity. If users code only uses z,</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// we could just set t[0] = s[0];</span></span>
          t<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span>  s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">|</span> s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// back propagate Hessian sparsity, ...</span></span>
          v<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>u<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> u<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// convert forward Jacobian sparsity to Hessian sparsity</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// because tan and tanh are nonlinear</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> t<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
               v<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>v<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ---------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Declare the AD&lt;float&gt; routine old_tan(id, ax, ay)</span></span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_ATOMIC</span></span><span style="color: #990000">(</span>
          old_tan                 <span style="color: #990000">,</span>
          CppAD<span style="color: #990000">::</span>vector           <span style="color: #990000">,</span>
          <span style="color: #009900">float</span>                   <span style="color: #990000">,</span>
          old_tan_forward         <span style="color: #990000">,</span>
          old_tan_reverse         <span style="color: #990000">,</span>
          old_tan_for_jac_sparse  <span style="color: #990000">,</span>
          old_tan_rev_jac_sparse  <span style="color: #990000">,</span>
          old_tan_rev_hes_sparse
     <span style="color: #990000">)</span>
<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// End empty namespace</span></span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">old_tan</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
     <span style="color: #009900">float</span> eps <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">.</span>f <span style="color: #990000">*</span> CppAD<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
     <span style="color: #008080">size_t</span> n  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #009900">float</span>  x0 <span style="color: #990000">=</span> <span style="color: #993399">0.5</span><span style="color: #990000">;</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; AD&lt;float&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">ax</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>     <span style="color: #990000">=</span> x0<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and start tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// range space vector</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; AD&lt;float&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">af</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// temporary vector for old_tan computations</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (old_tan computes tan or tanh and its square)</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; AD&lt;float&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">az</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// call user tan function and store tan(x) in f[0] (ignore tan(x)^2)</span></span>
     <span style="color: #008080">size_t</span> id <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">old_tan</span></span><span style="color: #990000">(</span>id<span style="color: #990000">,</span> ax<span style="color: #990000">,</span> az<span style="color: #990000">);</span>
     af<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> az<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// call user tanh function and store tanh(x) in f[1] (ignore tanh(x)^2)</span></span>
     id <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">old_tan</span></span><span style="color: #990000">(</span>id<span style="color: #990000">,</span> ax<span style="color: #990000">,</span> az<span style="color: #990000">);</span>
     af<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> az<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// put a constant in f[2] = tanh(1.) (for sparsity pattern testing)</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; AD&lt;float&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">one</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     one<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     <span style="font-weight: bold"><span style="color: #000000">old_tan</span></span><span style="color: #990000">(</span>id<span style="color: #990000">,</span> one<span style="color: #990000">,</span> az<span style="color: #990000">);</span>
     af<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> az<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// create f: x -&gt; f and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;float&gt;</span> F<span style="color: #990000">;</span>
     F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">,</span> af<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check function value</span></span>
     <span style="color: #009900">float</span> tan <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">tan</span></span><span style="color: #990000">(</span>x0<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>af<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> tan<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     <span style="color: #009900">float</span> tanh <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">tanh</span></span><span style="color: #990000">(</span>x0<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>af<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> tanh<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check zero order forward</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x0<span style="color: #990000">;</span>
     f    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>f<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> tan<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>f<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> tanh<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compute first partial of f w.r.t. x[0] using forward mode</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">dx</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">df</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     dx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     df    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> dx<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compute derivative of tan - tanh using reverse mode</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">w</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">dw</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     w<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     w<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     w<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     dw    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Reverse</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> w<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// tan'(x)   = 1 + tan(x)  * tan(x)</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// tanh'(x)  = 1 - tanh(x) * tanh(x)</span></span>
     <span style="color: #009900">float</span> tanp  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span>f <span style="color: #990000">+</span> tan <span style="color: #990000">*</span> tan<span style="color: #990000">;</span>
     <span style="color: #009900">float</span> tanhp <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span>f <span style="color: #990000">-</span> tanh <span style="color: #990000">*</span> tanh<span style="color: #990000">;</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>df<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> tanp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>df<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> tanhp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dw<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> w<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]*</span>tanp <span style="color: #990000">+</span> w<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]*</span>tanhp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compute second partial of f w.r.t. x[0] using forward mode</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">ddx</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">ddf</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     ddx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     ddf    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">,</span> ddx<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compute second derivative of tan - tanh using reverse mode</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">ddw</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     ddw   <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Reverse</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">,</span> w<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// tan''(x)   = 2 *  tan(x) * tan'(x)</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// tanh''(x)  = - 2 * tanh(x) * tanh'(x)</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Note that second order Taylor coefficient for u half the</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// corresponding second derivative.</span></span>
     <span style="color: #009900">float</span> two    <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="color: #009900">float</span> tanpp  <span style="color: #990000">=</span>   two <span style="color: #990000">*</span> tan <span style="color: #990000">*</span> tanp<span style="color: #990000">;</span>
     <span style="color: #009900">float</span> tanhpp <span style="color: #990000">=</span> <span style="color: #990000">-</span> two <span style="color: #990000">*</span> tanh <span style="color: #990000">*</span> tanhp<span style="color: #990000">;</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>two <span style="color: #990000">*</span> ddf<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> tanpp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>two <span style="color: #990000">*</span> ddf<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> tanhpp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>ddw<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> w<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]*</span>tanp  <span style="color: #990000">+</span> w<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]*</span>tanhp <span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>ddw<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> w<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]*</span>tanpp <span style="color: #990000">+</span> w<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]*</span>tanhpp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Forward mode computation of sparsity pattern for F.</span></span>
     <span style="color: #008080">size_t</span> p <span style="color: #990000">=</span> n<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// user vectorBool because m and n are small</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">r1</span></span><span style="color: #990000">(</span>p<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">s1</span></span><span style="color: #990000">(</span>m <span style="color: #990000">*</span> p<span style="color: #990000">);</span>
     r1<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>            <span style="font-style: italic"><span style="color: #9A1900">// propagate sparsity for x[0]</span></span>
     s1    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">ForSparseJac</span></span><span style="color: #990000">(</span>p<span style="color: #990000">,</span> r1<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>s1<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// f[0] depends on x[0]</span></span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>s1<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// f[1] depends on x[0]</span></span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>s1<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">);</span> <span style="font-style: italic"><span style="color: #9A1900">// f[2] does not depend on x[0]</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// Reverse mode computation of sparsity pattern for F.</span></span>
     <span style="color: #008080">size_t</span> q <span style="color: #990000">=</span> m<span style="color: #990000">;</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">s2</span></span><span style="color: #990000">(</span>q <span style="color: #990000">*</span> m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">r2</span></span><span style="color: #990000">(</span>q <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">// Sparsity pattern for identity matrix</span></span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               s2<span style="color: #990000">[</span>i <span style="color: #990000">*</span> q <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">(</span>i <span style="color: #990000">==</span> j<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     r2   <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseJac</span></span><span style="color: #990000">(</span>q<span style="color: #990000">,</span> s2<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>r2<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// f[0] depends on x[0]</span></span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>r2<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// f[1] depends on x[0]</span></span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>r2<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">);</span> <span style="font-style: italic"><span style="color: #9A1900">// f[2] does not depend on x[0]</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// Hessian sparsity for f[0]</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">s3</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">h</span></span><span style="color: #990000">(</span>p <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
     s3<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     s3<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     s3<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     h    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseHes</span></span><span style="color: #990000">(</span>p<span style="color: #990000">,</span> s3<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>h<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// Hessian is non-zero</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// Hessian sparsity for f[2]</span></span>
     s3<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     s3<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     h    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseHes</span></span><span style="color: #990000">(</span>p<span style="color: #990000">,</span> s3<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>h<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// Hessian is zero</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// check tanh results for a large value of x</span></span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> two<span style="color: #990000">;</span>
     f     <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     tanh  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>f<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> tanh<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     df    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> dx<span style="color: #990000">);</span>
     tanhp <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>df<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> tanhp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Free all temporary work space associated with old_atomic objects.</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (If there are future calls to user atomic functions, they will</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// create new temporary work space.)</span></span>
     CppAD<span style="color: #990000">::</span>user_atomic<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: example/deprecated/old_tan.cpp

</body>
</html>
