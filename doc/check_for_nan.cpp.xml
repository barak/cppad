<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>ADFun Checking For Nan: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="ADFun Checking For Nan: Example and Test"/>
<meta name="keywords" id="keywords" content=" adfun checking nan: example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_check_for_nan.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="check_for_nan.xml" target="_top">Prev</a>
</td><td><a href="preprocessor.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>check_for_nan</option>
<option>check_for_nan.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADFun-&gt;</option>
<option>record_adfun</option>
<option>drivers</option>
<option>Forward</option>
<option>Reverse</option>
<option>sparsity_pattern</option>
<option>sparse_derivative</option>
<option>optimize</option>
<option>abs_normal</option>
<option>FunCheck</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>check_for_nan-&gt;</option>
<option>check_for_nan.cpp</option>
</select>
</td>
<td>check_for_nan.cpp</td>
<td>Headings</td>
</tr></table><br/>


<center><b><big><big>ADFun Checking For Nan: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cctype&gt;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">myhandler</span></span><span style="color: #990000">(</span>
          <span style="color: #009900">bool</span> known       <span style="color: #990000">,</span>
          <span style="color: #009900">int</span>  line        <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span> <span style="color: #990000">*</span>file <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span> <span style="color: #990000">*</span>exp  <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span> <span style="color: #990000">*</span>msg  <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// error handler must not return, so throw an exception</span></span>
          std<span style="color: #990000">::</span><span style="color: #008080">string</span> message <span style="color: #990000">=</span> msg<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">throw</span></span> message<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">check_for_nan</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>string<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> eps <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// replace the default CppAD error handler</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ErrorHandler</span> <span style="font-weight: bold"><span style="color: #000000">info</span></span><span style="color: #990000">(</span>myhandler<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">ax</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">ay</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">2.0</span><span style="color: #990000">;</span>
     ax<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">);</span>
     ay<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">sqrt</span></span><span style="color: #990000">(</span> ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">);</span>
     ay<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">sqrt</span></span><span style="color: #990000">(</span> ax<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">);</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">,</span> ay<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">y</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">2.0</span><span style="color: #990000">;</span>
     x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1.0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// use try / catch because this causes an exception</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (assuming that NDEBUG is not defined)</span></span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">check_for_nan</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">try</span></span> <span style="color: #FF0000">{</span>
          y <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>

<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="font-style: italic"><span style="color: #9A1900">// When compiled with NDEBUG defined,</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// CppAD does not spend time checking for nan.</span></span>
          ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">catch</span></span><span style="color: #990000">(</span>std<span style="color: #990000">::</span><span style="color: #008080">string</span> msg<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="font-style: italic"><span style="color: #9A1900">// get and check size of the independent variable vector</span></span>
          <span style="color: #008080">string</span> pattern <span style="color: #990000">=</span> <span style="color: #FF0000">"vector_size = "</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> start   <span style="color: #990000">=</span> msg<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">find</span></span><span style="color: #990000">(</span>pattern<span style="color: #990000">)</span> <span style="color: #990000">+</span> pattern<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">string</span> number<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> start<span style="color: #990000">;</span> msg<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">!=</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">'</span><span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               number <span style="color: #990000">+=</span> msg<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
          <span style="color: #008080">size_t</span> vector_size <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">atoi</span></span><span style="color: #990000">(</span>number<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">c_str</span></span><span style="color: #990000">());</span>
          ok <span style="color: #990000">&amp;=</span> vector_size <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// get and check first dependent variable index that is nan</span></span>
          pattern <span style="color: #990000">=</span> <span style="color: #FF0000">"index = "</span><span style="color: #990000">;</span>
          start   <span style="color: #990000">=</span> msg<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">find</span></span><span style="color: #990000">(</span>pattern<span style="color: #990000">)</span> <span style="color: #990000">+</span> pattern<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          number  <span style="color: #990000">=</span> <span style="color: #FF0000">""</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> start<span style="color: #990000">;</span> msg<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">!=</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">'</span><span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               number <span style="color: #990000">+=</span> msg<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
          <span style="color: #008080">size_t</span> index <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">atoi</span></span><span style="color: #990000">(</span>number<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">c_str</span></span><span style="color: #990000">());</span>
          ok <span style="color: #990000">&amp;=</span> index <span style="color: #990000">==</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// get the name of the file</span></span>
          pattern <span style="color: #990000">=</span> <span style="color: #FF0000">"file_name = "</span><span style="color: #990000">;</span>
          start   <span style="color: #990000">=</span> msg<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">find</span></span><span style="color: #990000">(</span>pattern<span style="color: #990000">)</span> <span style="color: #990000">+</span> pattern<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">string</span> file_name<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> start<span style="color: #990000">;</span> msg<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">!=</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">'</span><span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               file_name <span style="color: #990000">+=</span> msg<span style="color: #990000">[</span>i<span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// get and check independent variable vector that resulted in the nan</span></span>
          CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">vec</span></span><span style="color: #990000">(</span>vector_size<span style="color: #990000">);</span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">get_check_for_nan</span></span><span style="color: #990000">(</span>vec<span style="color: #990000">,</span> file_name<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> vector_size<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               ok <span style="color: #990000">&amp;=</span> vec<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">==</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// now do calculation without an exception</span></span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">check_for_nan</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">);</span>
     y <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">sqrt</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]),</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">isnan</span></span><span style="color: #990000">(</span> y<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: example/general/check_for_nan.cpp

</body>
</html>
