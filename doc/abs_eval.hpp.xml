<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>abs_eval Source Code</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="abs_eval Source Code"/>
<meta name="keywords" id="keywords" content=" abs_eval source code "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_abs_eval.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="abs_eval.cpp.xml" target="_top">Prev</a>
</td><td><a href="simplex_method.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>abs_normal</option>
<option>abs_eval</option>
<option>abs_eval.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>record_adfun</option>
<option>drivers</option>
<option>Forward</option>
<option>Reverse</option>
<option>sparsity_pattern</option>
<option>sparse_derivative</option>
<option>optimize</option>
<option>abs_normal</option>
<option>FunCheck</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>abs_normal-&gt;</option>
<option>abs_normal_fun</option>
<option>abs_print_mat</option>
<option>abs_eval</option>
<option>simplex_method</option>
<option>lp_box</option>
<option>abs_min_linear</option>
<option>min_nso_linear</option>
<option>qp_interior</option>
<option>qp_box</option>
<option>abs_min_quad</option>
<option>min_nso_quad</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>abs_eval-&gt;</option>
<option>abs_eval.cpp</option>
<option>abs_eval.hpp</option>
</select>
</td>
<td>abs_eval.hpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>abs_eval Source Code</big></big></b></center>
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// BEGIN_CPPAD_NAMESPACE</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// BEGIN PROTOTYPE</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Vector</span><span style="color: #990000">&gt;</span>
<span style="color: #008080">Vector</span> <span style="font-weight: bold"><span style="color: #000000">abs_eval</span></span><span style="color: #990000">(</span>
     <span style="color: #008080">size_t</span>        n       <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>        m       <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>        s       <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span> g_hat   <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span> g_jac   <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span> delta_x <span style="color: #990000">)</span>
<span style="font-style: italic"><span style="color: #9A1900">// END PROTOTYPE</span></span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>fabs<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>delta_x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> n<span style="color: #990000">,</span>
          <span style="color: #FF0000">"abs_eval: size of delta_x not equal to n"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>g_hat<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> m <span style="color: #990000">+</span> s<span style="color: #990000">,</span>
          <span style="color: #FF0000">"abs_eval: size of g_hat not equal to m + s"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>g_jac<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> <span style="color: #990000">(</span>m <span style="color: #990000">+</span> s<span style="color: #990000">)</span> <span style="color: #990000">*</span> <span style="color: #990000">(</span>n <span style="color: #990000">+</span> s<span style="color: #990000">),</span>
          <span style="color: #FF0000">"abs_eval: size of g_jac not equal to (m + s)*(n + s)"</span>
     <span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
     <span style="font-style: italic"><span style="color: #9A1900">// Check that partial_u z(x, u) is strictly lower triangular</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> i<span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// index in g_jac of partial of z_i w.r.t u_j</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// (note that g_jac has n + s elements in each row)</span></span>
               <span style="color: #008080">size_t</span> index <span style="color: #990000">=</span> <span style="color: #990000">(</span>m <span style="color: #990000">+</span> i<span style="color: #990000">)</span> <span style="color: #990000">*</span> <span style="color: #990000">(</span>n <span style="color: #990000">+</span> s<span style="color: #990000">)</span> <span style="color: #990000">+</span> <span style="color: #990000">(</span>n <span style="color: #990000">+</span> j<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
                    g_jac<span style="color: #990000">[</span>index<span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">0.0</span><span style="color: #990000">,</span>
                    <span style="color: #FF0000">"abs_eval: partial z_i w.r.t u_j non-zero for i &lt;= j"</span>
               <span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// return value</span></span>
     <span style="color: #008080">Vector</span> <span style="font-weight: bold"><span style="color: #000000">g_tilde</span></span><span style="color: #990000">(</span>m <span style="color: #990000">+</span> s<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// compute z_tilde, the last s components of g_tilde</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// start at z_hat_i</span></span>
          g_tilde<span style="color: #990000">[</span>m <span style="color: #990000">+</span> i<span style="color: #990000">]</span> <span style="color: #990000">=</span> g_hat<span style="color: #990000">[</span>m <span style="color: #990000">+</span> i<span style="color: #990000">];</span>
          <span style="font-style: italic"><span style="color: #9A1900">// contribution for change x</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// index in g_jac of partial of z_i w.r.t x_j</span></span>
               <span style="color: #008080">size_t</span> index <span style="color: #990000">=</span> <span style="color: #990000">(</span>m <span style="color: #990000">+</span> i<span style="color: #990000">)</span> <span style="color: #990000">*</span> <span style="color: #990000">(</span>n <span style="color: #990000">+</span> s<span style="color: #990000">)</span> <span style="color: #990000">+</span> j<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// add contribution for delta_x_j to z_tilde_i</span></span>
               g_tilde<span style="color: #990000">[</span>m <span style="color: #990000">+</span> i<span style="color: #990000">]</span> <span style="color: #990000">+=</span> g_jac<span style="color: #990000">[</span>index<span style="color: #990000">]</span> <span style="color: #990000">*</span> delta_x<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// contribution for change in u_j for j &lt; i</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> i<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// approixmation for change in absolute value</span></span>
               <span style="color: #009900">double</span> delta_a_j <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>g_tilde<span style="color: #990000">[</span>m <span style="color: #990000">+</span> j<span style="color: #990000">])</span> <span style="color: #990000">-</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>g_hat<span style="color: #990000">[</span>m <span style="color: #990000">+</span> j<span style="color: #990000">]);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// index in g_jac of partial of z_i w.r.t u_j</span></span>
               <span style="color: #008080">size_t</span> index <span style="color: #990000">=</span> <span style="color: #990000">(</span>m <span style="color: #990000">+</span> i<span style="color: #990000">)</span> <span style="color: #990000">*</span> <span style="color: #990000">(</span>n <span style="color: #990000">+</span> s<span style="color: #990000">)</span> <span style="color: #990000">+</span> n <span style="color: #990000">+</span> j<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// add constribution for delta_a_j to s_tilde_i</span></span>
               g_tilde<span style="color: #990000">[</span>m <span style="color: #990000">+</span> i<span style="color: #990000">]</span> <span style="color: #990000">+=</span> g_jac<span style="color: #990000">[</span>index<span style="color: #990000">]</span> <span style="color: #990000">*</span> delta_a_j<span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// compute y_tilde, the first m components of g_tilde</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// start at y_hat_i</span></span>
          g_tilde<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> g_hat<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
          <span style="font-style: italic"><span style="color: #9A1900">// contribution for change x</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// index in g_jac of partial of y_i w.r.t x_j</span></span>
               <span style="color: #008080">size_t</span> index <span style="color: #990000">=</span> i <span style="color: #990000">*</span> <span style="color: #990000">(</span>n <span style="color: #990000">+</span> s<span style="color: #990000">)</span> <span style="color: #990000">+</span> j<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// add contribution for delta_x_j to y_tilde_i</span></span>
               g_tilde<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">+=</span> g_jac<span style="color: #990000">[</span>index<span style="color: #990000">]</span> <span style="color: #990000">*</span> delta_x<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// contribution for change in u_j</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// approximation for change in absolute value</span></span>
               <span style="color: #009900">double</span> delta_a_j <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>g_tilde<span style="color: #990000">[</span>m <span style="color: #990000">+</span> j<span style="color: #990000">])</span> <span style="color: #990000">-</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>g_hat<span style="color: #990000">[</span>m <span style="color: #990000">+</span> j<span style="color: #990000">]);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// index in g_jac of partial of y_i w.r.t u_j</span></span>
               <span style="color: #008080">size_t</span> index <span style="color: #990000">=</span> i <span style="color: #990000">*</span> <span style="color: #990000">(</span>n <span style="color: #990000">+</span> s<span style="color: #990000">)</span> <span style="color: #990000">+</span> n <span style="color: #990000">+</span> j<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// add constribution for delta_a_j to s_tilde_i</span></span>
               g_tilde<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">+=</span> g_jac<span style="color: #990000">[</span>index<span style="color: #990000">]</span> <span style="color: #990000">*</span> delta_a_j<span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> g_tilde<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// END_CPPAD_NAMESPACE</span></span></tt></pre>

<hr/>Input File: example/abs_normal/abs_eval.omh

</body>
</html>
