<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Printing During Forward Mode: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Printing During Forward Mode: Example and Test"/>
<meta name="keywords" id="keywords" content=" printing during forward mode: example test mode print running source code output "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_print_for_cout.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="printfor.xml" target="_top">Prev</a>
</td><td><a href="print_for_string.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>Convert</option>
<option>PrintFor</option>
<option>print_for_cout.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>ad_ctor</option>
<option>ad_assign</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Convert-&gt;</option>
<option>Value</option>
<option>Integer</option>
<option>ad_to_string</option>
<option>ad_input</option>
<option>ad_output</option>
<option>PrintFor</option>
<option>Var2Par</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>PrintFor-&gt;</option>
<option>print_for_cout.cpp</option>
<option>print_for_string.cpp</option>
</select>
</td>
<td>print_for_cout.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Running</option>
<option>Source Code</option>
<option>Output</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>Printing During Forward Mode: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Running" id="Running">Running</a></big></b>
<br/>
To build this program and run its correctness test see <a href="cmake_check.xml" target="_top"><span style='white-space: nowrap'>cmake_check</span></a>
.

<br/>
<br/>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>cout<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>endl<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// use of PrintFor to check for invalid function arguments</span></span>
     <span style="color: #008080">AD&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">check_log</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> y<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// check during recording</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> y <span style="color: #990000">&lt;=</span> <span style="color: #993399">0</span><span style="color: #990000">.</span> <span style="color: #990000">)</span>
               cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"check_log: y = "</span> <span style="color: #990000">&lt;&lt;</span> y <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">" is &lt;= 0"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// check during zero order forward calculation</span></span>
          <span style="font-weight: bold"><span style="color: #000000">PrintFor</span></span><span style="color: #990000">(</span>y<span style="color: #990000">,</span> <span style="color: #FF0000">"check_log: y == "</span><span style="color: #990000">,</span> y <span style="color: #990000">,</span> <span style="color: #FF0000">" which is &lt;= 0</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span><span style="color: #990000">);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span>y<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">print_for</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>PrintFor<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// independent variable vector</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">ax</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     <span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// print a VecAD&lt;double&gt;::reference object that is a parameter</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">VecAD&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">av</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     <span style="color: #008080">AD&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">Zero</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     av<span style="color: #990000">[</span>Zero<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     <span style="font-weight: bold"><span style="color: #000000">PrintFor</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"v[0] = "</span><span style="color: #990000">,</span> av<span style="color: #990000">[</span>Zero<span style="color: #990000">]);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Print a newline to separate this from previous output,</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// then print an AD&lt;double&gt; object that is a variable.</span></span>
     <span style="font-weight: bold"><span style="color: #000000">PrintFor</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">v[0] + x[0] = "</span><span style="color: #990000">,</span> av<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// A conditional print that will not generate output when x[0] = 2.</span></span>
     <span style="font-weight: bold"><span style="color: #000000">PrintFor</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> <span style="color: #FF0000">"</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">  2. + x[0] = "</span><span style="color: #990000">,</span>   <span style="color: #993399">2</span><span style="color: #990000">.</span> <span style="color: #990000">+</span> ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> <span style="color: #FF0000">"</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// A conditional print that will generate output when x[0] = 2.</span></span>
     <span style="font-weight: bold"><span style="color: #000000">PrintFor</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">-</span> <span style="color: #993399">2</span><span style="color: #990000">.,</span> <span style="color: #FF0000">"</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">  3. + x[0] = "</span><span style="color: #990000">,</span>   <span style="color: #993399">3</span><span style="color: #990000">.</span> <span style="color: #990000">+</span> ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> <span style="color: #FF0000">"</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// A log evaluations that will result in an error message when x[0] = 2.</span></span>
     <span style="color: #008080">AD&lt;double&gt;</span> var     <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">.</span> <span style="color: #990000">-</span> ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
     <span style="color: #008080">AD&lt;double&gt;</span> log_var <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">check_log</span></span><span style="color: #990000">(</span>var<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// dependent variable vector</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">ay</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     ay<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> av<span style="color: #990000">[</span>Zero<span style="color: #990000">]</span> <span style="color: #990000">+</span> ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// define f: x -&gt; y and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">,</span> ay<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// zero order forward with x[0] = 2</span></span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">.;</span>

     cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"v[0] = 0"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
     cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"v[0] + x[0] = 2"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
     cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"  3. + x[0] = 5"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
     cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"check_log: y == 0 which is &lt;= 0"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ./makefile.am expects "Test passes" at beginning of next output line</span></span>
     cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"Test passes if four lines above repeat below:"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="color: #009900">int</span> <span style="font-weight: bold"><span style="color: #000000">main</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">print_for</span></span><span style="color: #990000">();</span>

     <span style="color: #008080">size_t</span> thread<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>thread <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> thread <span style="color: #990000">&lt;</span> <span style="color: #993399">2</span><span style="color: #990000">;</span> thread<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span>omp_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">inuse</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span>omp_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">available</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> ok <span style="color: #990000">)</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Output" id="Output">Output</a></big></b>
<br/>
Executing the program above generates the following output:
<code><font color='blue'><pre style='display:inline'> 
     v[0] = 0
     v[0] + x[0] = 2
     Test passes if two lines above repeat below:
     v[0] = 0
     v[0] + x[0] = 2
</pre></font></code>

<hr/>Input File: print_for/print_for.cpp

</body>
</html>
