<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Run Multi-Threading Examples and Speed Tests</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Run Multi-Threading Examples and Speed Tests"/>
<meta name="keywords" id="keywords" content=" run multi-threading examples speed tests thread_test multi openmp pthread bthread syntax running threading purpose a11c simple_ad team_example harmonic test_time max_threads mega_sum multi_newton num_zero num_sub num_sum use_ad team implementations source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_thread_test.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="parallel_ad.xml" target="_top">Prev</a>
</td><td><a href="a11c_openmp.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
<option>simple_ad_openmp.cpp</option>
<option>simple_ad_bthread.cpp</option>
<option>simple_ad_pthread.cpp</option>
<option>team_example.cpp</option>
<option>harmonic.cpp</option>
<option>multi_newton.cpp</option>
<option>team_thread.hpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Running Tests</option>
<option>---..threading</option>
<option>Purpose</option>
<option>a11c</option>
<option>simple_ad</option>
<option>team_example</option>
<option>harmonic</option>
<option>---..test_time</option>
<option>---..max_threads</option>
<option>---..mega_sum</option>
<option>multi_newton</option>
<option>---..test_time</option>
<option>---..max_threads</option>
<option>---..num_zero</option>
<option>---..num_sub</option>
<option>---..num_sum</option>
<option>---..use_ad</option>
<option>Team Implementations</option>
<option>Source</option>
</select>
</td>
</tr></table><br/>





<center><b><big><big>Run Multi-Threading Examples and Speed Tests</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><font color="blue"><span style='white-space: nowrap'>./multi_thread_</span></font><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;a11c<br/>
./multi_thread_</span></font><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;simple_ad<br/>
./multi_thread_</span></font><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;team_example<br/>
./multi_thread_</span></font><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;harmonic&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>test_time</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>max_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>mega_sum</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
./multi_thread_</span></font><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;multi_newton&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>test_time</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>max_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;\<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_zero</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sum</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>use_ad</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
<br/>
<b><big><a name="Running Tests" id="Running Tests">Running Tests</a></big></b>
<br/>
You can build this program and run the default version of its test
parameters by executing the following commands:

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;cd&#xA0;multi_thread<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;make&#xA0;test<br/>
</span></font></code>
After this operation you can run the syntax above
for the different valid values of 
<code><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i></code>
:

<br/>
<br/>
<b><a name="Running Tests.threading" id="Running Tests.threading">threading</a></b>
<br/>
If the <a href="cmake.xml" target="_top"><span style='white-space: nowrap'>cmake</span></a>
 command output indicates that
<code><font color="blue">openmp</font></code> is supported by your system,
you can execute the syntax above with

<code><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i></code>
 equal to <code><font color="blue">openmp</font></code>.
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>If the <a href="cmake.xml" target="_top"><span style='white-space: nowrap'>cmake</span></a>
 command output indicates that
<code><font color="blue">pthreads</font></code> with barriers is supported by your system,
you can execute the syntax above with

<code><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i></code>
 equal to <code><font color="blue">pthread</font></code>.
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>If the <a href="cmake.xml" target="_top"><span style='white-space: nowrap'>cmake</span></a>
 command output indicates that
<code><font color="blue">boost</font></code> threads is supported is by your system,
you can execute the syntax above with

<code><i><font color="black"><span style='white-space: nowrap'>threading</span></font></i></code>
 equal to <code><font color="blue">bthread</font></code>.


<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
Runs the CppAD multi-threading examples and timing tests:



<br/>
<br/>
<b><big><a name="a11c" id="a11c">a11c</a></big></b>
<br/>
The examples
<a href="a11c_openmp.cpp.xml" target="_top"><span style='white-space: nowrap'>a11c_openmp.cpp</span></a>
,
<a href="a11c_bthread.cpp.xml" target="_top"><span style='white-space: nowrap'>a11c_bthread.cpp</span></a>
, and
<a href="a11c_pthread.cpp.xml" target="_top"><span style='white-space: nowrap'>a11c_pthread.cpp</span></a>

demonstrate simple multi-threading,
without algorithmic differentiation.

<br/>
<br/>
<b><big><a name="simple_ad" id="simple_ad">simple_ad</a></big></b>
<br/>
The examples
<a href="simple_ad_openmp.cpp.xml" target="_top"><span style='white-space: nowrap'>simple_ad_openmp.cpp</span></a>
,
<a href="simple_ad_bthread.cpp.xml" target="_top"><span style='white-space: nowrap'>simple_ad_bthread.cpp</span></a>
,
and
<a href="simple_ad_pthread.cpp.xml" target="_top"><span style='white-space: nowrap'>simple_ad_pthread.cpp</span></a>

demonstrate simple multi-threading,
with algorithmic differentiation, using
OpenMP, boost threads and pthreads respectively.

<br/>
<br/>
<b><big><a name="team_example" id="team_example">team_example</a></big></b>
<br/>
The <a href="team_example.cpp.xml" target="_top"><span style='white-space: nowrap'>team_example.cpp</span></a>
 routine
demonstrates simple multi-threading with algorithmic differentiation
and using a <a href="team_thread.hpp.xml" target="_top"><span style='white-space: nowrap'>team&#xA0;of&#xA0;threads</span></a>
.

<br/>
<br/>
<b><big><a name="harmonic" id="harmonic">harmonic</a></big></b>
<br/>
The <a href="harmonic_time.cpp.xml" target="_top"><span style='white-space: nowrap'>harmonic_time.cpp</span></a>
 routine
preforms a timing test for a multi-threading
example without algorithmic differentiation using a team of threads.

<br/>
<br/>
<b><a name="harmonic.test_time" id="harmonic.test_time">test_time</a></b>
<br/>
Is the minimum amount of wall clock time that the test should take.
The number of repeats for the test will be increased until this time
is reached.
The reported time is the total wall clock time divided by the
number of repeats.

<br/>
<br/>
<b><a name="harmonic.max_threads" id="harmonic.max_threads">max_threads</a></b>
<br/>
If the argument 
<code><i><font color="black"><span style='white-space: nowrap'>max_threads</span></font></i></code>
 is a non-negative integer specifying
the maximum number of threads to use for the test.
The specified test is run with the following number of threads:

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;0&#xA0;,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>max_threads</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
The value of zero corresponds to not using the multi-threading system.

<br/>
<br/>
<b><a name="harmonic.mega_sum" id="harmonic.mega_sum">mega_sum</a></b>
<br/>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>mega_sum</span></font></i></code>

is an integer greater than or equal one and has the same meaning as in
<a href="harmonic_time.cpp.xml#mega_sum" target="_top"><span style='white-space: nowrap'>harmonic_time.cpp</span></a>
.

<br/>
<br/>
<b><big><a name="multi_newton" id="multi_newton">multi_newton</a></big></b>
<br/>
The <a href="multi_newton_time.cpp.xml" target="_top"><span style='white-space: nowrap'>multi_newton_time.cpp</span></a>
 routine
preforms a timing test for a multi-threading
example with algorithmic differentiation using a team of threads.

<br/>
<br/>
<b><a name="multi_newton.test_time" id="multi_newton.test_time">test_time</a></b>
<br/>
Is the minimum amount of wall clock time that the test should take.
The number of repeats for the test will be increased until this time
is reached.
The reported time is the total wall clock time divided by the
number of repeats.

<br/>
<br/>
<b><a name="multi_newton.max_threads" id="multi_newton.max_threads">max_threads</a></b>
<br/>
If the argument 
<code><i><font color="black"><span style='white-space: nowrap'>max_threads</span></font></i></code>
 is a non-negative integer specifying
the maximum number of threads to use for the test.
The specified test is run with the following number of threads:

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;0&#xA0;,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>max_threads</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
The value of zero corresponds to not using the multi-threading system.

<br/>
<br/>
<b><a name="multi_newton.num_zero" id="multi_newton.num_zero">num_zero</a></b>
<br/>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>num_zero</span></font></i></code>

is an integer greater than or equal two and has the same meaning as in
<a href="multi_newton_time.cpp.xml#num_zero" target="_top"><span style='white-space: nowrap'>multi_newton_time.cpp</span></a>
.

<br/>
<br/>
<b><a name="multi_newton.num_sub" id="multi_newton.num_sub">num_sub</a></b>
<br/>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i></code>

is an integer greater than or equal one and has the same meaning as in
<a href="multi_newton_time.cpp.xml#num_sub" target="_top"><span style='white-space: nowrap'>multi_newton_time.cpp</span></a>
.

<br/>
<br/>
<b><a name="multi_newton.num_sum" id="multi_newton.num_sum">num_sum</a></b>
<br/>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>num_sum</span></font></i></code>

is an integer greater than or equal one and has the same meaning as in
<a href="multi_newton_time.cpp.xml#num_sum" target="_top"><span style='white-space: nowrap'>multi_newton_time.cpp</span></a>
.

<br/>
<br/>
<b><a name="multi_newton.use_ad" id="multi_newton.use_ad">use_ad</a></b>
<br/>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>use_ad</span></font></i></code>
 is either
<code><font color="blue">true</font></code> or <code><font color="blue">false</font></code> and has the same meaning as in
<a href="multi_newton_time.cpp.xml#use_ad" target="_top"><span style='white-space: nowrap'>multi_newton_time.cpp</span></a>
.

<br/>
<br/>
<b><big><a name="Team Implementations" id="Team Implementations">Team Implementations</a></big></b>
<br/>
The following routines are used to implement the specific threading
systems through the common interface <a href="team_thread.hpp.xml" target="_top"><span style='white-space: nowrap'>team_thread.hpp</span></a>
:
<table><tr><td align='left'  valign='top'>

<a href="team_openmp.cpp.xml" target="_top">team_openmp.cpp</a></td><td>
OpenMP Implementation of a Team of AD Threads</td></tr>
<tr><td>

<a href="team_bthread.cpp.xml" target="_top">team_bthread.cpp</a></td><td>
Boost Thread Implementation of a Team of AD Threads</td></tr>
<tr><td>

<a href="team_pthread.cpp.xml" target="_top">team_pthread.cpp</a></td><td>
Pthread Implementation of a Team of AD Threads</td></tr>
<tr><td>

</td></tr>
</table>
<br/>
<b><big><a name="Source" id="Source">Source</a></big></b>

<code><font color="blue">
<pre><tt>

<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cmath&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cstring&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;ctime&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"team_thread.hpp"</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"team_example.hpp"</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"harmonic_time.hpp"</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"multi_newton_time.hpp"</span>

<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">a11c</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">simple_ad</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">);</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="color: #008080">size_t</span> <span style="font-weight: bold"><span style="color: #000000">arg2size_t</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span><span style="color: #990000">*</span> arg       <span style="color: #990000">,</span>
          <span style="color: #009900">int</span> limit             <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span><span style="color: #990000">*</span> error_msg <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">int</span> i <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">atoi</span></span><span style="color: #990000">(</span>arg<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i <span style="color: #990000">&gt;=</span> limit <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
          std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"value = "</span> <span style="color: #990000">&lt;&lt;</span> i <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span>endl<span style="color: #990000">;</span>
          std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> error_msg <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span>endl<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">exit</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     <span style="color: #009900">double</span> <span style="font-weight: bold"><span style="color: #000000">arg2double</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span><span style="color: #990000">*</span> arg       <span style="color: #990000">,</span>
          <span style="color: #009900">double</span> limit          <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span><span style="color: #990000">*</span> error_msg <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">double</span> d <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">atof</span></span><span style="color: #990000">(</span>arg<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> d <span style="color: #990000">&gt;=</span> limit <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> d<span style="color: #990000">;</span>
          std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"value = "</span> <span style="color: #990000">&lt;&lt;</span> d <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span>endl<span style="color: #990000">;</span>
          std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> error_msg <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span>endl<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">exit</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">int</span> <span style="font-weight: bold"><span style="color: #000000">main</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> argc<span style="color: #990000">,</span> <span style="color: #009900">char</span> <span style="color: #990000">*</span>argv<span style="color: #990000">[])</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">;</span>
     <span style="color: #009900">bool</span> ok         <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>cout<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>endl<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// commnd line usage message</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span><span style="color: #990000">*</span> usage <span style="color: #990000">=</span>
     <span style="color: #FF0000">"./&lt;thread&gt;_test a11c</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span>
     <span style="color: #FF0000">"./&lt;thread&gt;_test simple_ad</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span>
     <span style="color: #FF0000">"./&lt;thread&gt;_test team_example</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span>
     <span style="color: #FF0000">"./&lt;thread&gt;_test harmonic    test_time max_threads mega_sum</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span>
     <span style="color: #FF0000">"./&lt;thread&gt;_test multi_newton test_time max_threads</span><span style="color: #CC33CC">\\\n</span><span style="color: #FF0000">"</span>
     <span style="color: #FF0000">"     num_zero num_sub num_sum use_ad</span><span style="color: #CC33CC">\\\n</span><span style="color: #FF0000">"</span>
     <span style="color: #FF0000">"where &lt;thread&gt; is bthread, openmp, or pthread"</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// command line argument values (assign values to avoid compiler warnings)</span></span>
     <span style="color: #008080">size_t</span> num_zero<span style="color: #990000">=</span><span style="color: #993399">0</span><span style="color: #990000">,</span> num_sub<span style="color: #990000">=</span><span style="color: #993399">0</span><span style="color: #990000">,</span> num_sum<span style="color: #990000">=</span><span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="color: #009900">bool</span> use_ad<span style="color: #990000">=</span><span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// put the date and time in the output file</span></span>
     std<span style="color: #990000">::</span><span style="color: #008080">time_t</span> rawtime<span style="color: #990000">;</span>
     std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">time</span></span><span style="color: #990000">(</span> <span style="color: #990000">&amp;</span>rawtime <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span><span style="color: #990000">*</span> gmt <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">asctime</span></span><span style="color: #990000">(</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">gmtime</span></span><span style="color: #990000">(</span> <span style="color: #990000">&amp;</span>rawtime <span style="color: #990000">)</span> <span style="color: #990000">);</span>
     <span style="color: #008080">size_t</span> len <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">strlen</span></span><span style="color: #990000">(</span>gmt<span style="color: #990000">)</span> <span style="color: #990000">);</span>
     cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"gmtime        = '"</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> len<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> gmt<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">!=</span> <span style="color: #FF0000">'</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">'</span> <span style="color: #990000">)</span> cout <span style="color: #990000">&lt;&lt;</span> gmt<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
     cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"';"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// CppAD version number</span></span>
     cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"cppad_version = '"</span> <span style="color: #990000">&lt;&lt;</span> CPPAD_PACKAGE_STRING <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"';"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// put the team name in the output file</span></span>
     cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"team_name     = '"</span> <span style="color: #990000">&lt;&lt;</span> <span style="font-weight: bold"><span style="color: #000000">team_name</span></span><span style="color: #990000">()</span> <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"';"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// print command line as valid matlab/octave</span></span>
     cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"command       = '"</span> <span style="color: #990000">&lt;&lt;</span> argv<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> i <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> argc<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">" "</span> <span style="color: #990000">&lt;&lt;</span> argv<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
     cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"';"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>

     ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span><span style="color: #990000">*</span> test_name <span style="color: #990000">=</span> <span style="color: #FF0000">""</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> argc <span style="color: #990000">&gt;</span> <span style="color: #993399">1</span> <span style="color: #990000">)</span>
          test_name <span style="color: #990000">=</span> <span style="color: #990000">*++</span>argv<span style="color: #990000">;</span>
     <span style="color: #009900">bool</span> run_a11c         <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">strcmp</span></span><span style="color: #990000">(</span>test_name<span style="color: #990000">,</span> <span style="color: #FF0000">"a11c"</span><span style="color: #990000">)</span>         <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="color: #009900">bool</span> run_simple_ad    <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">strcmp</span></span><span style="color: #990000">(</span>test_name<span style="color: #990000">,</span> <span style="color: #FF0000">"simple_ad"</span><span style="color: #990000">)</span>    <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="color: #009900">bool</span> run_team_example <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">strcmp</span></span><span style="color: #990000">(</span>test_name<span style="color: #990000">,</span> <span style="color: #FF0000">"team_example"</span><span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="color: #009900">bool</span> run_harmonic     <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">strcmp</span></span><span style="color: #990000">(</span>test_name<span style="color: #990000">,</span> <span style="color: #FF0000">"harmonic"</span><span style="color: #990000">)</span>     <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="color: #009900">bool</span> run_multi_newton <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">strcmp</span></span><span style="color: #990000">(</span>test_name<span style="color: #990000">,</span> <span style="color: #FF0000">"multi_newton"</span><span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> run_a11c <span style="color: #990000">||</span> run_simple_ad <span style="color: #990000">||</span> run_team_example <span style="color: #990000">)</span>
          ok <span style="color: #990000">=</span> <span style="color: #990000">(</span>argc <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> run_harmonic <span style="color: #990000">)</span>
          ok <span style="color: #990000">=</span> <span style="color: #990000">(</span>argc <span style="color: #990000">==</span> <span style="color: #993399">5</span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> run_multi_newton <span style="color: #990000">)</span>
          ok <span style="color: #990000">=</span> <span style="color: #990000">(</span>argc <span style="color: #990000">==</span> <span style="color: #993399">8</span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> ok <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"test_name     = "</span> <span style="color: #990000">&lt;&lt;</span> test_name <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
          std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"argc          = "</span> <span style="color: #990000">&lt;&lt;</span> argc      <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
          std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> usage <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">exit</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> run_a11c <span style="color: #990000">||</span> run_simple_ad <span style="color: #990000">||</span> run_team_example <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> run_a11c <span style="color: #990000">)</span>
               ok        <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">a11c</span></span><span style="color: #990000">();</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> run_simple_ad <span style="color: #990000">)</span>
               ok        <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">simple_ad</span></span><span style="color: #990000">();</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>     ok        <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">team_example</span></span><span style="color: #990000">();</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">free_all</span></span><span style="color: #990000">()</span> <span style="color: #990000">)</span>
               cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"free_all      = true;"</span>  <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
          <span style="color: #FF0000">{</span>     ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
               cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"free_all      = false;"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> ok <span style="color: #990000">)</span>
               cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"OK            = true;"</span>  <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"OK            = false;"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">!</span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// test_time</span></span>
     <span style="color: #009900">double</span> test_time <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">arg2double</span></span><span style="color: #990000">(</span> <span style="color: #990000">*++</span>argv<span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">.,</span>
          <span style="color: #FF0000">"run: test_time is less than zero"</span>
     <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// max_threads</span></span>
     <span style="color: #008080">size_t</span> max_threads <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">arg2size_t</span></span><span style="color: #990000">(</span> <span style="color: #990000">*++</span>argv<span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">,</span>
          <span style="color: #FF0000">"run: max_threads is less than zero"</span>
     <span style="color: #990000">);</span>

     <span style="color: #008080">size_t</span> mega_sum <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// assignment to avoid compiler warning</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> run_harmonic <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// mega_sum</span></span>
          mega_sum <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">arg2size_t</span></span><span style="color: #990000">(</span> <span style="color: #990000">*++</span>argv<span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span>
               <span style="color: #FF0000">"run: mega_sum is less than one"</span>
          <span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
     <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> run_multi_newton<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// num_zero</span></span>
          num_zero <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">arg2size_t</span></span><span style="color: #990000">(</span> <span style="color: #990000">*++</span>argv<span style="color: #990000">,</span> <span style="color: #993399">2</span><span style="color: #990000">,</span>
               <span style="color: #FF0000">"run: num_zero is less than two"</span>
          <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// num_sub</span></span>
          num_sub <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">arg2size_t</span></span><span style="color: #990000">(</span> <span style="color: #990000">*++</span>argv<span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span>
               <span style="color: #FF0000">"run: num_sub is less than one"</span>
          <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// num_sum</span></span>
          num_sum <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">arg2size_t</span></span><span style="color: #990000">(</span> <span style="color: #990000">*++</span>argv<span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span>
               <span style="color: #FF0000">"run: num_sum is less than one"</span>
          <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// use_ad</span></span>
          <span style="color: #990000">++</span>argv<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">strcmp</span></span><span style="color: #990000">(*</span>argv<span style="color: #990000">,</span> <span style="color: #FF0000">"true"</span><span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
               use_ad <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">strcmp</span></span><span style="color: #990000">(*</span>argv<span style="color: #990000">,</span> <span style="color: #FF0000">"false"</span><span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
               use_ad <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
          <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"run: use_ad = '"</span> <span style="color: #990000">&lt;&lt;</span> <span style="color: #990000">*</span>argv<span style="color: #990000">;</span>
               std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"' is not true or false"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #000000">exit</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// run the test for each number of threads</span></span>
     <span style="color: #008080">size_t</span> num_threads<span style="color: #990000">,</span> inuse_this_thread <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"time_all  = ["</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>num_threads <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> num_threads <span style="color: #990000">&lt;=</span> max_threads<span style="color: #990000">;</span> num_threads<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">double</span> time_out<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// set the number of threads</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> num_threads <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
               ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">team_create</span></span><span style="color: #990000">(</span>num_threads<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// ammount of memory initialy inuse by thread zero</span></span>
          ok <span style="color: #990000">&amp;=</span> <span style="color: #993399">0</span> <span style="color: #990000">==</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">thread_num</span></span><span style="color: #990000">();</span>
          inuse_this_thread <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">inuse</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// run the requested test</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> run_harmonic <span style="color: #990000">)</span> ok <span style="color: #990000">&amp;=</span>
               <span style="font-weight: bold"><span style="color: #000000">harmonic_time</span></span><span style="color: #990000">(</span>time_out<span style="color: #990000">,</span> test_time<span style="color: #990000">,</span> num_threads<span style="color: #990000">,</span> mega_sum<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
          <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> run_multi_newton<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">multi_newton_time</span></span><span style="color: #990000">(</span>
                    time_out                <span style="color: #990000">,</span>
                    test_time               <span style="color: #990000">,</span>
                    num_threads             <span style="color: #990000">,</span>
                    num_zero                <span style="color: #990000">,</span>
                    num_sub                 <span style="color: #990000">,</span>
                    num_sum                 <span style="color: #990000">,</span>
                    use_ad
               <span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// set back to one thread and fee all avaialable memory</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> num_threads <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
               ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">team_destroy</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> thread<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>thread <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> thread <span style="color: #990000">&lt;</span> num_threads<span style="color: #990000">;</span> thread<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">free_available</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> thread <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
                    ok <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">inuse</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">)</span> <span style="color: #990000">==</span> inuse_this_thread<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>     ok <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">inuse</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"</span><span style="color: #CC33CC">\t</span><span style="color: #FF0000">"</span> <span style="color: #990000">&lt;&lt;</span> time_out <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">" % "</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> num_threads <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
               cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"no threading"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>     cout <span style="color: #990000">&lt;&lt;</span> num_threads <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">" threads"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"];"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">free_all</span></span><span style="color: #990000">()</span> <span style="color: #990000">)</span>
          cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"free_all      = true;"</span>  <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
     <span style="color: #FF0000">{</span>     ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"free_all      = false;"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> ok <span style="color: #990000">)</span>
          cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"OK            = true;"</span>  <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"OK            = false;"</span> <span style="color: #990000">&lt;&lt;</span> endl<span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span>  <span style="color: #990000">!</span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: multi_thread/thread_test.cpp

</body>
</html>
