<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Extending to_string To Another Floating Point Type</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Extending to_string To Another Floating Point Type"/>
<meta name="keywords" id="keywords" content=" extending to_string to another floating point type base requirement cppad_to_string "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_base_to_string_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="base_limits.xml" target="_top">Prev</a>
</td><td><a href="base_example.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>base_require</option>
<option>base_to_string</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>AD-&gt;</option>
<option>ad_ctor</option>
<option>ad_assign</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>base_require-&gt;</option>
<option>base_member</option>
<option>base_cond_exp</option>
<option>base_identical</option>
<option>base_ordered</option>
<option>base_std_math</option>
<option>base_limits</option>
<option>base_to_string</option>
<option>base_example</option>
</select>
</td>
<td>base_to_string</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Base Requirement</option>
<option>CPPAD_TO_STRING</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>Extending to_string To Another Floating Point Type</big></big></b></center>
<br/>
<b><big><a name="Base Requirement" id="Base Requirement">Base Requirement</a></big></b>
<br/>
If the function <a href="to_string.xml" target="_top"><span style='white-space: nowrap'>to_string</span></a>
 is used by an
<a href="glossary.xml#AD Type Above Base" target="_top"><span style='white-space: nowrap'>AD&#xA0;type&#xA0;above&#xA0;Base</span></a>
,
A specialization for the template structure
<code><font color="blue">CppAD::to_string_struct</font></code> must be defined.

<br/>
<br/>
<b><big><a name="CPPAD_TO_STRING" id="CPPAD_TO_STRING">CPPAD_TO_STRING</a></big></b>
<br/>
For most 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 types,
the following can be used to define the specialization:

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;namespace&#xA0;CppAD&#xA0;{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CPPAD_TO_STRING(</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
</span></font></code>
Note that the <code><font color="blue">CPPAD_TO_STRING</font></code> macro assumes that the
<a href="base_limits.xml" target="_top"><span style='white-space: nowrap'>base_limits</span></a>
 and <a href="base_std_math.xml" target="_top"><span style='white-space: nowrap'>base_std_math</span></a>
 have already been defined
for this type.
This macro is defined as follows:
<code><font color='blue'><pre style='display:inline'> 
# define CPPAD_TO_STRING(Base) \
template &lt;&gt; struct to_string_struct&lt;Base&gt;\
{	std::string operator()(const Base&amp; value) \
	{	std::stringstream os;\
		Base epsilon    = CppAD::numeric_limits&lt;Base&gt;::epsilon();\
		Base log10      = CppAD::log( epsilon ) / CppAD::log(Base(10.));\
		size_t n_digits = 1 - Integer( log10 );\
		os &lt;&lt; std::setprecision(n_digits);\
		os &lt;&lt; value;\
		return os.str();\
	}\
};
</pre></font></code>


<hr/>Input File: cppad/local/base_to_string.hpp

</body>
</html>
