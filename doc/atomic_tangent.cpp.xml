<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Tan and Tanh as User Atomic Operations: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Tan and Tanh as User Atomic Operations: Example and Test"/>
<meta name="keywords" id="keywords" content=" tan tanh user atomic operations: example test tangent operation theory sparsity start class definition constructor forward reverse for_sparse_jac rev_sparse_jac rev_sparse_hes end use function recording large x values "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_tangent.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="atomic_set_sparsity.cpp.xml" target="_top">Prev</a>
</td><td><a href="atomic_eigen_mat_mul.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_base</option>
<option>atomic_tangent.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>unary_standard_math</option>
<option>binary_math</option>
<option>CondExp</option>
<option>Discrete</option>
<option>numeric_limits</option>
<option>atomic</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>atomic-&gt;</option>
<option>checkpoint</option>
<option>atomic_base</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>atomic_base-&gt;</option>
<option>atomic_ctor</option>
<option>atomic_option</option>
<option>atomic_afun</option>
<option>atomic_forward</option>
<option>atomic_reverse</option>
<option>atomic_for_sparse_jac</option>
<option>atomic_rev_sparse_jac</option>
<option>atomic_for_sparse_hes</option>
<option>atomic_rev_sparse_hes</option>
<option>atomic_base_clear</option>
<option>atomic_get_started.cpp</option>
<option>atomic_norm_sq.cpp</option>
<option>atomic_reciprocal.cpp</option>
<option>atomic_set_sparsity.cpp</option>
<option>atomic_tangent.cpp</option>
<option>atomic_eigen_mat_mul.cpp</option>
<option>atomic_eigen_mat_inv.cpp</option>
<option>atomic_eigen_cholesky.cpp</option>
<option>atomic_mat_mul.cpp</option>
</select>
</td>
<td>atomic_tangent.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Theory</option>
<option>sparsity</option>
<option>Start Class Definition</option>
<option>Constructor</option>
<option>forward</option>
<option>reverse</option>
<option>for_sparse_jac</option>
<option>rev_sparse_jac</option>
<option>rev_sparse_hes</option>
<option>End Class Definition</option>
<option>Use Atomic Function</option>
<option>---..Constructor</option>
<option>---..Recording</option>
<option>---..forward</option>
<option>---..reverse</option>
<option>---..for_sparse_jac</option>
<option>---..rev_sparse_jac</option>
<option>---..rev_sparse_hes</option>
<option>---..Large x Values</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Tan and Tanh as User Atomic Operations: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Theory" id="Theory">Theory</a></big></b>
<br/>
The code below uses the <a href="tan_forward.xml" target="_top"><span style='white-space: nowrap'>tan_forward</span></a>
 and <a href="tan_reverse.xml" target="_top"><span style='white-space: nowrap'>tan_reverse</span></a>

to implement the tangent and hyperbolic tangent
functions as user atomic operations.

<br/>
<br/>
<b><big><a name="sparsity" id="sparsity">sparsity</a></big></b>
<br/>
This atomic operation can use both set and bool sparsity patterns.



<br/>
<br/>
<b><big><a name="Start Class Definition" id="Start Class Definition">Start Class Definition</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// Begin empty namespace</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>
<span style="font-style: italic"><span style="color: #9A1900">//</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// a utility to compute the union of two sets.</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>set_union<span style="color: #990000">;</span>
<span style="font-style: italic"><span style="color: #9A1900">//</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">atomic_tangent</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;</span> <span style="color: #FF0000">{</span></tt></pre>
<br/>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">bool</span> hyperbolic_<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// is this hyperbolic tangent</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
     <span style="font-style: italic"><span style="color: #9A1900">// constructor</span></span>
     <span style="font-weight: bold"><span style="color: #000000">atomic_tangent</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span><span style="color: #990000">*</span> name<span style="color: #990000">,</span> <span style="color: #009900">bool</span> hyperbolic<span style="color: #990000">)</span>
     <span style="color: #990000">:</span> CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;(</span>name<span style="color: #990000">),</span>
     <span style="font-weight: bold"><span style="color: #000000">hyperbolic_</span></span><span style="color: #990000">(</span>hyperbolic<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>
<span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span></tt></pre>
<br/>
<b><big><a name="forward" id="forward">forward</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// forward mode routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">forward</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                    p <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    q <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>      vx <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>     vzy <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>     tx <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>    tzy
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> q1 <span style="color: #990000">=</span> q <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> n  <span style="color: #990000">=</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">/</span> q1<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> m  <span style="color: #990000">=</span> tzy<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> q1<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> p <span style="color: #990000">&lt;=</span> q <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> j<span style="color: #990000">,</span> k<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// check if this is during the call to old_tan(id, ax, ay)</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// set variable flag for both y an z</span></span>
               vzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> vx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               vzy<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> vx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>

          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> p <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// z^{(0)} = tan( x^{(0)} ) or tanh( x^{(0)} )</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> hyperbolic_ <span style="color: #990000">)</span>
                    tzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">float</span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">tanh</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>     tzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">float</span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">tan</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// y^{(0)} = z^{(0)} * z^{(0)}</span></span>
               tzy<span style="color: #990000">[</span>q1 <span style="color: #990000">+</span> <span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> tzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> tzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

               p<span style="color: #990000">++;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> p<span style="color: #990000">;</span> j <span style="color: #990000">&lt;=</span> q<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #009900">float</span> j_inv <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span>f <span style="color: #990000">/</span> <span style="color: #009900">float</span><span style="color: #990000">(</span>j<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> hyperbolic_ <span style="color: #990000">)</span>
                    j_inv <span style="color: #990000">=</span> <span style="color: #990000">-</span> j_inv<span style="color: #990000">;</span>

               <span style="font-style: italic"><span style="color: #9A1900">// z^{(j)} = x^{(j)} +- sum_{k=1}^j k x^{(k)} y^{(j-k)} / j</span></span>
               tzy<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> tx<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;=</span> j<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    tzy<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">+=</span> tx<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> tzy<span style="color: #990000">[</span>q1 <span style="color: #990000">+</span> j<span style="color: #990000">-</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> <span style="color: #009900">float</span><span style="color: #990000">(</span>k<span style="color: #990000">)</span> <span style="color: #990000">*</span> j_inv<span style="color: #990000">;</span>

               <span style="font-style: italic"><span style="color: #9A1900">// y^{(j)} = sum_{k=0}^j z^{(k)} z^{(j-k)}</span></span>
               tzy<span style="color: #990000">[</span>q1 <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;=</span> j<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    tzy<span style="color: #990000">[</span>q1 <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">+=</span> tzy<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> tzy<span style="color: #990000">[</span>j<span style="color: #990000">-</span>k<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// All orders are implemented and there are no possible errors</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="reverse" id="reverse">reverse</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// reverse mode routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">reverse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                    q <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>     tx <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>    tzy <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>     px <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>    pzy
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> q1 <span style="color: #990000">=</span> q <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> n  <span style="color: #990000">=</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">/</span> q1<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> m  <span style="color: #990000">=</span> tzy<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> q1<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> px<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> n <span style="color: #990000">*</span> q1 <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> pzy<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> m <span style="color: #990000">*</span> q1 <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>

          <span style="color: #008080">size_t</span> j<span style="color: #990000">,</span> k<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// copy because partials w.r.t. y and z need to change</span></span>
          <span style="color: #008080">vector&lt;float&gt;</span> qzy <span style="color: #990000">=</span> pzy<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// initialize accumultion of reverse mode partials</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> q1<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               px<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// eliminate positive orders</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> q<span style="color: #990000">;</span> j <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j<span style="color: #990000">--)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #009900">float</span> j_inv <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span>f <span style="color: #990000">/</span> <span style="color: #009900">float</span><span style="color: #990000">(</span>j<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> hyperbolic_ <span style="color: #990000">)</span>
                    j_inv <span style="color: #990000">=</span> <span style="color: #990000">-</span> j_inv<span style="color: #990000">;</span>

               <span style="font-style: italic"><span style="color: #9A1900">// H_{x^{(k)}} += delta(j-k) +- H_{z^{(j)} y^{(j-k)} * k / j</span></span>
               px<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">+=</span> qzy<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;=</span> j<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    px<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">+=</span> qzy<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">*</span> tzy<span style="color: #990000">[</span>q1 <span style="color: #990000">+</span> j<span style="color: #990000">-</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> <span style="color: #009900">float</span><span style="color: #990000">(</span>k<span style="color: #990000">)</span> <span style="color: #990000">*</span> j_inv<span style="color: #990000">;</span>

               <span style="font-style: italic"><span style="color: #9A1900">// H_{y^{j-k)} += +- H_{z^{(j)} x^{(k)} * k / j</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;=</span> j<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    qzy<span style="color: #990000">[</span>q1 <span style="color: #990000">+</span> j<span style="color: #990000">-</span>k<span style="color: #990000">]</span> <span style="color: #990000">+=</span> qzy<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">*</span> tx<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> <span style="color: #009900">float</span><span style="color: #990000">(</span>k<span style="color: #990000">)</span> <span style="color: #990000">*</span> j_inv<span style="color: #990000">;</span>

               <span style="font-style: italic"><span style="color: #9A1900">// H_{z^{(k)}} += H_{y^{(j-1)}} * z^{(j-k-1)} * 2.</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> j<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    qzy<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">+=</span> qzy<span style="color: #990000">[</span>q1 <span style="color: #990000">+</span> j<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> tzy<span style="color: #990000">[</span>j<span style="color: #990000">-</span>k<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> <span style="color: #993399">2</span><span style="color: #990000">.</span>f<span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// eliminate order zero</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> hyperbolic_ <span style="color: #990000">)</span>
               px<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+=</span> qzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> <span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">.</span>f <span style="color: #990000">-</span> tzy<span style="color: #990000">[</span>q1 <span style="color: #990000">+</span> <span style="color: #993399">0</span><span style="color: #990000">]);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
               px<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+=</span> qzy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> <span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">.</span>f <span style="color: #990000">+</span> tzy<span style="color: #990000">[</span>q1 <span style="color: #990000">+</span> <span style="color: #993399">0</span><span style="color: #990000">]);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="for_sparse_jac" id="for_sparse_jac">for_sparse_jac</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// forward Jacobian sparsity routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">for_sparse_jac</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   r <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   s <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>                  x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> p<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> p<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for S(x) = f'(x) * R</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> p<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     s<span style="color: #990000">[</span><span style="color: #993399">0</span> <span style="color: #990000">*</span> p <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> r<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
               s<span style="color: #990000">[</span><span style="color: #993399">1</span> <span style="color: #990000">*</span> p <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> r<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// forward Jacobian sparsity routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">for_sparse_jac</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     r <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     s <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>                  x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for S(x) = f'(x) * R</span></span>
          s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="rev_sparse_jac" id="rev_sparse_jac">rev_sparse_jac</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// reverse Jacobian sparsity routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_jac</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                  rt <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                  st <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>                  x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> st<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> p<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> rt<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> p<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for S(x)^T = f'(x)^T * R^T</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> p<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               st<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> rt<span style="color: #990000">[</span><span style="color: #993399">0</span> <span style="color: #990000">*</span> p <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">|</span> rt<span style="color: #990000">[</span><span style="color: #993399">1</span> <span style="color: #990000">*</span> p <span style="color: #990000">+</span> j<span style="color: #990000">];</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// reverse Jacobian sparsity routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_jac</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>    rt <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>    st <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>                  x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> st<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> rt<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for S(x)^T = f'(x)^T * R^T</span></span>
          st<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>rt<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> rt<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="rev_sparse_hes" id="rev_sparse_hes">rev_sparse_hes</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// reverse Hessian sparsity routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_hes</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   vx<span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   s <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   t <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   r <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   u <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   v <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>                  x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> t<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">*</span> p <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> u<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> m <span style="color: #990000">*</span> p <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> v<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">*</span> p <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// There are no cross term second derivatives for this case,</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// so it is not necessary to vx.</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for T(x) = S(x) * f'(x)</span></span>
          t<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span>  s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">|</span> s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// V(x) = f'(x)^T * g''(y) * f'(x) * R  +  g'(y) * f''(x) * R</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// U(x) = g''(y) * f'(x) * R</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// S(x) = g'(y)</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// back propagate the sparsity for U, note both components</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// of f'(x) may be non-zero;</span></span>
          <span style="color: #008080">size_t</span> j<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> p<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               v<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> u<span style="color: #990000">[</span> <span style="color: #993399">0</span> <span style="color: #990000">*</span> p <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">|</span> u<span style="color: #990000">[</span> <span style="color: #993399">1</span> <span style="color: #990000">*</span> p <span style="color: #990000">+</span> j <span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// include forward Jacobian sparsity in Hessian sparsity</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (note sparsty for f''(x) * R same as for R)</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">|</span> s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> p<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// Visual Studio 2013 generates warning without bool below</span></span>
                    v<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span> r<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// reverse Hessian sparsity routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_hes</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   vx<span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   s <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   t <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     r <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     u <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     v <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;&amp;</span>                  x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> t<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> u<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> m <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> v<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// There are no cross term second derivatives for this case,</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// so it is not necessary to vx.</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for T(x) = S(x) * f'(x)</span></span>
          t<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span>  s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">|</span> s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// V(x) = f'(x)^T * g''(y) * f'(x) * R  +  g'(y) * f''(x) * R</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// U(x) = g''(y) * f'(x) * R</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// S(x) = g'(y)</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// back propagate the sparsity for U, note both components</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// of f'(x) may be non-zero;</span></span>
          v<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>u<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> u<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// include forward Jacobian sparsity in Hessian sparsity</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (note sparsty for f''(x) * R same as for R)</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">|</span> s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
               v<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>v<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="End Class Definition" id="End Class Definition">End Class Definition</a></big></b>

<pre style='display:inline'><tt>
<span style="color: #FF0000">}</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// End of atomic_tangent class</span></span>
<span style="color: #FF0000">}</span>  <span style="font-style: italic"><span style="color: #9A1900">// End empty namespace</span></span>

</tt></pre>
<b><big><a name="Use Atomic Function" id="Use Atomic Function">Use Atomic Function</a></big></b>

<pre><tt><span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">tangent</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
     <span style="color: #009900">float</span> eps <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">.</span>f <span style="color: #990000">*</span> CppAD<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span></tt></pre>
<br/>
<b><a name="Use Atomic Function.Constructor" id="Use Atomic Function.Constructor">Constructor</a></b>

<pre style='display:inline'><tt>
     <span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Creater a tan and tanh object</span></span>
     <span style="color: #008080">atomic_tangent</span> <span style="font-weight: bold"><span style="color: #000000">my_tan</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"my_tan"</span><span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">my_tanh</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"my_tanh"</span><span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>
</tt></pre>
<br/>
<b><a name="Use Atomic Function.Recording" id="Use Atomic Function.Recording">Recording</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
     <span style="color: #008080">size_t</span> n  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #009900">float</span>  x0 <span style="color: #990000">=</span> <span style="color: #993399">0.5</span><span style="color: #990000">;</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; AD&lt;float&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">ax</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>     <span style="color: #990000">=</span> x0<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and start tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// range space vector</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; AD&lt;float&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">af</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// temporary vector for computations</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (my_tan and my_tanh computes tan or tanh and its square)</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; AD&lt;float&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">az</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// call atomic tan function and store tan(x) in f[0] (ignore tan(x)^2)</span></span>
     <span style="font-weight: bold"><span style="color: #000000">my_tan</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">,</span> az<span style="color: #990000">);</span>
     af<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> az<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// call atomic tanh function and store tanh(x) in f[1] (ignore tanh(x)^2)</span></span>
     <span style="font-weight: bold"><span style="color: #000000">my_tanh</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">,</span> az<span style="color: #990000">);</span>
     af<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> az<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// put a constant in f[2] = tanh(1.) (for sparsity pattern testing)</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; AD&lt;float&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">one</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     one<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     <span style="font-weight: bold"><span style="color: #000000">my_tanh</span></span><span style="color: #990000">(</span>one<span style="color: #990000">,</span> az<span style="color: #990000">);</span>
     af<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> az<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// create f: x -&gt; f and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;float&gt;</span> F<span style="color: #990000">;</span>
     F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">,</span> af<span style="color: #990000">);</span></tt></pre>
<br/>
<b><a name="Use Atomic Function.forward" id="Use Atomic Function.forward">forward</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// check function value</span></span>
     <span style="color: #009900">float</span> tan <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">tan</span></span><span style="color: #990000">(</span>x0<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>af<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> tan<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     <span style="color: #009900">float</span> tanh <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">tanh</span></span><span style="color: #990000">(</span>x0<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>af<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> tanh<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check zero order forward</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x0<span style="color: #990000">;</span>
     f    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>f<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> tan<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>f<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> tanh<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compute first partial of f w.r.t. x[0] using forward mode</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">dx</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">df</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     dx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     df    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> dx<span style="color: #990000">);</span></tt></pre>
<br/>
<b><a name="Use Atomic Function.reverse" id="Use Atomic Function.reverse">reverse</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// compute derivative of tan - tanh using reverse mode</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">w</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">dw</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     w<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     w<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     w<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     dw    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Reverse</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> w<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// tan'(x)   = 1 + tan(x)  * tan(x)</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// tanh'(x)  = 1 - tanh(x) * tanh(x)</span></span>
     <span style="color: #009900">float</span> tanp  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span>f <span style="color: #990000">+</span> tan <span style="color: #990000">*</span> tan<span style="color: #990000">;</span>
     <span style="color: #009900">float</span> tanhp <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span>f <span style="color: #990000">-</span> tanh <span style="color: #990000">*</span> tanh<span style="color: #990000">;</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>df<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> tanp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>df<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> tanhp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dw<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> w<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]*</span>tanp <span style="color: #990000">+</span> w<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]*</span>tanhp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compute second partial of f w.r.t. x[0] using forward mode</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">ddx</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">ddf</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     ddx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     ddf    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">,</span> ddx<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compute second derivative of tan - tanh using reverse mode</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;float&gt;</span> <span style="font-weight: bold"><span style="color: #000000">ddw</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     ddw   <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Reverse</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">,</span> w<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// tan''(x)   = 2 *  tan(x) * tan'(x)</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// tanh''(x)  = - 2 * tanh(x) * tanh'(x)</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Note that second order Taylor coefficient for u half the</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// corresponding second derivative.</span></span>
     <span style="color: #009900">float</span> two    <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="color: #009900">float</span> tanpp  <span style="color: #990000">=</span>   two <span style="color: #990000">*</span> tan <span style="color: #990000">*</span> tanp<span style="color: #990000">;</span>
     <span style="color: #009900">float</span> tanhpp <span style="color: #990000">=</span> <span style="color: #990000">-</span> two <span style="color: #990000">*</span> tanh <span style="color: #990000">*</span> tanhp<span style="color: #990000">;</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>two <span style="color: #990000">*</span> ddf<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> tanpp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>two <span style="color: #990000">*</span> ddf<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> tanhpp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>ddw<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> w<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]*</span>tanp  <span style="color: #990000">+</span> w<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]*</span>tanhp <span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>ddw<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> w<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]*</span>tanpp <span style="color: #990000">+</span> w<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]*</span>tanhpp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span></tt></pre>
<br/>
<b><a name="Use Atomic Function.for_sparse_jac" id="Use Atomic Function.for_sparse_jac">for_sparse_jac</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// Forward mode computation of sparsity pattern for F.</span></span>
     <span style="color: #008080">size_t</span> p <span style="color: #990000">=</span> n<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// user vectorBool because m and n are small</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">r1</span></span><span style="color: #990000">(</span>p<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">s1</span></span><span style="color: #990000">(</span>m <span style="color: #990000">*</span> p<span style="color: #990000">);</span>
     r1<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>            <span style="font-style: italic"><span style="color: #9A1900">// propagate sparsity for x[0]</span></span>
     s1    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">ForSparseJac</span></span><span style="color: #990000">(</span>p<span style="color: #990000">,</span> r1<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>s1<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// f[0] depends on x[0]</span></span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>s1<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// f[1] depends on x[0]</span></span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>s1<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">);</span> <span style="font-style: italic"><span style="color: #9A1900">// f[2] does not depend on x[0]</span></span></tt></pre>
<br/>
<b><a name="Use Atomic Function.rev_sparse_jac" id="Use Atomic Function.rev_sparse_jac">rev_sparse_jac</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// Reverse mode computation of sparsity pattern for F.</span></span>
     <span style="color: #008080">size_t</span> q <span style="color: #990000">=</span> m<span style="color: #990000">;</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">s2</span></span><span style="color: #990000">(</span>q <span style="color: #990000">*</span> m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">r2</span></span><span style="color: #990000">(</span>q <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">// Sparsity pattern for identity matrix</span></span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               s2<span style="color: #990000">[</span>i <span style="color: #990000">*</span> q <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">(</span>i <span style="color: #990000">==</span> j<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     r2   <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseJac</span></span><span style="color: #990000">(</span>q<span style="color: #990000">,</span> s2<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>r2<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// f[0] depends on x[0]</span></span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>r2<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// f[1] depends on x[0]</span></span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>r2<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">);</span> <span style="font-style: italic"><span style="color: #9A1900">// f[2] does not depend on x[0]</span></span></tt></pre>
<br/>
<b><a name="Use Atomic Function.rev_sparse_hes" id="Use Atomic Function.rev_sparse_hes">rev_sparse_hes</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// Hessian sparsity for f[0]</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">s3</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">h</span></span><span style="color: #990000">(</span>p <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
     s3<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     s3<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     s3<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     h    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseHes</span></span><span style="color: #990000">(</span>p<span style="color: #990000">,</span> s3<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>h<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// Hessian is non-zero</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// Hessian sparsity for f[2]</span></span>
     s3<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     s3<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     h    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseHes</span></span><span style="color: #990000">(</span>p<span style="color: #990000">,</span> s3<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>h<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// Hessian is zero</span></span></tt></pre>
<br/>
<b><a name="Use Atomic Function.Large x Values" id="Use Atomic Function.Large x Values">Large x Values</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// check tanh results for a large value of x</span></span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> two<span style="color: #990000">;</span>
     f     <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     tanh  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>f<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> tanh<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     df    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> dx<span style="color: #990000">);</span>
     tanhp <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>df<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> tanhp<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: example/atomic/tangent.cpp

</body>
</html>
