<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>A Simple OpenMP Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="A Simple OpenMP Example and Test"/>
<meta name="keywords" id="keywords" content=" simple openmp example test A.1.1c thread purpose source code "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_a11c_openmp.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="thread_test.cpp.xml" target="_top">Prev</a>
</td><td><a href="a11c_bthread.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>a11c_openmp.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
<option>simple_ad_openmp.cpp</option>
<option>simple_ad_bthread.cpp</option>
<option>simple_ad_pthread.cpp</option>
<option>team_example.cpp</option>
<option>harmonic.cpp</option>
<option>multi_newton.cpp</option>
<option>team_thread.hpp</option>
</select>
</td>
<td>a11c_openmp.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Source Code</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>A Simple OpenMP Example and Test</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This example just demonstrates OpenMP and does not use CppAD at all.

<br/>
<br/>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>

<code><font color="blue">
<pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;omp.h&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;limits&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cmath&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cassert&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># define</span></span> NUMBER_THREADS <span style="color: #993399">4</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-style: italic"><span style="color: #9A1900">// Beginning of Example A.1.1.1c of OpenMP 2.5 standard document ---------</span></span>
     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">a1</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> n<span style="color: #990000">,</span> <span style="color: #009900">float</span> <span style="color: #990000">*</span>a<span style="color: #990000">,</span> <span style="color: #009900">float</span> <span style="color: #990000">*</span>b<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">int</span> i<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080">     # pragma</span></span> omp parallel <span style="font-weight: bold"><span style="color: #0000FF">for</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span> <span style="font-style: italic"><span style="color: #9A1900">/* i is private by default */</span></span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">omp_get_num_threads</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> NUMBER_THREADS <span style="color: #990000">);</span>
               b<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">(</span>a<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">+</span> a<span style="color: #990000">[</span>i<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">])</span> <span style="color: #990000">/</span> <span style="color: #009900">float</span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// End of Example A.1.1.1c of OpenMP 2.5 standard document ---------------</span></span>
<span style="color: #FF0000">}</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">a11c</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Test setup</span></span>
     <span style="color: #009900">int</span> i<span style="color: #990000">,</span> n <span style="color: #990000">=</span> <span style="color: #993399">1000</span><span style="color: #990000">;</span>
     <span style="color: #009900">float</span> <span style="color: #990000">*</span>a <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="color: #009900">float</span><span style="color: #990000">[</span>n<span style="color: #990000">];</span>
     <span style="color: #009900">float</span> <span style="color: #990000">*</span>b <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="color: #009900">float</span><span style="color: #990000">[</span>n<span style="color: #990000">];</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          a<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">float</span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>

     <span style="color: #009900">int</span> n_thread <span style="color: #990000">=</span> NUMBER_THREADS<span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// number of threads in parallel regions</span></span>
     <span style="font-weight: bold"><span style="color: #000000">omp_set_dynamic</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>              <span style="font-style: italic"><span style="color: #9A1900">// off dynamic thread adjust</span></span>
     <span style="font-weight: bold"><span style="color: #000000">omp_set_num_threads</span></span><span style="color: #990000">(</span>n_thread<span style="color: #990000">);</span>   <span style="font-style: italic"><span style="color: #9A1900">// set the number of threads</span></span>

     <span style="font-weight: bold"><span style="color: #000000">a1</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> a<span style="color: #990000">,</span> b<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the result</span></span>
     <span style="color: #009900">float</span> eps <span style="color: #990000">=</span> <span style="color: #009900">float</span><span style="color: #990000">(</span><span style="color: #993399">100</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n <span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          ok <span style="color: #990000">&amp;=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span> <span style="color: #990000">(</span><span style="color: #009900">float</span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> b<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">-</span> a<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">-</span> a<span style="color: #990000">[</span>i<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">])</span> <span style="color: #990000">/</span> b<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">&lt;=</span> eps<span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">delete</span></span> <span style="color: #990000">[]</span> a<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">delete</span></span> <span style="color: #990000">[]</span> b<span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: multi_thread/openmp/a11c_openmp.cpp

</body>
</html>
