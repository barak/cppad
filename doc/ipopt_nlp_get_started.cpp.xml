<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Nonlinear Programming Using CppAD and Ipopt: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Nonlinear Programming Using CppAD and Ipopt: Example and Test"/>
<meta name="keywords" id="keywords" content=" nonlinear programming using cppad ipopt: example test ipopt Ad purpose configuration requirement "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ipopt_nlp_get_started.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="cppad_ipopt_nlp.xml" target="_top">Prev</a>
</td><td><a href="ipopt_nlp_ode.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>cppad_ipopt_nlp</option>
<option>ipopt_nlp_get_started.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>wish_list</option>
<option>whats_new</option>
<option>deprecated</option>
<option>compare_c</option>
<option>numeric_ad</option>
<option>addon</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>deprecated-&gt;</option>
<option>include_deprecated</option>
<option>FunDeprecated</option>
<option>CompareChange</option>
<option>omp_max_thread</option>
<option>TrackNewDel</option>
<option>omp_alloc</option>
<option>memory_leak</option>
<option>epsilon</option>
<option>test_vector</option>
<option>cppad_ipopt_nlp</option>
<option>old_atomic</option>
<option>zdouble</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>cppad_ipopt_nlp-&gt;</option>
<option>ipopt_nlp_get_started.cpp</option>
<option>ipopt_nlp_ode</option>
<option>ipopt_ode_speed.cpp</option>
</select>
</td>
<td>ipopt_nlp_get_started.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Configuration Requirement</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>Nonlinear Programming Using CppAD and Ipopt: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This example program demonstrates how to use the class cppad_ipopt_nlp to
solve the example problem in the Ipopt documentation; i.e., the problem

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>minimize</mi>
<mspace width='.3em'/>
</mstyle></mrow>
</mtd><mtd columnalign="center" >
<msub><mi mathvariant='italic'>x</mi>
<mn>1</mn>
</msub>
<mo stretchy="false">*</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>4</mn>
</msub>
<mo stretchy="false">*</mo>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>1</mn>
</msub>
<mo stretchy="false">+</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>2</mn>
</msub>
<mo stretchy="false">+</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>3</mn>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>3</mn>
</msub>
</mtd></mtr><mtr><mtd columnalign="left" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>subject</mi>
<mspace width='.3em'/>
<mi mathvariant='normal'>to</mi>
<mspace width='.3em'/>
</mstyle></mrow>
</mtd><mtd columnalign="center" >
<msub><mi mathvariant='italic'>x</mi>
<mn>1</mn>
</msub>
<mo stretchy="false">*</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>2</mn>
</msub>
<mo stretchy="false">*</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>3</mn>
</msub>
<mo stretchy="false">*</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>4</mn>
</msub>
<mo stretchy="false">&#x02265;</mo>
<mn>25</mn>
</mtd></mtr><mtr><mtd columnalign="left" >
</mtd><mtd columnalign="center" >
<msubsup><mi mathvariant='italic'>x</mi>
<mn>1</mn>
<mn>2</mn>
</msubsup>
<mo stretchy="false">+</mo>
<msubsup><mi mathvariant='italic'>x</mi>
<mn>2</mn>
<mn>2</mn>
</msubsup>
<mo stretchy="false">+</mo>
<msubsup><mi mathvariant='italic'>x</mi>
<mn>3</mn>
<mn>2</mn>
</msubsup>
<mo stretchy="false">+</mo>
<msubsup><mi mathvariant='italic'>x</mi>
<mn>4</mn>
<mn>2</mn>
</msubsup>
<mo stretchy="false">=</mo>
<mn>40</mn>
</mtd></mtr><mtr><mtd columnalign="left" >
</mtd><mtd columnalign="center" >
<mn>1</mn>
<mo stretchy="false">&#x02264;</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>1</mn>
</msub>
<mo stretchy="false">,</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>2</mn>
</msub>
<mo stretchy="false">,</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>3</mn>
</msub>
<mo stretchy="false">,</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>4</mn>
</msub>
<mo stretchy="false">&#x02264;</mo>
<mn>5</mn>
</mtd></mtr></mtable>
</mrow></math>

<br/>
<b><big><a name="Configuration Requirement" id="Configuration Requirement">Configuration Requirement</a></big></b>
<br/>
This example will be compiled and tested provided that
a value for 
<code><i><font color="black"><span style='white-space: nowrap'>ipopt_prefix</span></font></i></code>

is specified on the <a href="cmake.xml" target="_top"><span style='white-space: nowrap'>cmake</span></a>
 command line.

<code><font color="blue">
<pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad_ipopt_nlp.hpp&gt;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> <span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> cppad_ipopt<span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">FG_info</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> cppad_ipopt_fg_info
     <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span>
          <span style="color: #009900">bool</span> retape_<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
          <span style="font-style: italic"><span style="color: #9A1900">// derived class part of constructor</span></span>
          <span style="font-weight: bold"><span style="color: #000000">FG_info</span></span><span style="color: #990000">(</span><span style="color: #009900">bool</span> retape_in<span style="color: #990000">)</span>
          <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #000000">retape_</span></span> <span style="color: #990000">(</span>retape_in<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// Evaluation of the objective f(x), and constraints g(x)</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// using an Algorithmic Differentiation (AD) class.</span></span>
          <span style="color: #008080">ADVector</span> <span style="font-weight: bold"><span style="color: #000000">eval_r</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> ADVector<span style="color: #990000">&amp;</span>  x<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">ADVector</span> <span style="font-weight: bold"><span style="color: #000000">fg</span></span><span style="color: #990000">(</span><span style="color: #993399">3</span><span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// Fortran style indexing</span></span>
               <span style="color: #008080">ADNumber</span> x1 <span style="color: #990000">=</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               <span style="color: #008080">ADNumber</span> x2 <span style="color: #990000">=</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
               <span style="color: #008080">ADNumber</span> x3 <span style="color: #990000">=</span> x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>
               <span style="color: #008080">ADNumber</span> x4 <span style="color: #990000">=</span> x<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">];</span>
               <span style="font-style: italic"><span style="color: #9A1900">// f(x)</span></span>
               fg<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x1 <span style="color: #990000">*</span> x4 <span style="color: #990000">*</span> <span style="color: #990000">(</span>x1 <span style="color: #990000">+</span> x2 <span style="color: #990000">+</span> x3<span style="color: #990000">)</span> <span style="color: #990000">+</span> x3<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// g_1 (x)</span></span>
               fg<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x1 <span style="color: #990000">*</span> x2 <span style="color: #990000">*</span> x3 <span style="color: #990000">*</span> x4<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// g_2 (x)</span></span>
               fg<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x1 <span style="color: #990000">*</span> x1 <span style="color: #990000">+</span> x2 <span style="color: #990000">*</span> x2 <span style="color: #990000">+</span> x3 <span style="color: #990000">*</span> x3 <span style="color: #990000">+</span> x4 <span style="color: #990000">*</span> x4<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> fg<span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">retape</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> retape_<span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">ipopt_get_started</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> j<span style="color: #990000">;</span>


     <span style="font-style: italic"><span style="color: #9A1900">// number of independent variables (domain dimension for f and g)</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">4</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// number of constraints (range dimension for g)</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// initial value of the independent variables</span></span>
     <span style="color: #008080">NumberVector</span> <span style="font-weight: bold"><span style="color: #000000">x_i</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     x_i<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
     x_i<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">5.0</span><span style="color: #990000">;</span>
     x_i<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">5.0</span><span style="color: #990000">;</span>
     x_i<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// lower and upper limits for x</span></span>
     <span style="color: #008080">NumberVector</span> <span style="font-weight: bold"><span style="color: #000000">x_l</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="color: #008080">NumberVector</span> <span style="font-weight: bold"><span style="color: #000000">x_u</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     x_l<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
          x_u<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">5.0</span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// lower and upper limits for g</span></span>
     <span style="color: #008080">NumberVector</span> <span style="font-weight: bold"><span style="color: #000000">g_l</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     <span style="color: #008080">NumberVector</span> <span style="font-weight: bold"><span style="color: #000000">g_u</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     g_l<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">25.0</span><span style="color: #990000">;</span>     g_u<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.0e19</span><span style="color: #990000">;</span>
     g_l<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">40.0</span><span style="color: #990000">;</span>     g_u<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">40.0</span><span style="color: #990000">;</span>

     <span style="color: #008080">size_t</span> icase<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>icase <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> icase <span style="color: #990000">&lt;=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> icase<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// Should cppad_ipopt_nlp retape the operation sequence for</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// every new x. Can test both true and false cases because</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// the operation sequence does not depend on x (for this case).</span></span>
          <span style="color: #009900">bool</span> retape <span style="color: #990000">=</span> icase <span style="color: #990000">!=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// object in derived class</span></span>
          <span style="color: #008080">FG_info</span> <span style="font-weight: bold"><span style="color: #000000">fg_info</span></span><span style="color: #990000">(</span>retape<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// create the Ipopt interface</span></span>
          <span style="color: #008080">cppad_ipopt_solution</span> solution<span style="color: #990000">;</span>
          Ipopt<span style="color: #990000">::</span><span style="color: #008080">SmartPtr&lt;Ipopt::TNLP&gt;</span> cppad_nlp <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">cppad_ipopt_nlp</span></span><span style="color: #990000">(</span>
          n<span style="color: #990000">,</span> m<span style="color: #990000">,</span> x_i<span style="color: #990000">,</span> x_l<span style="color: #990000">,</span> x_u<span style="color: #990000">,</span> g_l<span style="color: #990000">,</span> g_u<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>fg_info<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>solution
          <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Create an instance of the IpoptApplication</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> Ipopt<span style="color: #990000">::</span>IpoptApplication<span style="color: #990000">;</span>
          Ipopt<span style="color: #990000">::</span><span style="color: #008080">SmartPtr&lt;IpoptApplication&gt;</span> app <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">IpoptApplication</span></span><span style="color: #990000">();</span>

          <span style="font-style: italic"><span style="color: #9A1900">// turn off any printing</span></span>
          app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Options</span></span><span style="color: #990000">()-&gt;</span><span style="font-weight: bold"><span style="color: #000000">SetIntegerValue</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"print_level"</span><span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>
          app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Options</span></span><span style="color: #990000">()-&gt;</span><span style="font-weight: bold"><span style="color: #000000">SetStringValue</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"sb"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"yes"</span><span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// maximum number of iterations</span></span>
          app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Options</span></span><span style="color: #990000">()-&gt;</span><span style="font-weight: bold"><span style="color: #000000">SetIntegerValue</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"max_iter"</span><span style="color: #990000">,</span> <span style="color: #993399">10</span><span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// approximate accuracy in first order necessary conditions;</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// see Mathematical Programming, Volume 106, Number 1,</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// Pages 25-57, Equation (6)</span></span>
          app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Options</span></span><span style="color: #990000">()-&gt;</span><span style="font-weight: bold"><span style="color: #000000">SetNumericValue</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"tol"</span><span style="color: #990000">,</span> <span style="color: #993399">1e-9</span><span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// derivative testing</span></span>
          app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Options</span></span><span style="color: #990000">()-&gt;</span>
          <span style="font-weight: bold"><span style="color: #000000">SetStringValue</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"derivative_test"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"second-order"</span><span style="color: #990000">);</span>
          app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Options</span></span><span style="color: #990000">()-&gt;</span> <span style="font-weight: bold"><span style="color: #000000">SetNumericValue</span></span><span style="color: #990000">(</span>
               <span style="color: #FF0000">"point_perturbation_radius"</span><span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">.</span>
          <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Initialize the IpoptApplication and process the options</span></span>
          Ipopt<span style="color: #990000">::</span><span style="color: #008080">ApplicationReturnStatus</span> status <span style="color: #990000">=</span> app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Initialize</span></span><span style="color: #990000">();</span>
          ok    <span style="color: #990000">&amp;=</span> status <span style="color: #990000">==</span> Ipopt<span style="color: #990000">::</span>Solve_Succeeded<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Run the IpoptApplication</span></span>
          status <span style="color: #990000">=</span> app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">OptimizeTNLP</span></span><span style="color: #990000">(</span>cppad_nlp<span style="color: #990000">);</span>
          ok    <span style="color: #990000">&amp;=</span> status <span style="color: #990000">==</span> Ipopt<span style="color: #990000">::</span>Solve_Succeeded<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">/*</span></span>
<span style="font-style: italic"><span style="color: #9A1900">          Check some of the solution values</span></span>
<span style="font-style: italic"><span style="color: #9A1900">          */</span></span>
          ok <span style="color: #990000">&amp;=</span> solution<span style="color: #990000">.</span>status <span style="color: #990000">==</span> cppad_ipopt_solution<span style="color: #990000">::</span>success<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="color: #009900">double</span> check_x<span style="color: #990000">[]</span>   <span style="color: #990000">=</span> <span style="color: #FF0000">{</span> <span style="color: #993399">1.000000</span><span style="color: #990000">,</span> <span style="color: #993399">4.743000</span><span style="color: #990000">,</span> <span style="color: #993399">3.82115</span><span style="color: #990000">,</span> <span style="color: #993399">1.379408</span> <span style="color: #FF0000">}</span><span style="color: #990000">;</span>
          <span style="color: #009900">double</span> check_z_l<span style="color: #990000">[]</span> <span style="color: #990000">=</span> <span style="color: #FF0000">{</span> <span style="color: #993399">1.087871</span><span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">.,</span>       <span style="color: #993399">0</span><span style="color: #990000">.,</span>      <span style="color: #993399">0</span><span style="color: #990000">.</span>       <span style="color: #FF0000">}</span><span style="color: #990000">;</span>
          <span style="color: #009900">double</span> check_z_u<span style="color: #990000">[]</span> <span style="color: #990000">=</span> <span style="color: #FF0000">{</span> <span style="color: #993399">0</span><span style="color: #990000">.,</span>       <span style="color: #993399">0</span><span style="color: #990000">.,</span>       <span style="color: #993399">0</span><span style="color: #990000">.,</span>      <span style="color: #993399">0</span><span style="color: #990000">.</span>       <span style="color: #FF0000">}</span><span style="color: #990000">;</span>
          <span style="color: #009900">double</span> rel_tol     <span style="color: #990000">=</span> <span style="color: #993399">1e-6</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// relative tolerance</span></span>
          <span style="color: #009900">double</span> abs_tol     <span style="color: #990000">=</span> <span style="color: #993399">1e-6</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// absolute tolerance</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>
               check_x<span style="color: #990000">[</span>j<span style="color: #990000">],</span>   solution<span style="color: #990000">.</span>x<span style="color: #990000">[</span>j<span style="color: #990000">],</span>   rel_tol<span style="color: #990000">,</span> abs_tol
               <span style="color: #990000">);</span>
               ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>
               check_z_l<span style="color: #990000">[</span>j<span style="color: #990000">],</span> solution<span style="color: #990000">.</span>z_l<span style="color: #990000">[</span>j<span style="color: #990000">],</span> rel_tol<span style="color: #990000">,</span> abs_tol
               <span style="color: #990000">);</span>
               ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>
               check_z_u<span style="color: #990000">[</span>j<span style="color: #990000">],</span> solution<span style="color: #990000">.</span>z_u<span style="color: #990000">[</span>j<span style="color: #990000">],</span> rel_tol<span style="color: #990000">,</span> abs_tol
               <span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: cppad_ipopt/example/get_started.cpp

</body>
</html>
