<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Speed Test for Both Simple and Fast Representations</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Speed Test for Both Simple and Fast Representations"/>
<meta name="keywords" id="keywords" content=" speed test both simple fast representations "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ipopt_ode_speed.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="ipopt_nlp_ode_check.cpp.xml" target="_top">Prev</a>
</td><td><a href="old_atomic.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>cppad_ipopt_nlp</option>
<option>ipopt_ode_speed.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>wish_list</option>
<option>whats_new</option>
<option>deprecated</option>
<option>compare_c</option>
<option>numeric_ad</option>
<option>addon</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>deprecated-&gt;</option>
<option>include_deprecated</option>
<option>FunDeprecated</option>
<option>CompareChange</option>
<option>omp_max_thread</option>
<option>TrackNewDel</option>
<option>omp_alloc</option>
<option>memory_leak</option>
<option>epsilon</option>
<option>test_vector</option>
<option>cppad_ipopt_nlp</option>
<option>old_atomic</option>
<option>zdouble</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>cppad_ipopt_nlp-&gt;</option>
<option>ipopt_nlp_get_started.cpp</option>
<option>ipopt_nlp_ode</option>
<option>ipopt_ode_speed.cpp</option>
</select>
</td>
<td>ipopt_ode_speed.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Speed Test for Both Simple and Fast Representations</big></big></b></center>
<code><font color="blue"><pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"../example/ode_run.hpp"</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"../example/ode_simple.hpp"</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"../example/ode_fast.hpp"</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cassert&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cstring&gt;</span>

<span style="font-weight: bold"><span style="color: #000080"># if</span></span> CPPAD_HAS_GETTIMEOFDAY <span style="color: #990000">&amp;</span> CPPAD_NO_MICROSOFT
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;sys/time.h&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># else</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;ctime&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="color: #009900">double</span> <span style="font-weight: bold"><span style="color: #000000">current_second</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># if</span></span> CPPAD_HAS_GETTIMEOFDAY <span style="color: #990000">&amp;</span> CPPAD_NOT_MICOROSOFT
          <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">timeval</span> value<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">gettimeofday</span></span><span style="color: #990000">(&amp;</span>value<span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #009900">double</span><span style="color: #990000">(</span>value<span style="color: #990000">.</span>tv_sec<span style="color: #990000">)</span> <span style="color: #990000">+</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>value<span style="color: #990000">.</span>tv_usec<span style="color: #990000">)</span> <span style="color: #990000">*</span> <span style="color: #993399">1e-6</span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># else</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">clock</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> <span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> CLOCKS_PER_SEC<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">double</span> <span style="font-weight: bold"><span style="color: #000000">ode_speed</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span><span style="color: #990000">*</span> name<span style="color: #990000">,</span> size_t<span style="color: #990000">&amp;</span> count<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>
     <span style="font-style: italic"><span style="color: #9A1900">// determine simple and retape flags</span></span>
     <span style="color: #009900">bool</span> simple <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">,</span> retape <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">strcmp</span></span><span style="color: #990000">(</span>name<span style="color: #990000">,</span> <span style="color: #FF0000">"simple_retape_no"</span><span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     simple <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span> retape <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">strcmp</span></span><span style="color: #990000">(</span>name<span style="color: #990000">,</span> <span style="color: #FF0000">"simple_retape_yes"</span><span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     simple <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span> retape <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">strcmp</span></span><span style="color: #990000">(</span>name<span style="color: #990000">,</span> <span style="color: #FF0000">"fast_retape_no"</span><span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     simple <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span> retape <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">strcmp</span></span><span style="color: #990000">(</span>name<span style="color: #990000">,</span> <span style="color: #FF0000">"fast_retape_yes"</span><span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     simple <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span> retape <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">);</span>

     <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
        <span style="color: #009900">double</span> s0<span style="color: #990000">,</span> s1<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span>  c0<span style="color: #990000">,</span> c1<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// solution vector</span></span>
     <span style="color: #008080">NumberVector</span> x<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// number of time grid intervals between measurement values</span></span>
     <span style="color: #008080">SizeVector</span> <span style="font-weight: bold"><span style="color: #000000">N</span></span><span style="color: #990000">(</span>Nz <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
     N<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;=</span> Nz<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     N<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// n   += N[i] * Ny;</span></span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// n += Na;</span></span>

     s0              <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">current_second</span></span><span style="color: #990000">();</span>
     c0              <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">count_eval_r</span></span><span style="color: #990000">();</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> simple <span style="color: #990000">)</span>
          ipopt_ode_case<span style="color: #990000">&lt;</span>FG_simple<span style="color: #990000">&gt;(</span>retape<span style="color: #990000">,</span> N<span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>     ipopt_ode_case<span style="color: #990000">&lt;</span>FG_fast<span style="color: #990000">&gt;(</span>retape<span style="color: #990000">,</span> N<span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     s1              <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">current_second</span></span><span style="color: #990000">();</span>
     c1              <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">count_eval_r</span></span><span style="color: #990000">();</span>
     count           <span style="color: #990000">=</span> c1 <span style="color: #990000">-</span> c0 <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> s1 <span style="color: #990000">-</span> s0<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: cppad_ipopt/speed/ode_speed.cpp

</body>
</html>
