<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Enable use of AD&lt;Base&gt; where Base is std::complex&lt;double&gt;</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Enable use of AD&lt;Base&gt; where Base is std::complex&lt;double&gt;"/>
<meta name="keywords" id="keywords" content=" enable use ad&lt;base&gt; where base is std::complex&lt;double&gt; example include order condexpop condexprel equalopseq identical ordered integer azmul isnan valid unary math invalid pow numeric_limits to_string "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_base_complex.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="base_double.hpp.xml" target="_top">Prev</a>
</td><td><a href="complex_poly.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>base_require</option>
<option>base_example</option>
<option>base_complex.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>ad_ctor</option>
<option>ad_assign</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>base_require-&gt;</option>
<option>base_member</option>
<option>base_cond_exp</option>
<option>base_identical</option>
<option>base_ordered</option>
<option>base_std_math</option>
<option>base_limits</option>
<option>base_to_string</option>
<option>base_hash</option>
<option>base_example</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>base_example-&gt;</option>
<option>base_alloc.hpp</option>
<option>base_require.cpp</option>
<option>base_adolc.hpp</option>
<option>base_float.hpp</option>
<option>base_double.hpp</option>
<option>base_complex.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>base_complex.hpp-&gt;</option>
<option>complex_poly.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Example</option>
<option>Include Order</option>
<option>CondExpOp</option>
<option>CondExpRel</option>
<option>EqualOpSeq</option>
<option>Identical</option>
<option>Ordered</option>
<option>Integer</option>
<option>azmul</option>
<option>isnan</option>
<option>Valid Unary Math</option>
<option>Invalid Unary Math</option>
<option>pow</option>
<option>numeric_limits</option>
<option>to_string</option>
</select>
</td>
</tr></table><br/>




<center><b><big><big>Enable use of AD&lt;Base&gt; where Base is std::complex&lt;double&gt;</big></big></b></center>
<br/>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br/>
The file <a href="complex_poly.cpp.xml" target="_top"><span style='white-space: nowrap'>complex_poly.cpp</span></a>
 contains an example use of
<code><font color="blue">std::complex&lt;double&gt;</font></code> type for a CppAD 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 type.
It returns true if it succeeds and false otherwise.

<br/>
<br/>
<b><big><a name="Include Order" id="Include Order">Include Order</a></big></b>
<br/>
This file is included before <code><font color="blue">&lt;cppad/cppad.hpp&gt;</font></code>
so it is necessary to define the error handler
in addition to including
<a href="base_require.xml#Include Order" target="_top"><span style='white-space: nowrap'>base_require.hpp</span></a>

<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;limits&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;complex&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/base_require.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/core/cppad_assert.hpp&gt;</span>
</tt></pre>
<b><big><a name="CondExpOp" id="CondExpOp">CondExpOp</a></big></b>
<br/>
The type <code><font color="blue">std::complex&lt;double&gt;</font></code> does not supports the
<code><font color="blue">&lt;</font></code>, <code><font color="blue">&lt;=</font></code>, <code><font color="blue">==</font></code>, <code><font color="blue">&gt;=</font></code>, and <code><font color="blue">&gt;</font></code> operators; see
<a href="base_cond_exp.xml#CondExpTemplate.Not Ordered" target="_top"><span style='white-space: nowrap'>not&#xA0;ordered</span></a>
.
Hence its <code><font color="blue">CondExpOp</font></code> function is defined by
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">CondExpOp</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">enum</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">CompareOp</span>      cop        <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="color: #990000">&amp;</span>left      <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="color: #990000">&amp;</span>right     <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="color: #990000">&amp;</span>trueCase  <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="color: #990000">&amp;</span>falseCase <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     CppAD<span style="color: #990000">::</span>ErrorHandler<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Call</span></span><span style="color: #990000">(</span>
               <span style="font-weight: bold"><span style="color: #0000FF">true</span></span>     <span style="color: #990000">,</span> __LINE__ <span style="color: #990000">,</span> __FILE__ <span style="color: #990000">,</span>
               <span style="color: #FF0000">"std::complex&lt;float&gt; CondExpOp(...)"</span><span style="color: #990000">,</span>
               <span style="color: #FF0000">"Error: cannot use CondExp with a complex type"</span>
          <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="CondExpRel" id="CondExpRel">CondExpRel</a></big></b>
<br/>
The <a href="base_cond_exp.xml#CondExpRel" target="_top"><span style='white-space: nowrap'>CPPAD_COND_EXP_REL</span></a>
 macro invocation
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_COND_EXP_REL</span></span><span style="color: #990000">(</span> std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #990000">)</span>
<span style="color: #FF0000">}</span>
</tt></pre>
used <code><font color="blue">CondExpOp</font></code> above to
define 
<code><font color="blue"><span style='white-space: nowrap'>CondExp</span></font><i><font color="black"><span style='white-space: nowrap'>Rel</span></font></i></code>
 for <code><font color="blue">std::complex&lt;double&gt;</font></code> arguments
and 
<code><i><font color="black"><span style='white-space: nowrap'>Rel</span></font></i></code>
 equal to
<code><font color="blue">Lt</font></code>, <code><font color="blue">Le</font></code>, <code><font color="blue">Eq</font></code>, <code><font color="blue">Ge</font></code>, and <code><font color="blue">Gt</font></code>.

<br/>
<br/>
<b><big><a name="EqualOpSeq" id="EqualOpSeq">EqualOpSeq</a></big></b>
<br/>
Complex numbers do not carry operation sequence information.
Thus they are equal in this sense if and only if there values are equal.
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">EqualOpSeq</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="color: #990000">&amp;</span>x <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="color: #990000">&amp;</span>y <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> x <span style="color: #990000">==</span> y<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Identical" id="Identical">Identical</a></big></b>
<br/>
Complex numbers do not carry operation sequence information.
Thus they are all parameters so the identical functions just check values.
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">IdenticalPar</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">IdenticalZero</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span>x <span style="color: #990000">==</span> std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span><span style="color: #993399">0</span><span style="color: #990000">.,</span> <span style="color: #993399">0</span><span style="color: #990000">.)</span> <span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">IdenticalOne</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span>x <span style="color: #990000">==</span> std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span><span style="color: #993399">1</span><span style="color: #990000">.,</span> <span style="color: #993399">0</span><span style="color: #990000">.)</span> <span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">IdenticalEqualPar</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt; &amp;x, const std::complex&lt;double&gt;</span> <span style="color: #990000">&amp;</span>y<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span>x <span style="color: #990000">==</span> y<span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Ordered" id="Ordered">Ordered</a></big></b>
<br/>
Complex types do not support comparison operators,
<pre><tt><span style="font-weight: bold"><span style="color: #000080"># undef</span></span>  CPPAD_USER_MACRO
<span style="font-weight: bold"><span style="color: #000080"># define</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>Fun<span style="color: #990000">)</span>                                     <span style="color: #990000">\</span>
<span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">Fun</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> x<span style="color: #990000">)</span>                     <span style="color: #990000">\</span>
<span style="color: #FF0000">{</span>      CppAD<span style="color: #990000">::</span>ErrorHandler<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Call</span></span><span style="color: #990000">(</span>                                  <span style="color: #990000">\</span>
               <span style="font-weight: bold"><span style="color: #0000FF">true</span></span>     <span style="color: #990000">,</span> __LINE__ <span style="color: #990000">,</span> __FILE__ <span style="color: #990000">,</span>                    <span style="color: #990000">\</span>
<span style="font-weight: bold"><span style="color: #000080">               #Fun</span></span><span style="color: #FF0000">"(x)"</span><span style="color: #990000">,</span>                                          <span style="color: #990000">\</span>
               <span style="color: #FF0000">"Error: cannot use "</span> #Fun <span style="color: #FF0000">" with x complex&lt;double&gt; "</span> <span style="color: #990000">\</span>
       <span style="color: #990000">);</span>                                                          <span style="color: #990000">\</span>
       <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>                                               <span style="color: #990000">\</span>
<span style="color: #FF0000">}</span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>LessThanZero<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>LessThanOrZero<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>GreaterThanOrZero<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>GreaterThanZero<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">abs_geq</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> x <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> y <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs</span></span><span style="color: #990000">(</span>x<span style="color: #990000">)</span> <span style="color: #990000">&gt;=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs</span></span><span style="color: #990000">(</span>y<span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Integer" id="Integer">Integer</a></big></b>
<br/>
The implementation of this function must agree
with the CppAD user specifications for complex arguments to the
<a href="integer.xml#x.Complex Types" target="_top"><span style='white-space: nowrap'>Integer</span></a>
 function:
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">int</span> <span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">int</span><span style="color: #990000">&gt;(</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">real</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="azmul" id="azmul">azmul</a></big></b>

<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_AZMUL</span></span><span style="color: #990000">(</span> std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #990000">)</span>
<span style="color: #FF0000">}</span>
</tt></pre>
<br/>
<b><big><a name="isnan" id="isnan">isnan</a></big></b>
<br/>
The gcc 4.1.1 complier defines the function

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;std::complex&lt;double&gt;::isnan(&#xA0;std::complex&lt;double&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>z</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;)<br/>
</span></font></code>
(which is not specified in the C++ 1998 standard ISO/IEC 14882).
This causes an ambiguity between the function above and the CppAD
<a href="nan.xml" target="_top"><span style='white-space: nowrap'>isnan</span></a>
 template function.
We avoid this ambiguity by defining a non-template version of
this function in the CppAD namespace.
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">isnan</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> z<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span>z <span style="color: #990000">!=</span> z<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Valid Unary Math" id="Valid Unary Math">Valid Unary Math</a></big></b>
<br/>
The following macro invocations define the standard unary
math functions that are valid with complex arguments and are
required to use <code><font color="blue">AD&lt; std::complex&lt;double&gt; &gt;</font></code>.
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_STANDARD_MATH_UNARY</span></span><span style="color: #990000">(</span>std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;,</span> cos<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_STANDARD_MATH_UNARY</span></span><span style="color: #990000">(</span>std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;,</span> cosh<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_STANDARD_MATH_UNARY</span></span><span style="color: #990000">(</span>std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;,</span> exp<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_STANDARD_MATH_UNARY</span></span><span style="color: #990000">(</span>std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;,</span> log<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_STANDARD_MATH_UNARY</span></span><span style="color: #990000">(</span>std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;,</span> sin<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_STANDARD_MATH_UNARY</span></span><span style="color: #990000">(</span>std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;,</span> sinh<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_STANDARD_MATH_UNARY</span></span><span style="color: #990000">(</span>std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;,</span> sqrt<span style="color: #990000">)</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Invalid Unary Math" id="Invalid Unary Math">Invalid Unary Math</a></big></b>
<br/>
The following macro definition and invocations define the standard unary
math functions that are invalid with complex arguments and are
required to use <code><font color="blue">AD&lt; std::complex&lt;double&gt; &gt;</font></code>.
<pre><tt><span style="font-weight: bold"><span style="color: #000080"># undef</span></span>  CPPAD_USER_MACRO
<span style="font-weight: bold"><span style="color: #000080"># define</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>Fun<span style="color: #990000">)</span>                                     <span style="color: #990000">\</span>
<span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">Fun</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> x<span style="color: #990000">)</span>     <span style="color: #990000">\</span>
<span style="color: #FF0000">{</span>      CppAD<span style="color: #990000">::</span>ErrorHandler<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Call</span></span><span style="color: #990000">(</span>                                  <span style="color: #990000">\</span>
               <span style="font-weight: bold"><span style="color: #0000FF">true</span></span>     <span style="color: #990000">,</span> __LINE__ <span style="color: #990000">,</span> __FILE__ <span style="color: #990000">,</span>                    <span style="color: #990000">\</span>
<span style="font-weight: bold"><span style="color: #000080">               #Fun</span></span><span style="color: #FF0000">"(x)"</span><span style="color: #990000">,</span>                                          <span style="color: #990000">\</span>
               <span style="color: #FF0000">"Error: cannot use "</span> #Fun <span style="color: #FF0000">" with x complex&lt;double&gt; "</span> <span style="color: #990000">\</span>
       <span style="color: #990000">);</span>                                                          <span style="color: #990000">\</span>
       <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>                             <span style="color: #990000">\</span>
<span style="color: #FF0000">}</span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>abs<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>fabs<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>acos<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>asin<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>atan<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>sign<span style="color: #990000">)</span>
<span style="font-weight: bold"><span style="color: #000080"># if</span></span> CPPAD_USE_CPLUSPLUS_2011
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>erf<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>asinh<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>acosh<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>atanh<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>expm1<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_MACRO</span></span><span style="color: #990000">(</span>log1p<span style="color: #990000">)</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="pow" id="pow">pow</a></big></b>
<br/>
The following defines a <code><font color="blue">CppAD::pow</font></code> function that
is required to use <code><font color="blue">AD&lt; std::complex&lt;double&gt; &gt;</font></code>:
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">pow</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="color: #990000">&amp;</span>x <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> <span style="color: #990000">&amp;</span>y <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">pow</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> y<span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="numeric_limits" id="numeric_limits">numeric_limits</a></big></b>
<br/>
The following defines the CppAD <a href="numeric_limits.xml" target="_top"><span style='white-space: nowrap'>numeric_limits</span></a>

for the type <code><font color="blue">std::complex&lt;double&gt;</font></code>:
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_NUMERIC_LIMITS</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">,</span> std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span>
<span style="color: #FF0000">}</span>
</tt></pre>
<br/>
<b><big><a name="to_string" id="to_string">to_string</a></big></b>
<br/>
The following defines the function CppAD <a href="to_string.xml" target="_top"><span style='white-space: nowrap'>to_string</span></a>

for the type <code><font color="blue">std::complex&lt;double&gt;</font></code>:
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TO_STRING</span></span><span style="color: #990000">(</span>std<span style="color: #990000">::</span>complex<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span>
<span style="color: #FF0000">}</span>
</tt></pre>

<hr/>Input File: cppad/core/base_complex.hpp

</body>
</html>
