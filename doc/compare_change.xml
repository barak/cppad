<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Comparison Changes Between Taping and Zero Order Forward</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Comparison Changes Between Taping and Zero Order Forward"/>
<meta name="keywords" id="keywords" content=" comparison changes between taping zero order forward Adfun compare_change syntax purpose f count speed number discussion op_index example "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_compare_change_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="size_order.xml" target="_top">Prev</a>
</td><td><a href="compare_change.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>FunEval</option>
<option>Forward</option>
<option>compare_change</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>abort_recording</option>
<option>seq_property</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>optimize</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>FunEval-&gt;</option>
<option>Forward</option>
<option>Reverse</option>
<option>Sparse</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Forward-&gt;</option>
<option>forward_zero</option>
<option>forward_one</option>
<option>forward_two</option>
<option>forward_order</option>
<option>forward_dir</option>
<option>size_order</option>
<option>compare_change</option>
<option>capacity_order</option>
<option>number_skip</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>compare_change-&gt;</option>
<option>compare_change.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>f</option>
<option>count</option>
<option>---..Speed</option>
<option>number</option>
<option>---..Discussion</option>
<option>op_index</option>
<option>---..Purpose</option>
<option>Example</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>Comparison Changes Between Taping and Zero Order Forward</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.compare_change_count(</span></font><i><font color="black"><span style='white-space: nowrap'>count</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>number</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.compare_change_number()<br/>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>op_index</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.compare_change_op_index()<br/>
<br/>
</span></font></code>
<b>See Also</b>
<a href="funcheck.xml" target="_top"><span style='white-space: nowrap'>FunCheck</span></a>



<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
We use 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>F</mi>
<mo stretchy="false">:</mo>
<msup><mi mathvariant='italic'>B</mi>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<msup><mi mathvariant='italic'>B</mi>
<mi mathvariant='italic'>m</mi>
</msup>
</mrow></math>

 to denote the
<a href="glossary.xml#AD Function" target="_top"><span style='white-space: nowrap'>AD&#xA0;function</span></a>
 corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
; i.e,
given 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mi mathvariant='italic'>B</mi>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

, 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>F</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 is defined by

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>F</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)&#xA0;=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward(0,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
see <a href="forward_zero.xml" target="_top"><span style='white-space: nowrap'>forward_zero</span></a>
.
If 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>

 is such that
all the algorithm <a href="compare.xml" target="_top"><span style='white-space: nowrap'>comparison</span></a>
 operations
have the same result as when the algorithm was taped,
The function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>F</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 and the algorithm will have the same values.
(This is a sufficient, but not necessary condition).





<br/>
<br/>
<b><big><a name="f" id="f">f</a></big></b>
<br/>
In the <code><font color="blue">compare_change_number</font></code> and <code><font color="blue">compare_change_op_index</font></code>
syntax, the object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
In the <code><font color="blue">compare_change_count</font></code>
syntax, the object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
<br/>
<b><big><a name="count" id="count">count</a></big></b>
<br/>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>count</span></font></i></code>
 has prototype

<code><i><font color="black"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font></i><font color="blue"><span style='white-space: nowrap'>count</span></font><i><font color="black"><span style='white-space: nowrap'><br/>
</span></font></i></code>
It specifies which comparison change should correspond to the
information stored in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 during subsequent calls to
<a href="forward_zero.xml" target="_top"><span style='white-space: nowrap'>forward_zero</span></a>
; i.e.,

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward(0,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
For example, if 
<code><i><font color="black"><span style='white-space: nowrap'>count</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;==&#xA0;1</span></font></code>
,
the operator index corresponding to the first comparison change
will be stored.
This is the default value used if 
<code><i><font color="black"><span style='white-space: nowrap'>count</span></font></i></code>
 is not specified.

<br/>
<br/>
<b><a name="count.Speed" id="count.Speed">Speed</a></b>
<br/>
The special case where 
<code><i><font color="black"><span style='white-space: nowrap'>count&#xA0;==&#xA0;0</span></font></i></code>
, should be faster because
the comparisons are not checked during

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward(0,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
<br/>
<b><big><a name="number" id="number">number</a></big></b>
<br/>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>number</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>number</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>count</span></font></i></code>
 is non-zero,

<code><i><font color="black"><span style='white-space: nowrap'>number</span></font></i></code>
 is the number of

<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 <a href="compare.xml" target="_top"><span style='white-space: nowrap'>comparison</span></a>
 operations,
corresponding to the previous call to

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward(0,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
that have a different result for this value of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>

than the value used when 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 was created by taping an algorithm.
If 
<code><i><font color="black"><span style='white-space: nowrap'>count</span></font></i></code>
 is zero,
or if no calls to 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward(0,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
 follow the previous
setting of 
<code><i><font color="black"><span style='white-space: nowrap'>count</span></font></i></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>number</span></font></i></code>
 is zero.

<br/>
<br/>
<b><a name="number.Discussion" id="number.Discussion">Discussion</a></b>
<br/>
If 
<code><i><font color="black"><span style='white-space: nowrap'>count</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>number</span></font></i></code>
 are non-zero,
you may want to re-tape the algorithm with the
<a href="glossary.xml#Tape.Independent Variable" target="_top"><span style='white-space: nowrap'>independent&#xA0;variables</span></a>

equal to the values in 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
,
so the AD operation sequence properly represents the algorithm
for this value of independent variables.
On the other hand, re-taping the AD operation sequence usually takes
significantly more time than evaluation using <a href="forward_zero.xml" target="_top"><span style='white-space: nowrap'>forward_zero</span></a>
.
If the functions values have not changed (see <a href="funcheck.xml" target="_top"><span style='white-space: nowrap'>FunCheck</span></a>
)
it may not be worth re-taping a new AD operation sequence.

<br/>
<br/>
<b><big><a name="op_index" id="op_index">op_index</a></big></b>
<br/>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>op_index</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>op_index</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>count</span></font></i></code>
 is non-zero,

<code><i><font color="black"><span style='white-space: nowrap'>op_index</span></font></i></code>
 is the operator index corresponding the

<code><i><font color="black"><span style='white-space: nowrap'>count</span></font></i></code>
-th comparison change during the previous call to

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward(0,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>count</span></font></i></code>
 is greater than the corresponding

<code><i><font color="black"><span style='white-space: nowrap'>number</span></font></i></code>
, there is no such comparison change and 
<code><i><font color="black"><span style='white-space: nowrap'>op_index</span></font></i></code>

will also be zero.
If 
<code><i><font color="black"><span style='white-space: nowrap'>count</span></font></i></code>
 is zero,
if the function 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 has been <a href="optimize.xml" target="_top"><span style='white-space: nowrap'>optimized</span></a>
,
or if no calls to 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward(0,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
 follow the previous
setting of 
<code><i><font color="black"><span style='white-space: nowrap'>count</span></font></i></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>op_index</span></font></i></code>
 is zero.

<br/>
<br/>
<b><a name="op_index.Purpose" id="op_index.Purpose">Purpose</a></b>
<br/>
The operator index can be used to generate an error during the taping
process so that the corresponding algorithm can be inspected.
In some cases, it is possible to re-design this part of the
algorithm to avoid the particular comparison operation.
For example, using an <a href="condexp.xml" target="_top"><span style='white-space: nowrap'>conditional&#xA0;expression</span></a>

may be appropriate in some cases.
See <a href="independent.xml#abort_op_index" target="_top"><span style='white-space: nowrap'>abort_op_index</span></a>
 in the syntax

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>abort_op_index</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
<br/>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br/>
<a href="compare_change.cpp.xml" target="_top"><span style='white-space: nowrap'>compare_change.cpp</span></a>

contains an example and test of this operation.
It returns true if they succeed and false otherwise.


<hr/>Input File: omh/forward/compare_change.omh

</body>
</html>
