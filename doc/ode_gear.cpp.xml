<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>OdeGear: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="OdeGear: Example and Test"/>
<meta name="keywords" id="keywords" content=" odegear: example test Odegear "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ode_gear.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="odegear.xml" target="_top">Prev</a>
</td><td><a href="odegearcontrol.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>OdeGear</option>
<option>ode_gear.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>utility-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>time_test</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>CppAD_vector</option>
<option>thread_alloc</option>
<option>index_sort</option>
<option>to_string</option>
<option>set_union</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>OdeGear-&gt;</option>
<option>ode_gear.cpp</option>
</select>
</td>
<td>ode_gear.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>OdeGear: Example and Test</big></big></b></center>
Define

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">:</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mo stretchy="false">&#x02192;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

 by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<msup><mi mathvariant='italic'>t</mi>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msup>
</mrow></math>

for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">&#x02026;</mo>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>n</mi>
<mn>-1</mn>
</mrow></math>

.
It follows that

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mtable rowalign="center" ><mtr><mtd columnalign="right" >
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">(</mo>
<mn>0</mn>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mn>0</mn>
</mtd><mtd columnalign="right" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>for</mi>
<mspace width='.3em'/>
<mi mathvariant='normal'>all</mi>
<mspace width='.3em'/>
</mstyle></mrow>
<mi mathvariant='italic'>i</mi>
</mtd></mtr><mtr><mtd columnalign="right" >
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mn>1</mn>
</mtd><mtd columnalign="right" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>if</mi>
<mspace width='.3em'/>
</mstyle></mrow>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>0</mn>
</mtd></mtr><mtr><mtd columnalign="right" >
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="center" >
<mo stretchy="false">=</mo>
</mtd><mtd columnalign="left" >
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
<msup><mi mathvariant='italic'>t</mi>
<mi mathvariant='italic'>i</mi>
</msup>
<mo stretchy="false">=</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
<msub><mi mathvariant='italic'>x</mi>
<mrow><mi mathvariant='italic'>i</mi>
<mn>-1</mn>
</mrow>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
</mtd><mtd columnalign="right" >
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>if</mi>
<mspace width='.3em'/>
</mstyle></mrow>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">&gt;</mo>
<mn>0</mn>
</mtd></mtr></mtable>
</mrow></math>

The example tests OdeGear using the relations above:

<code><font color="blue">
<pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/ode_gear.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>        <span style="font-style: italic"><span style="color: #9A1900">// For automatic differentiation</span></span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Fun</span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
          <span style="font-style: italic"><span style="color: #9A1900">// constructor</span></span>
          <span style="font-weight: bold"><span style="color: #000000">Fun</span></span><span style="color: #990000">(</span><span style="color: #009900">bool</span> use_x_<span style="color: #990000">)</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #000000">use_x</span></span><span style="color: #990000">(</span>use_x_<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// compute f(t, x) both for double and AD&lt;double&gt;</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">typename</span></span> <span style="color: #008080">Scalar</span><span style="color: #990000">&gt;</span>
          <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">Ode</span></span><span style="color: #990000">(</span>
               <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">Scalar</span>                    <span style="color: #990000">&amp;</span>t<span style="color: #990000">,</span>
               <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>Scalar<span style="color: #990000">)</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">,</span>
               <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>Scalar<span style="color: #990000">)</span>       <span style="color: #990000">&amp;</span>f<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> n  <span style="color: #990000">=</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
               <span style="color: #008080">Scalar</span> <span style="font-weight: bold"><span style="color: #000000">ti</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
               f<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>   <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">Scalar</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
               <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     ti <span style="color: #990000">*=</span> t<span style="color: #990000">;</span>
                    <span style="font-style: italic"><span style="color: #9A1900">// convert int(size_t) to avoid warning</span></span>
                    <span style="font-style: italic"><span style="color: #9A1900">// on _MSC_VER systems</span></span>
                    <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> use_x <span style="color: #990000">)</span>
                         f<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">int</span><span style="color: #990000">(</span>i<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>i<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>     f<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">int</span><span style="color: #990000">(</span>i<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> ti<span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>

          <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">Ode_dep</span></span><span style="color: #990000">(</span>
               <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">double</span>                    <span style="color: #990000">&amp;</span>t<span style="color: #990000">,</span>
               <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">,</span>
               <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span>       <span style="color: #990000">&amp;</span>f_x<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> <span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD<span style="color: #990000">;</span>

               <span style="color: #008080">size_t</span> n  <span style="color: #990000">=</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
               <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">T</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">X</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">F</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// set argument values</span></span>
               T<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> t<span style="color: #990000">;</span>
               <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                    X<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>

               <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables</span></span>
               <span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>X<span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// compute f(t, x)</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Ode</span></span><span style="color: #990000">(</span>T<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> X<span style="color: #990000">,</span> F<span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// define AD function object</span></span>
               <span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">fun</span></span><span style="color: #990000">(</span>X<span style="color: #990000">,</span> F<span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// compute partial of f w.r.t x</span></span>
               <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">dx</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">df</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    dx<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     dx<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
                    df <span style="color: #990000">=</span> fun<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> dx<span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                         f_x <span style="color: #990000">[</span>i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> df<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
                    dx<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>

     <span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">bool</span> use_x<span style="color: #990000">;</span>

     <span style="color: #FF0000">}</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">OdeGear</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// initial return value</span></span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">;</span>    <span style="font-style: italic"><span style="color: #9A1900">// temporary indices</span></span>

     <span style="color: #008080">size_t</span>  m <span style="color: #990000">=</span> <span style="color: #993399">4</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// index of next value in X</span></span>
     <span style="color: #008080">size_t</span>  n <span style="color: #990000">=</span> m<span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// number of components in x(t)</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// vector of times</span></span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">T</span></span><span style="color: #990000">(</span>m<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     <span style="color: #009900">double</span> step <span style="color: #990000">=</span> <span style="color: #990000">.</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
     T<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>        <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;=</span> m<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     T<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> T<span style="color: #990000">[</span>j<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> step<span style="color: #990000">;</span>
          step <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> step<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// initial values for x( T[m-j] )</span></span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">X</span></span><span style="color: #990000">((</span>m<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">double</span> ti <span style="color: #990000">=</span> T<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     X<span style="color: #990000">[</span> j <span style="color: #990000">*</span> n <span style="color: #990000">+</span> i <span style="color: #990000">]</span> <span style="color: #990000">=</span> ti<span style="color: #990000">;</span>
               ti <span style="color: #990000">*=</span> T<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// error bound</span></span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">e</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>

     <span style="color: #008080">size_t</span> use_x<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span> use_x <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> use_x <span style="color: #990000">&lt;</span> <span style="color: #993399">2</span><span style="color: #990000">;</span> use_x<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// function object depends on value of use_x</span></span>
          <span style="color: #008080">Fun</span> <span style="font-weight: bold"><span style="color: #000000">F</span></span><span style="color: #990000">(</span>use_x <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// compute OdeGear approximation for x( T[m] )</span></span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">OdeGear</span></span><span style="color: #990000">(</span>F<span style="color: #990000">,</span> m<span style="color: #990000">,</span> n<span style="color: #990000">,</span> T<span style="color: #990000">,</span> X<span style="color: #990000">,</span> e<span style="color: #990000">);</span>

          <span style="color: #009900">double</span> check <span style="color: #990000">=</span> T<span style="color: #990000">[</span>m<span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// method is exact up to order m and x[i] = t^{i+1}</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i <span style="color: #990000">+</span> <span style="color: #993399">1</span> <span style="color: #990000">&lt;=</span> m <span style="color: #990000">)</span> ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>
                    X<span style="color: #990000">[</span>m <span style="color: #990000">*</span> n <span style="color: #990000">+</span> i<span style="color: #990000">],</span> check<span style="color: #990000">,</span> <span style="color: #993399">1e-10</span><span style="color: #990000">,</span> <span style="color: #993399">1e-10</span>
               <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// error bound should be zero up to order m-1</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i <span style="color: #990000">+</span> <span style="color: #993399">1</span> <span style="color: #990000">&lt;</span> m <span style="color: #990000">)</span> ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>
                    e<span style="color: #990000">[</span>i<span style="color: #990000">],</span> <span style="color: #993399">0</span><span style="color: #990000">.,</span> <span style="color: #993399">1e-10</span><span style="color: #990000">,</span> <span style="color: #993399">1e-10</span>
               <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// check value for next i</span></span>
               check <span style="color: #990000">*=</span> T<span style="color: #990000">[</span>m<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: example/ode_gear.cpp

</body>
</html>
