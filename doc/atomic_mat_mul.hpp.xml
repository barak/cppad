<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Matrix Multiply as an Atomic Operation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Matrix Multiply as an Atomic Operation"/>
<meta name="keywords" id="keywords" content=" matrix multiply atomic operation see also dimensions start class definition constructor left operand element index right result forward reverse for_sparse_jac rev_sparse_jac rev_sparse_hes end "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_mat_mul.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="atomic_mat_mul.cpp.xml" target="_top">Prev</a>
</td><td><a href="boolvalued.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_base</option>
<option>atomic_mat_mul.cpp</option>
<option>atomic_mat_mul.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>atomic-&gt;</option>
<option>checkpoint</option>
<option>atomic_base</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>atomic_base-&gt;</option>
<option>atomic_ctor</option>
<option>atomic_option</option>
<option>atomic_afun</option>
<option>atomic_forward</option>
<option>atomic_reverse</option>
<option>atomic_for_sparse_jac</option>
<option>atomic_rev_sparse_jac</option>
<option>atomic_for_sparse_hes</option>
<option>atomic_rev_sparse_hes</option>
<option>atomic_base_clear</option>
<option>atomic_get_started.cpp</option>
<option>atomic_norm_sq.cpp</option>
<option>atomic_reciprocal.cpp</option>
<option>atomic_set_sparsity.cpp</option>
<option>atomic_tangent.cpp</option>
<option>atomic_eigen_mat_mul.cpp</option>
<option>atomic_eigen_mat_inv.cpp</option>
<option>atomic_eigen_cholesky.cpp</option>
<option>atomic_mat_mul.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>atomic_mat_mul.cpp-&gt;</option>
<option>atomic_mat_mul.hpp</option>
</select>
</td>
<td>atomic_mat_mul.hpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>See Also</option>
<option>Matrix Dimensions</option>
<option>Start Class Definition</option>
<option>Constructor</option>
<option>Left Operand Element Index</option>
<option>Right Operand Element Index</option>
<option>Result Element Index</option>
<option>Forward Matrix Multiply</option>
<option>Reverse Matrix Multiply</option>
<option>forward</option>
<option>reverse</option>
<option>for_sparse_jac</option>
<option>rev_sparse_jac</option>
<option>rev_sparse_hes</option>
<option>End Class Definition</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Matrix Multiply as an Atomic Operation</big></big></b></center>
<br/>
<b><big><a name="See Also" id="See Also">See Also</a></big></b>

<br/>
<a href="atomic_eigen_mat_mul.hpp.xml" target="_top"><span style='white-space: nowrap'>atomic_eigen_mat_mul.hpp</span></a>


<br/>
<br/>
<b><big><a name="Matrix Dimensions" id="Matrix Dimensions">Matrix Dimensions</a></big></b>
<br/>
This example puts the matrix dimensions in the atomic function arguments,
instead of the <a href="atomic_ctor.xml" target="_top"><span style='white-space: nowrap'>constructor</span></a>
, so that they can
be different for different calls to the atomic function.
These dimensions are:
<table><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>nr_left</span></font></i></code>
 </td><td align='left'  valign='top'>
 number of rows in the left matrix </td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>n_middle</span></font></i></code>
 </td><td align='left'  valign='top'>
 rows in the left matrix and columns in right </td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>nc_right</span></font></i></code>
 </td><td align='left'  valign='top'>
 number of columns in the right matrix
</td></tr>
</table>
<br/>
<b><big><a name="Start Class Definition" id="Start Class Definition">Start Class Definition</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// Begin empty namespace</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>
<span style="font-style: italic"><span style="color: #9A1900">//</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>set_union<span style="color: #990000">;</span>
<span style="font-style: italic"><span style="color: #9A1900">//</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// matrix result = left * right</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">atomic_mat_mul</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #FF0000">{</span></tt></pre>
<br/>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ---------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// constructor</span></span>
     <span style="font-weight: bold"><span style="color: #000000">atomic_mat_mul</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span> <span style="color: #990000">:</span> CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span><span style="color: #FF0000">"mat_mul"</span><span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>
<span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span></tt></pre>
<br/>
<b><big><a name="Left Operand Element Index" id="Left Operand Element Index">Left Operand Element Index</a></big></b>
<br/>
Index in the Taylor coefficient matrix 
<code><i><font color="black"><span style='white-space: nowrap'>tx</span></font></i></code>
 of a left matrix element.
<pre><tt>     <span style="color: #008080">size_t</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span> i        <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// left matrix row index</span></span>
          <span style="color: #008080">size_t</span> j        <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// left matrix column index</span></span>
          <span style="color: #008080">size_t</span> k        <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// Taylor coeffocient order</span></span>
          <span style="color: #008080">size_t</span> nk       <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// number of Taylor coefficients in tx</span></span>
          <span style="color: #008080">size_t</span> nr_left  <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// rows in left matrix</span></span>
          <span style="color: #008080">size_t</span> n_middle <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// rows in left and columns in right</span></span>
          <span style="color: #008080">size_t</span> nc_right <span style="color: #990000">)</span> <span style="font-style: italic"><span style="color: #9A1900">// columns in right matrix</span></span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> i <span style="color: #990000">&lt;</span> nr_left <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> j <span style="color: #990000">&lt;</span> n_middle <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span><span style="color: #993399">3</span> <span style="color: #990000">+</span> i <span style="color: #990000">*</span> n_middle <span style="color: #990000">+</span> j<span style="color: #990000">)</span> <span style="color: #990000">*</span> nk <span style="color: #990000">+</span> k<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Right Operand Element Index" id="Right Operand Element Index">Right Operand Element Index</a></big></b>
<br/>
Index in the Taylor coefficient matrix 
<code><i><font color="black"><span style='white-space: nowrap'>tx</span></font></i></code>
 of a right matrix element.
<pre><tt>     <span style="color: #008080">size_t</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span> i        <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// right matrix row index</span></span>
          <span style="color: #008080">size_t</span> j        <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// right matrix column index</span></span>
          <span style="color: #008080">size_t</span> k        <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// Taylor coeffocient order</span></span>
          <span style="color: #008080">size_t</span> nk       <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// number of Taylor coefficients in tx</span></span>
          <span style="color: #008080">size_t</span> nr_left  <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// rows in left matrix</span></span>
          <span style="color: #008080">size_t</span> n_middle <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// rows in left and columns in right</span></span>
          <span style="color: #008080">size_t</span> nc_right <span style="color: #990000">)</span> <span style="font-style: italic"><span style="color: #9A1900">// columns in right matrix</span></span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> i <span style="color: #990000">&lt;</span> n_middle <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> j <span style="color: #990000">&lt;</span> nc_right <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> offset <span style="color: #990000">=</span> <span style="color: #993399">3</span> <span style="color: #990000">+</span> nr_left <span style="color: #990000">*</span> n_middle<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span>offset <span style="color: #990000">+</span> i <span style="color: #990000">*</span> nc_right <span style="color: #990000">+</span> j<span style="color: #990000">)</span> <span style="color: #990000">*</span> nk <span style="color: #990000">+</span> k<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Result Element Index" id="Result Element Index">Result Element Index</a></big></b>
<br/>
Index in the Taylor coefficient matrix 
<code><i><font color="black"><span style='white-space: nowrap'>ty</span></font></i></code>
 of a result matrix element.
<pre><tt>     <span style="color: #008080">size_t</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span> i        <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// result matrix row index</span></span>
          <span style="color: #008080">size_t</span> j        <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// result matrix column index</span></span>
          <span style="color: #008080">size_t</span> k        <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// Taylor coeffocient order</span></span>
          <span style="color: #008080">size_t</span> nk       <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// number of Taylor coefficients in ty</span></span>
          <span style="color: #008080">size_t</span> nr_left  <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// rows in left matrix</span></span>
          <span style="color: #008080">size_t</span> n_middle <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// rows in left and columns in right</span></span>
          <span style="color: #008080">size_t</span> nc_right <span style="color: #990000">)</span> <span style="font-style: italic"><span style="color: #9A1900">// columns in right matrix</span></span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> i <span style="color: #990000">&lt;</span> nr_left  <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> j <span style="color: #990000">&lt;</span> nc_right <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span>i <span style="color: #990000">*</span> nc_right <span style="color: #990000">+</span> j<span style="color: #990000">)</span> <span style="color: #990000">*</span> nk <span style="color: #990000">+</span> k<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Forward Matrix Multiply" id="Forward Matrix Multiply">Forward Matrix Multiply</a></big></b>
<br/>
Forward mode multiply Taylor coefficients in 
<code><i><font color="black"><span style='white-space: nowrap'>tx</span></font></i></code>
 and sum into

<code><i><font color="black"><span style='white-space: nowrap'>ty</span></font></i></code>
 (for one pair of left and right orders)
<pre><tt>     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">forward_multiply</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                 k_left   <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// order for left coefficients</span></span>
          <span style="color: #008080">size_t</span>                 k_right  <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// order for right coefficients</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>  tx       <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// domain space Taylor coefficients</span></span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>  ty       <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// range space Taylor coefficients</span></span>
          <span style="color: #008080">size_t</span>                 nr_left  <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// rows in left matrix</span></span>
          <span style="color: #008080">size_t</span>                 n_middle <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// rows in left and columns in right</span></span>
          <span style="color: #008080">size_t</span>                 nc_right <span style="color: #990000">)</span> <span style="font-style: italic"><span style="color: #9A1900">// columns in right matrix</span></span>
     <span style="color: #FF0000">{</span>
          <span style="color: #008080">size_t</span> nx       <span style="color: #990000">=</span> <span style="color: #993399">3</span> <span style="color: #990000">+</span> <span style="color: #990000">(</span>nr_left <span style="color: #990000">+</span> nc_right<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_middle<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nk       <span style="color: #990000">=</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> nx<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> ny       <span style="color: #990000">=</span> nr_left <span style="color: #990000">*</span> nc_right<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nk <span style="color: #990000">==</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> ny <span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="color: #008080">size_t</span> k_result <span style="color: #990000">=</span> k_left <span style="color: #990000">+</span> k_right<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> k_result <span style="color: #990000">&lt;</span> nk <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_left<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_right<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="color: #009900">double</span> sum <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;</span> n_middle<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>
                              i<span style="color: #990000">,</span> ell<span style="color: #990000">,</span> k_left<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="color: #008080">size_t</span> i_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>
                              ell<span style="color: #990000">,</span> j<span style="color: #990000">,</span>  k_right<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         sum           <span style="color: #990000">+=</span> tx<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span> <span style="color: #990000">*</span> tx<span style="color: #990000">[</span>i_right<span style="color: #990000">];</span>
                    <span style="color: #FF0000">}</span>
                    <span style="color: #008080">size_t</span> i_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>
                         i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k_result<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                    <span style="color: #990000">);</span>
                    ty<span style="color: #990000">[</span>i_result<span style="color: #990000">]</span>   <span style="color: #990000">+=</span> sum<span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Reverse Matrix Multiply" id="Reverse Matrix Multiply">Reverse Matrix Multiply</a></big></b>
<br/>
Reverse mode partials of Taylor coefficients and sum into 
<code><i><font color="black"><span style='white-space: nowrap'>px</span></font></i></code>

(for one pair of left and right orders)
<pre><tt>     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">reverse_multiply</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                 k_left  <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// order for left coefficients</span></span>
          <span style="color: #008080">size_t</span>                 k_right <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// order for right coefficients</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>  tx      <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// domain space Taylor coefficients</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>  ty      <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// range space Taylor coefficients</span></span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>  px      <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// partials w.r.t. tx</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>  py      <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// partials w.r.t. ty</span></span>
          <span style="color: #008080">size_t</span>                 nr_left  <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// rows in left matrix</span></span>
          <span style="color: #008080">size_t</span>                 n_middle <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// rows in left and columns in right</span></span>
          <span style="color: #008080">size_t</span>                 nc_right <span style="color: #990000">)</span> <span style="font-style: italic"><span style="color: #9A1900">// columns in right matrix</span></span>
     <span style="color: #FF0000">{</span>
          <span style="color: #008080">size_t</span> nx       <span style="color: #990000">=</span> <span style="color: #993399">3</span> <span style="color: #990000">+</span> <span style="color: #990000">(</span>nr_left <span style="color: #990000">+</span> nc_right<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_middle<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nk       <span style="color: #990000">=</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> nx<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> ny       <span style="color: #990000">=</span> nr_left <span style="color: #990000">*</span> nc_right<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nk <span style="color: #990000">==</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> ny <span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> px<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> py<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="color: #008080">size_t</span> k_result <span style="color: #990000">=</span> k_left <span style="color: #990000">+</span> k_right<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> k_result <span style="color: #990000">&lt;</span> nk <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_left<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_right<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>
                         i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k_result<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                    <span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;</span> n_middle<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>
                              i<span style="color: #990000">,</span> ell<span style="color: #990000">,</span> k_left<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="color: #008080">size_t</span> i_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>
                              ell<span style="color: #990000">,</span> j<span style="color: #990000">,</span>  k_right<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="font-style: italic"><span style="color: #9A1900">// sum        += tx[i_left] * tx[i_right];</span></span>
                         px<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span>    <span style="color: #990000">+=</span> tx<span style="color: #990000">[</span>i_right<span style="color: #990000">]</span> <span style="color: #990000">*</span> py<span style="color: #990000">[</span>i_result<span style="color: #990000">];</span>
                         px<span style="color: #990000">[</span>i_right<span style="color: #990000">]</span>   <span style="color: #990000">+=</span> tx<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span>  <span style="color: #990000">*</span> py<span style="color: #990000">[</span>i_result<span style="color: #990000">];</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="forward" id="forward">forward</a></big></b>
<br/>
Routine called by CppAD during <a href="forward.xml" target="_top"><span style='white-space: nowrap'>Forward</span></a>
 mode.
<pre><tt>     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">forward</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                    q <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>      vx <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>      vy <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>    tx <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>    ty
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> n_order  <span style="color: #990000">=</span> p <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nr_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span> <span style="color: #993399">0</span> <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> <span style="color: #993399">0</span> <span style="color: #990000">]</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> n_middle <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span> <span style="color: #993399">1</span> <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> <span style="color: #993399">0</span> <span style="color: #990000">]</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> nc_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span> <span style="color: #993399">2</span> <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> <span style="color: #993399">0</span> <span style="color: #990000">]</span> <span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> nx       <span style="color: #990000">=</span> <span style="color: #993399">3</span> <span style="color: #990000">+</span> <span style="color: #990000">(</span>nr_left <span style="color: #990000">+</span> nc_right<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_middle<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> ny       <span style="color: #990000">=</span> nr_left <span style="color: #990000">*</span> nc_right<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> nx <span style="color: #990000">==</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> ny <span style="color: #990000">==</span> vy<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx <span style="color: #990000">*</span> n_order <span style="color: #990000">==</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> ny <span style="color: #990000">*</span> n_order <span style="color: #990000">==</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> ell<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// check if we are computing vy information</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> nk <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
               <span style="color: #008080">size_t</span> k  <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_left<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_right<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> var <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
                         <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;</span> n_middle<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                         <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>
                                   i<span style="color: #990000">,</span> ell<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                              <span style="color: #990000">);</span>
                              <span style="color: #008080">size_t</span> i_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>
                                   ell<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                              <span style="color: #990000">);</span>
                              <span style="color: #009900">bool</span>   nz_left <span style="color: #990000">=</span> vx<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span> <span style="color: #990000">|(</span>tx<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span>  <span style="color: #990000">!=</span> <span style="color: #993399">0</span><span style="color: #990000">.);</span>
                              <span style="color: #009900">bool</span>  nz_right <span style="color: #990000">=</span> vx<span style="color: #990000">[</span>i_right<span style="color: #990000">]|(</span>tx<span style="color: #990000">[</span>i_right<span style="color: #990000">]</span> <span style="color: #990000">!=</span> <span style="color: #993399">0</span><span style="color: #990000">.);</span>
                              <span style="font-style: italic"><span style="color: #9A1900">// if not multiplying by the constant zero</span></span>
                              <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> nz_left <span style="color: #990000">&amp;</span> nz_right <span style="color: #990000">)</span>
                                        var <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span>vx<span style="color: #990000">[</span>i_left<span style="color: #990000">])</span> <span style="color: #990000">|</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span>vx<span style="color: #990000">[</span>i_right<span style="color: #990000">]);</span>
                         <span style="color: #FF0000">}</span>
                         <span style="color: #008080">size_t</span> i_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>
                              i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         vy<span style="color: #990000">[</span>i_result<span style="color: #990000">]</span> <span style="color: #990000">=</span> var<span style="color: #990000">;</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// initialize result as zero</span></span>
          <span style="color: #008080">size_t</span> k<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_left<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_right<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> q<span style="color: #990000">;</span> k <span style="color: #990000">&lt;=</span> p<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>
                              i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> n_order<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         ty<span style="color: #990000">[</span>i_result<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> q<span style="color: #990000">;</span> k <span style="color: #990000">&lt;=</span> p<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// sum the produces that result in order k</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;=</span> k<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                    <span style="font-weight: bold"><span style="color: #000000">forward_multiply</span></span><span style="color: #990000">(</span>
                         ell<span style="color: #990000">,</span> k <span style="color: #990000">-</span> ell<span style="color: #990000">,</span> tx<span style="color: #990000">,</span> ty<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                    <span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// all orders are implented, so always return true</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="reverse" id="reverse">reverse</a></big></b>
<br/>
Routine called by CppAD during <a href="reverse.xml" target="_top"><span style='white-space: nowrap'>Reverse</span></a>
 mode.
<pre><tt>     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">reverse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                     p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>     tx <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>     ty <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>     px <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>     py
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> n_order  <span style="color: #990000">=</span> p <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nr_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span> <span style="color: #993399">0</span> <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> <span style="color: #993399">0</span> <span style="color: #990000">]</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> n_middle <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span> <span style="color: #993399">1</span> <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> <span style="color: #993399">0</span> <span style="color: #990000">]</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> nc_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span> <span style="color: #993399">2</span> <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> <span style="color: #993399">0</span> <span style="color: #990000">]</span> <span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> nx       <span style="color: #990000">=</span> <span style="color: #993399">3</span> <span style="color: #990000">+</span> <span style="color: #990000">(</span>nr_left <span style="color: #990000">+</span> nc_right<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_middle<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> ny       <span style="color: #990000">=</span> nr_left <span style="color: #990000">*</span> nc_right<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx <span style="color: #990000">*</span> n_order <span style="color: #990000">==</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> ny <span style="color: #990000">*</span> n_order <span style="color: #990000">==</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> px<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> py<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// initialize summation</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> px<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span> i<span style="color: #990000">++)</span>
               px<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// number of orders to differentiate</span></span>
          <span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> n_order<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>k<span style="color: #990000">--)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// differentiate the produces that result in order k</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;=</span> k<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                    <span style="font-weight: bold"><span style="color: #000000">reverse_multiply</span></span><span style="color: #990000">(</span>
                         ell<span style="color: #990000">,</span> k <span style="color: #990000">-</span> ell<span style="color: #990000">,</span> tx<span style="color: #990000">,</span> ty<span style="color: #990000">,</span> px<span style="color: #990000">,</span> py<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                    <span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// all orders are implented, so always return true</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="for_sparse_jac" id="for_sparse_jac">for_sparse_jac</a></big></b>
<br/>
Routines called by CppAD during <a href="forsparsejac.xml" target="_top"><span style='white-space: nowrap'>ForSparseJac</span></a>
.
<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// boolean sparsity patterns</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">for_sparse_jac</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                                q <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   r <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   s <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>                 x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="color: #008080">size_t</span> nr_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> n_middle <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> nc_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span>  nx      <span style="color: #990000">=</span> <span style="color: #993399">3</span> <span style="color: #990000">+</span> <span style="color: #990000">(</span>nr_left <span style="color: #990000">+</span> nc_right<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_middle<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span>  ny      <span style="color: #990000">=</span> nr_left <span style="color: #990000">*</span> nc_right<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx     <span style="color: #990000">==</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx <span style="color: #990000">*</span> q <span style="color: #990000">==</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> ny <span style="color: #990000">*</span> q <span style="color: #990000">==</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> p<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for S(x) = f'(x) * R</span></span>
          <span style="color: #008080">size_t</span> nk <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> k  <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_left<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_right<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>
                         i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                    <span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>p <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> p <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> p<span style="color: #990000">++)</span>
                         s<span style="color: #990000">[</span>i_result <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;</span> n_middle<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>
                              i<span style="color: #990000">,</span> ell<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="color: #008080">size_t</span> i_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>
                              ell<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>p <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> p <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> p<span style="color: #990000">++)</span>
                         <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// cast avoids Microsoft warning (should not be needed)</span></span>
                              s<span style="color: #990000">[</span>i_result <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span> r<span style="color: #990000">[</span>i_left <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p <span style="color: #990000">]</span> <span style="color: #990000">);</span>
                              s<span style="color: #990000">[</span>i_result <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span> r<span style="color: #990000">[</span>i_right <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p <span style="color: #990000">]</span> <span style="color: #990000">);</span>
                         <span style="color: #FF0000">}</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// set sparsity patterns</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">for_sparse_jac</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                                q <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     r <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     s <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>                 x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="color: #008080">size_t</span> nr_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> n_middle <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> nc_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span>  nx      <span style="color: #990000">=</span> <span style="color: #993399">3</span> <span style="color: #990000">+</span> <span style="color: #990000">(</span>nr_left <span style="color: #990000">+</span> nc_right<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_middle<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span>  ny      <span style="color: #990000">=</span> nr_left <span style="color: #990000">*</span> nc_right<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx <span style="color: #990000">==</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx <span style="color: #990000">==</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> ny <span style="color: #990000">==</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for S(x) = f'(x) * R</span></span>
          <span style="color: #008080">size_t</span> nk <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> k  <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_left<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_right<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>
                         i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                    <span style="color: #990000">);</span>
                    s<span style="color: #990000">[</span>i_result<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;</span> n_middle<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>
                              i<span style="color: #990000">,</span> ell<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="color: #008080">size_t</span> i_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>
                              ell<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
                         s<span style="color: #990000">[</span>i_result<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>s<span style="color: #990000">[</span>i_result<span style="color: #990000">],</span> r<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                         s<span style="color: #990000">[</span>i_result<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>s<span style="color: #990000">[</span>i_result<span style="color: #990000">],</span> r<span style="color: #990000">[</span>i_right<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="rev_sparse_jac" id="rev_sparse_jac">rev_sparse_jac</a></big></b>
<br/>
Routines called by CppAD during <a href="revsparsejac.xml" target="_top"><span style='white-space: nowrap'>RevSparseJac</span></a>
.
<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// boolean sparsity patterns</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_jac</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                                q <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                  rt <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                  st <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>                 x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="color: #008080">size_t</span> nr_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> n_middle <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> nc_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span>  nx      <span style="color: #990000">=</span> <span style="color: #993399">3</span> <span style="color: #990000">+</span> <span style="color: #990000">(</span>nr_left <span style="color: #990000">+</span> nc_right<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_middle<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span>  ny      <span style="color: #990000">=</span> nr_left <span style="color: #990000">*</span> nc_right<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx     <span style="color: #990000">==</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx <span style="color: #990000">*</span> q <span style="color: #990000">==</span> st<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> ny <span style="color: #990000">*</span> q <span style="color: #990000">==</span> rt<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> p<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// initialize</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nx<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>p <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> p <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> p<span style="color: #990000">++)</span>
                    st<span style="color: #990000">[</span> i <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p <span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for S(x)^T = f'(x)^T * R^T</span></span>
          <span style="color: #008080">size_t</span> nk <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> k  <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_left<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_right<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>
                         i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                    <span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;</span> n_middle<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>
                              i<span style="color: #990000">,</span> ell<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="color: #008080">size_t</span> i_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>
                              ell<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>p <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> p <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> p<span style="color: #990000">++)</span>
                         <span style="color: #FF0000">{</span>     st<span style="color: #990000">[</span>i_left <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span> rt<span style="color: #990000">[</span>i_result <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                              st<span style="color: #990000">[</span>i_right<span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span> rt<span style="color: #990000">[</span>i_result <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                         <span style="color: #FF0000">}</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// set sparsity patterns</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_jac</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                                q <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>    rt <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>    st <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>                 x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="color: #008080">size_t</span> nr_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> n_middle <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> nc_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span>  nx      <span style="color: #990000">=</span> <span style="color: #993399">3</span> <span style="color: #990000">+</span> <span style="color: #990000">(</span>nr_left <span style="color: #990000">+</span> nc_right<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_middle<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span>  ny        <span style="color: #990000">=</span> nr_left <span style="color: #990000">*</span> nc_right<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx <span style="color: #990000">==</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx <span style="color: #990000">==</span> st<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> ny <span style="color: #990000">==</span> rt<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// initialize</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nx<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               st<span style="color: #990000">[</span>i<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for S(x)^T = f'(x)^T * R^T</span></span>
          <span style="color: #008080">size_t</span> nk <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> k  <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_left<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_right<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>
                         i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                    <span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;</span> n_middle<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>
                              i<span style="color: #990000">,</span> ell<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="color: #008080">size_t</span> i_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>
                              ell<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
                         st<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span>  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>st<span style="color: #990000">[</span>i_left<span style="color: #990000">],</span>  rt<span style="color: #990000">[</span>i_result<span style="color: #990000">]);</span>
                         st<span style="color: #990000">[</span>i_right<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>st<span style="color: #990000">[</span>i_right<span style="color: #990000">],</span> rt<span style="color: #990000">[</span>i_result<span style="color: #990000">]);</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="rev_sparse_hes" id="rev_sparse_hes">rev_sparse_hes</a></big></b>
<br/>
Routines called by <a href="revsparsehes.xml" target="_top"><span style='white-space: nowrap'>RevSparseHes</span></a>
.
<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// set sparsity patterns</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_hes</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   vx<span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   s <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   t <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                q <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     r <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     u <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     v <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>                 x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="color: #008080">size_t</span> nr_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> n_middle <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> nc_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span>  nx        <span style="color: #990000">=</span> <span style="color: #993399">3</span> <span style="color: #990000">+</span> <span style="color: #990000">(</span>nr_left <span style="color: #990000">+</span> nc_right<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_middle<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span>  ny        <span style="color: #990000">=</span> nr_left <span style="color: #990000">*</span> nc_right<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> nx <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> nx <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> t<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> nx <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> nx <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> v<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> nx <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> ny <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> u<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> ny <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// initilaize sparsity patterns as false</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nx<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     t<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
               v<span style="color: #990000">[</span>j<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>
          <span style="color: #FF0000">}</span>
          <span style="color: #008080">size_t</span> nk <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> k  <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_left<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_right<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>
                         i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                    <span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;</span> n_middle<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>
                              i<span style="color: #990000">,</span> ell<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="color: #008080">size_t</span> i_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>
                              ell<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// Compute sparsity for T(x) = S(x) * f'(x).</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// We need not use vx with f'(x) back propagation.</span></span>
                         t<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span>  <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span> s<span style="color: #990000">[</span>i_result<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                         t<span style="color: #990000">[</span>i_right<span style="color: #990000">]</span> <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span> s<span style="color: #990000">[</span>i_result<span style="color: #990000">]</span> <span style="color: #990000">);</span>

                         <span style="font-style: italic"><span style="color: #9A1900">// V(x) = f'(x)^T * U(x) +  S(x) * f''(x) * R</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// U(x) = g''(y) * f'(x) * R</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// S(x) = g'(y)</span></span>

                         <span style="font-style: italic"><span style="color: #9A1900">// back propagate f'(x)^T * U(x)</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// (no need to use vx with f'(x) propogation)</span></span>
                         v<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span>  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>v<span style="color: #990000">[</span>i_left<span style="color: #990000">],</span>  u<span style="color: #990000">[</span>i_result<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                         v<span style="color: #990000">[</span>i_right<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>v<span style="color: #990000">[</span>i_right<span style="color: #990000">],</span> u<span style="color: #990000">[</span>i_result<span style="color: #990000">]</span> <span style="color: #990000">);</span>

                         <span style="font-style: italic"><span style="color: #9A1900">// back propagate S(x) * f''(x) * R</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// (here is where we must check for cross terms)</span></span>
                         <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> s<span style="color: #990000">[</span>i_result<span style="color: #990000">]</span> <span style="color: #990000">&amp;</span> vx<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span> <span style="color: #990000">&amp;</span> vx<span style="color: #990000">[</span>i_right<span style="color: #990000">]</span> <span style="color: #990000">)</span>
                         <span style="color: #FF0000">{</span>     v<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span>  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>v<span style="color: #990000">[</span>i_left<span style="color: #990000">],</span>  r<span style="color: #990000">[</span>i_right<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                              v<span style="color: #990000">[</span>i_right<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>v<span style="color: #990000">[</span>i_right<span style="color: #990000">],</span> r<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span>  <span style="color: #990000">);</span>
                         <span style="color: #FF0000">}</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// bool sparsity</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_hes</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   vx<span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   s <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   t <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                q <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   r <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   u <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   v <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>                 x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="color: #008080">size_t</span> nr_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> n_middle <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> nc_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span>  nx        <span style="color: #990000">=</span> <span style="color: #993399">3</span> <span style="color: #990000">+</span> <span style="color: #990000">(</span>nr_left <span style="color: #990000">+</span> nc_right<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_middle<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span>  ny        <span style="color: #990000">=</span> nr_left <span style="color: #990000">*</span> nc_right<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> nx <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> nx <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> t<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> nx <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> nx <span style="color: #990000">*</span> q <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> v<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> nx <span style="color: #990000">*</span> q <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> ny <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> u<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> ny <span style="color: #990000">*</span> q <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> p<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// initilaize sparsity patterns as false</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nx<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     t<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>p <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> p <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> p<span style="color: #990000">++)</span>
                    v<span style="color: #990000">[</span>j <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="color: #008080">size_t</span> nk <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> k  <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr_left<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> nc_right<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>
                         i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                    <span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;</span> n_middle<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i_left  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">left</span></span><span style="color: #990000">(</span>
                              i<span style="color: #990000">,</span> ell<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="color: #008080">size_t</span> i_right <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">right</span></span><span style="color: #990000">(</span>
                              ell<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> nk<span style="color: #990000">,</span> nr_left<span style="color: #990000">,</span> n_middle<span style="color: #990000">,</span> nc_right
                         <span style="color: #990000">);</span>
                         <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// Compute sparsity for T(x) = S(x) * f'(x).</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// We so not need to use vx with f'(x) propagation.</span></span>
                         t<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span>  <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span> s<span style="color: #990000">[</span>i_result<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                         t<span style="color: #990000">[</span>i_right<span style="color: #990000">]</span> <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span> s<span style="color: #990000">[</span>i_result<span style="color: #990000">]</span> <span style="color: #990000">);</span>

                         <span style="font-style: italic"><span style="color: #9A1900">// V(x) = f'(x)^T * U(x) +  S(x) * f''(x) * R</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// U(x) = g''(y) * f'(x) * R</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// S(x) = g'(y)</span></span>

                         <span style="font-style: italic"><span style="color: #9A1900">// back propagate f'(x)^T * U(x)</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// (no need to use vx with f'(x) propogation)</span></span>
                         <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>p <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> p <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> p<span style="color: #990000">++)</span>
                         <span style="color: #FF0000">{</span>     v<span style="color: #990000">[</span> i_left  <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span> u<span style="color: #990000">[</span> i_result <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                              v<span style="color: #990000">[</span> i_right <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span> u<span style="color: #990000">[</span> i_result <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                         <span style="color: #FF0000">}</span>

                         <span style="font-style: italic"><span style="color: #9A1900">// back propagate S(x) * f''(x) * R</span></span>
                         <span style="font-style: italic"><span style="color: #9A1900">// (here is where we must check for cross terms)</span></span>
                         <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> s<span style="color: #990000">[</span>i_result<span style="color: #990000">]</span> <span style="color: #990000">&amp;</span> vx<span style="color: #990000">[</span>i_left<span style="color: #990000">]</span> <span style="color: #990000">&amp;</span> vx<span style="color: #990000">[</span>i_right<span style="color: #990000">]</span> <span style="color: #990000">)</span>
                         <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>p <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> p <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> p<span style="color: #990000">++)</span>
                              <span style="color: #FF0000">{</span>     v<span style="color: #990000">[</span>i_left <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span>  <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span> r<span style="color: #990000">[</span>i_right <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                                   v<span style="color: #990000">[</span>i_right <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">|=</span> <span style="color: #009900">bool</span><span style="color: #990000">(</span> r<span style="color: #990000">[</span>i_left <span style="color: #990000">*</span> q <span style="color: #990000">+</span> p<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                              <span style="color: #FF0000">}</span>
                         <span style="color: #FF0000">}</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="End Class Definition" id="End Class Definition">End Class Definition</a></big></b>

<pre style='display:inline'><tt>
<span style="color: #FF0000">}</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// End of mat_mul class</span></span>
<span style="color: #FF0000">}</span>  <span style="font-style: italic"><span style="color: #9A1900">// End empty namespace</span></span>
</tt></pre>

<hr/>Input File: cppad/example/mat_mul.hpp

</body>
</html>
