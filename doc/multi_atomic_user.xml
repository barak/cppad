<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Defines a User Atomic Operation that Computes Square Root</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Defines a User Atomic Operation that Computes Square Root"/>
<meta name="keywords" id="keywords" content=" defines user atomic operation that computes square root syntax purpose au num_itr y_initial y_squared ay limitations source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_atomic_user_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="multi_atomic.cpp.xml" target="_top">Prev</a>
</td><td><a href="multi_atomic_common.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>multi_atomic.cpp</option>
<option>multi_atomic_user</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
<option>simple_ad_openmp.cpp</option>
<option>simple_ad_bthread.cpp</option>
<option>simple_ad_pthread.cpp</option>
<option>team_example.cpp</option>
<option>harmonic.cpp</option>
<option>multi_atomic.cpp</option>
<option>multi_newton.cpp</option>
<option>team_thread.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>multi_atomic.cpp-&gt;</option>
<option>multi_atomic_user</option>
<option>multi_atomic_common</option>
<option>multi_atomic_setup</option>
<option>multi_atomic_worker</option>
<option>multi_atomic_takedown</option>
<option>multi_atomic_run</option>
<option>multi_atomic_time</option>
</select>
</td>
<td>multi_atomic_user</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>au</option>
<option>---..num_itr</option>
<option>---..y_initial</option>
<option>---..y_squared</option>
<option>ay</option>
<option>Limitations</option>
<option>Source</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Defines a User Atomic Operation that Computes Square Root</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><font color="blue"><span style='white-space: nowrap'>atomic_user&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>a_square_root</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>a_square_root</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>au</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This user atomic operation computes a square root using Newton's method.
It is meant to be very inefficient in order to demonstrate timing results.

<br/>
<br/>
<b><big><a name="au" id="au">au</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>ADvector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>au</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>ADvector</span></font></i></code>
 is a
<a href="simplevector.xml" target="_top"><span style='white-space: nowrap'>simple&#xA0;vector&#xA0;class</span></a>
 with elements
of type <code><font color="blue">AD&lt;double&gt;</font></code>.
The size of 
<code><i><font color="black"><span style='white-space: nowrap'>au</span></font></i></code>
 is three.

<br/>
<br/>
<b><a name="au.num_itr" id="au.num_itr">num_itr</a></b>
<br/>
We use the notation

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_itr</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;size_t(&#xA0;Integer(&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>au</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]&#xA0;)&#xA0;)<br/>
</span></font></code>
for the number of Newton iterations in the computation of the square root
function.  The component 
<code><i><font color="black"><span style='white-space: nowrap'>au</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]</span></font></code>
 must be a
<a href="glossary.xml#Parameter" target="_top"><span style='white-space: nowrap'>parameter</span></a>
.

<br/>
<br/>
<b><a name="au.y_initial" id="au.y_initial">y_initial</a></b>
<br/>
We use the notation

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>y_initial</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>au</span></font></i><font color="blue"><span style='white-space: nowrap'>[1]<br/>
</span></font></code>
for the initial value of the Newton iterate.

<br/>
<br/>
<b><a name="au.y_squared" id="au.y_squared">y_squared</a></b>
<br/>
We use the notation

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>y_squared</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>au</span></font></i><font color="blue"><span style='white-space: nowrap'>[2]<br/>
</span></font></code>
for the value we are taking the square root of.

<br/>
<br/>
<b><big><a name="ay" id="ay">ay</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>ADvector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
The size of 
<code><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i></code>
 is one and

<code><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]</span></font></code>
 is the square root of 
<code><i><font color="black"><span style='white-space: nowrap'>y_squared</span></font></i></code>
.

<br/>
<br/>
<b><big><a name="Limitations" id="Limitations">Limitations</a></big></b>
<br/>
Only zero order forward mode is implements for the
<code><font color="blue">atomic_user</font></code> class.

<br/>
<br/>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<span style="font-style: italic"><span style="color: #9A1900">// includes used by all source code in multi_atomic.cpp file</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"multi_atomic.hpp"</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"team_thread.hpp"</span>
<span style="font-style: italic"><span style="color: #9A1900">//</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// fast multi-threading memory allocator</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>       <span style="font-style: italic"><span style="color: #9A1900">// uses thread_alloc</span></span>

<span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">atomic_user</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ctor</span></span>
     <span style="font-weight: bold"><span style="color: #000000">atomic_user</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
     <span style="color: #990000">:</span> CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span><span style="color: #FF0000">"atomic_square_root"</span><span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>
<span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span>
     <span style="font-style: italic"><span style="color: #9A1900">// forward mode routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">forward</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                   p   <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                   q   <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>      vu  <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>            vy  <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>    tu  <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>          ty  <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> tu<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> <span style="color: #990000">(</span>q <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> <span style="color: #990000">(</span>q <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">3</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// only implementing zero order forward for this example</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> q <span style="color: #990000">!=</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// extract components of argument vector</span></span>
          <span style="color: #008080">size_t</span> num_itr    <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> tu<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">);</span>
          <span style="color: #009900">double</span> y_initial  <span style="color: #990000">=</span> tu<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          <span style="color: #009900">double</span> y_squared  <span style="color: #990000">=</span> tu<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// check for setting variable information</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> vu<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> vu<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
               vy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> vu<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">||</span> vu<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Use Newton's method to solve f(y) = y^2 = y_squared</span></span>
          <span style="color: #009900">double</span> y_itr <span style="color: #990000">=</span> y_initial<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> itr <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> itr <span style="color: #990000">&lt;</span> num_itr<span style="color: #990000">;</span> itr<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// solve (y - y_itr) * f'(y_itr) = y_squared - y_itr^2</span></span>
               <span style="color: #009900">double</span> fp_itr <span style="color: #990000">=</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> y_itr<span style="color: #990000">;</span>
               y_itr         <span style="color: #990000">=</span> y_itr <span style="color: #990000">+</span> <span style="color: #990000">(</span>y_squared <span style="color: #990000">-</span> y_itr <span style="color: #990000">*</span> y_itr<span style="color: #990000">)</span> <span style="color: #990000">/</span> fp_itr<span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// return the Newton approximation for f(y) = y_squared</span></span>
          ty<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> y_itr<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: example/multi_thread/multi_atomic.cpp

</body>
</html>
