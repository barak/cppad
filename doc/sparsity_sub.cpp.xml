<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Sparsity Patterns For a Subset of Variables: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Sparsity Patterns For a Subset of Variables: Example and Test"/>
<meta name="keywords" id="keywords" content=" sparsity patterns for a subset of variables: example and test see also forsparsejac revsparsehes "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparsity_sub.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="rev_sparse_hes.cpp.xml" target="_top">Prev</a>
</td><td><a href="bool_sparsity.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>FunEval</option>
<option>Sparse</option>
<option>RevSparseHes</option>
<option>sparsity_sub.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>FunEval-&gt;</option>
<option>Forward</option>
<option>Reverse</option>
<option>Sparse</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Sparse-&gt;</option>
<option>ForSparseJac</option>
<option>RevSparseJac</option>
<option>dependency.cpp</option>
<option>RevSparseHes</option>
<option>bool_sparsity.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>RevSparseHes-&gt;</option>
<option>rev_sparse_hes.cpp</option>
<option>sparsity_sub.cpp</option>
</select>
</td>
<td>sparsity_sub.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>See Also</option>
<option>ForSparseJac</option>
<option>RevSparseHes</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>Sparsity Patterns For a Subset of Variables: Example and Test</big></big></b></center>
<br/>
<b><big><a name="See Also" id="See Also">See Also</a></big></b>

<br/>
<a href="sparse_sub_hes.cpp.xml" target="_top"><span style='white-space: nowrap'>sparse_sub_hes.cpp</span></a>
, <a href="sub_sparse_hes.cpp.xml" target="_top"><span style='white-space: nowrap'>sub_sparse_hes.cpp</span></a>
.

<br/>
<br/>
<b><big><a name="ForSparseJac" id="ForSparseJac">ForSparseJac</a></big></b>
<br/>
The routine <a href="forsparsejac.xml" target="_top"><span style='white-space: nowrap'>ForSparseJac</span></a>
 is used to compute the
sparsity for both the full Jacobian (see 
<code><i><font color="black"><span style='white-space: nowrap'>s</span></font></i></code>
)
and a subset of the Jacobian (see 
<code><i><font color="black"><span style='white-space: nowrap'>s2</span></font></i></code>
).

<br/>
<br/>
<b><big><a name="RevSparseHes" id="RevSparseHes">RevSparseHes</a></big></b>
<br/>
The routine <a href="revsparsehes.xml" target="_top"><span style='white-space: nowrap'>RevSparseHes</span></a>
 is used to compute both
sparsity for both the full Hessian (see 
<code><i><font color="black"><span style='white-space: nowrap'>h</span></font></i></code>
)
and a subset of the Hessian (see 
<code><i><font color="black"><span style='white-space: nowrap'>h2</span></font></i></code>
).

<code><font color="blue">
<pre style='display:inline'> 
# include &lt;cppad/cppad.hpp&gt;

bool sparsity_sub(void)
{	// C++ source code
	bool ok = true;
	//
	using std::cout;
	using CppAD::vector;
	using CppAD::AD;
	using CppAD::vectorBool;

	size_t n = 4;
	size_t m = n-1;
	vector&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt; ax(n), ay(m);
	for(size_t j = 0; j &lt; n; j++)
		ax[j] = double(j+1);
	CppAD::<a href="independent.xml" target="_top">Independent</a>(ax);
	for(size_t i = 0; i &lt; m; i++)
		ay[i] = (ax[i+1] - ax[i]) * (ax[i+1] - ax[i]);
	CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f(ax, ay);

	// Evaluate the full Jacobian sparsity pattern for f
	vectorBool r(n * n), s(m * n);
	for(size_t j = 0 ; j &lt; n; j++)
	{	for(size_t i = 0; i &lt; n; i++)
			r[i * n + j] = (i == j);
	}
	s = f.ForSparseJac(n, r);

	// evaluate the sparsity for the Hessian of f_0 + ... + f_{m-1}
	vectorBool t(m), h(n * n);
	for(size_t i = 0; i &lt; m; i++)
		t[i] = true;
	h = f.RevSparseHes(n, t);

	// evaluate the Jacobian sparsity pattern for first n/2 components of x
	size_t n2 = n / 2;
	vectorBool r2(n * n2), s2(m * n2);
	for(size_t j = 0 ; j &lt; n2; j++)
	{	for(size_t i = 0; i &lt; n; i++)
			r2[i * n2 + j] = (i == j);
	}
	s2 = f.ForSparseJac(n2, r2);

	// evaluate the sparsity for the subset of Hessian of
	// f_0 + ... + f_{m-1} where first partial has only first n/2 components
	vectorBool h2(n2 * n);
	h2 = f.RevSparseHes(n2, t);

	// check sparsity pattern for Jacobian
	for(size_t i = 0; i &lt; m; i++)
	{	for(size_t j = 0; j &lt; n2; j++)
			ok &amp;= s2[i * n2 + j] == s[i * n + j];
	}

	// check sparsity pattern for Hessian
	for(size_t i = 0; i &lt; n2; i++)
	{	for(size_t j = 0; j &lt; n; j++)
			ok &amp;= h2[i * n + j] == h[i * n + j];
	}
	return ok;
}
</pre>

</font></code>


<hr/>Input File: example/sparsity_sub.cpp

</body>
</html>
