<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Simple Vector Template Class: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Simple Vector Template Class: Example and Test"/>
<meta name="keywords" id="keywords" content=" simple vector template class: example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_simple_vector.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="simplevector.xml" target="_top">Prev</a>
</td><td><a href="checksimplevector.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>SimpleVector</option>
<option>simple_vector.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>utility-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>time_test</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>CppAD_vector</option>
<option>thread_alloc</option>
<option>index_sort</option>
<option>to_string</option>
<option>set_union</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>SimpleVector-&gt;</option>
<option>simple_vector.cpp</option>
</select>
</td>
<td>simple_vector.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>Simple Vector Template Class: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;iostream&gt;</span>                   <span style="font-style: italic"><span style="color: #9A1900">// std::cout and std::endl</span></span>

<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;vector&gt;</span>                     <span style="font-style: italic"><span style="color: #9A1900">// std::vector</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;valarray&gt;</span>                   <span style="font-style: italic"><span style="color: #9A1900">// std::valarray</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/vector.hpp&gt;</span>       <span style="font-style: italic"><span style="color: #9A1900">// CppAD::vector</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/check_simple_vector.hpp&gt;</span>  <span style="font-style: italic"><span style="color: #9A1900">// CppAD::CheckSimpleVector</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">typename</span></span> <span style="color: #008080">Vector</span><span style="color: #990000">&gt;</span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">Ok</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// type corresponding to elements of Vector</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">typename</span></span> <span style="color: #008080">Vector</span><span style="color: #990000">::</span><span style="color: #008080">value_type</span> Scalar<span style="color: #990000">;</span>

          <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>             <span style="font-style: italic"><span style="color: #9A1900">// initialize testing flag</span></span>

          <span style="color: #008080">Vector</span> x<span style="color: #990000">;</span>                   <span style="font-style: italic"><span style="color: #9A1900">// use the default constructor</span></span>
          ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>      <span style="font-style: italic"><span style="color: #9A1900">// test size for an empty vector</span></span>
          <span style="color: #008080">Vector</span> <span style="font-weight: bold"><span style="color: #000000">y</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>                <span style="font-style: italic"><span style="color: #9A1900">// use the sizing constructor</span></span>
          ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">);</span>      <span style="font-style: italic"><span style="color: #9A1900">// size for an vector with elements</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// non-const access to the elements of y</span></span>
          <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> <span style="color: #993399">2</span><span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               y<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">Scalar</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">Vector</span> <span style="font-weight: bold"><span style="color: #000000">z</span></span><span style="color: #990000">(</span>y<span style="color: #990000">);</span>          <span style="font-style: italic"><span style="color: #9A1900">// copy constructor</span></span>
          x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>                <span style="font-style: italic"><span style="color: #9A1900">// resize</span></span>
          x <span style="color: #990000">=</span> z<span style="color: #990000">;</span>                      <span style="font-style: italic"><span style="color: #9A1900">// vector assignment</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// use the const access to the elements of x</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// and test the values of elements of x, y, z</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> <span style="color: #993399">2</span><span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #000000">Scalar</span></span><span style="color: #990000">(</span>i<span style="color: #990000">));</span>
               ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #000000">Scalar</span></span><span style="color: #990000">(</span>i<span style="color: #990000">));</span>
               ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>z<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #000000">Scalar</span></span><span style="color: #990000">(</span>i<span style="color: #990000">));</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">SimpleVector</span></span> <span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// use routine above to check these cases</span></span>
     ok <span style="color: #990000">&amp;=</span> Ok<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;();</span>
     ok <span style="color: #990000">&amp;=</span> Ok<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>valarray<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;();</span>
     ok <span style="color: #990000">&amp;=</span> Ok<span style="color: #990000">&lt;</span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">int</span><span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;();</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> _MSC_VER
     <span style="font-style: italic"><span style="color: #9A1900">// Avoid Microsoft following compiler warning:  'size_t' :</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// forcing value to bool 'true' or 'false' (performance warning)</span></span>
     ok <span style="color: #990000">&amp;=</span> Ok<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;();</span>
     ok <span style="color: #990000">&amp;=</span> Ok<span style="color: #990000">&lt;</span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;();</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// use CheckSimpleVector for more extensive testing</span></span>
     CppAD<span style="color: #990000">::</span>CheckSimpleVector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">,</span> std<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span>  <span style="color: #990000">&gt;();</span>
     CppAD<span style="color: #990000">::</span>CheckSimpleVector<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">,</span>  std<span style="color: #990000">::</span>valarray<span style="color: #990000">&lt;</span><span style="color: #009900">float</span><span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;();</span>
     CppAD<span style="color: #990000">::</span>CheckSimpleVector<span style="color: #990000">&lt;</span><span style="color: #009900">int</span><span style="color: #990000">,</span>    CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">int</span><span style="color: #990000">&gt;</span>   <span style="color: #990000">&gt;();</span>
     CppAD<span style="color: #990000">::</span>CheckSimpleVector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">,</span>   std<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;</span>    <span style="color: #990000">&gt;();</span>
     CppAD<span style="color: #990000">::</span>CheckSimpleVector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">,</span>   CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;</span>  <span style="color: #990000">&gt;();</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: example/simple_vector.cpp

</body>
</html>
