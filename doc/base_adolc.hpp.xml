<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Enable use of AD&lt;Base&gt; where Base is Adolc's adouble Type</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Enable use of AD&lt;Base&gt; where Base is Adolc's adouble Type"/>
<meta name="keywords" id="keywords" content=" enable use ad&lt;base&gt; where base is adolc's adouble type syntax example include files condexpop condexprel equalopseq identical integer azmul ordered unary standard math erf asinh acosh atanh expm1 log1p sign abs pow numeric_limits to_string hash_code "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_base_adolc.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="base_require.cpp.xml" target="_top">Prev</a>
</td><td><a href="mul_level_adolc.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>base_require</option>
<option>base_example</option>
<option>base_adolc.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>ad_ctor</option>
<option>ad_assign</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>base_require-&gt;</option>
<option>base_member</option>
<option>base_cond_exp</option>
<option>base_identical</option>
<option>base_ordered</option>
<option>base_std_math</option>
<option>base_limits</option>
<option>base_to_string</option>
<option>base_hash</option>
<option>base_example</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>base_example-&gt;</option>
<option>base_alloc.hpp</option>
<option>base_require.cpp</option>
<option>base_adolc.hpp</option>
<option>base_float.hpp</option>
<option>base_double.hpp</option>
<option>base_complex.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>base_adolc.hpp-&gt;</option>
<option>mul_level_adolc.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Example</option>
<option>Include Files</option>
<option>CondExpOp</option>
<option>CondExpRel</option>
<option>EqualOpSeq</option>
<option>Identical</option>
<option>Integer</option>
<option>azmul</option>
<option>Ordered</option>
<option>Unary Standard Math</option>
<option>erf, asinh, acosh, atanh, expm1, log1p</option>
<option>sign</option>
<option>abs</option>
<option>pow</option>
<option>numeric_limits</option>
<option>to_string</option>
<option>hash_code</option>
</select>
</td>
</tr></table><br/>




<center><b><big><big>Enable use of AD&lt;Base&gt; where Base is Adolc's adouble Type</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><font color="blue"><span style='white-space: nowrap'>#&#xA0;include&#xA0;&lt;cppad/example/base_adolc.hpp&gt;<br/>
</span></font></code>
<br/>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br/>
The file <a href="mul_level_adolc.cpp.xml" target="_top"><span style='white-space: nowrap'>mul_level_adolc.cpp</span></a>
 contains an example use of
Adolc's <code><font color="blue">adouble</font></code> type for a CppAD 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 type.
It returns true if it succeeds and false otherwise.
The file <a href="mul_level_adolc_ode.cpp.xml" target="_top"><span style='white-space: nowrap'>mul_level_adolc_ode.cpp</span></a>
 contains a more realistic
(and complex) example.

<br/>
<br/>
<b><big><a name="Include Files" id="Include Files">Include Files</a></big></b>
<br/>
This file <code><font color="blue">base_adolc.hpp</font></code> requires <code><font color="blue">adouble</font></code> to be defined.
In addition, it is included before <code><font color="blue">&lt;cppad/cppad.hpp&gt;</font></code>,
but it needs to include parts of CppAD that are used by this file.
This is done with the following include commands:
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;adolc/adolc.h&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/base_require.hpp&gt;</span>
</tt></pre>
<br/>
<b><big><a name="CondExpOp" id="CondExpOp">CondExpOp</a></big></b>
<br/>
The type <code><font color="blue">adouble</font></code> supports a conditional assignment function
with the syntax

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;condassign(</span></font><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>b</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>d</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
which evaluates to

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;(</span></font><i><font color="black"><span style='white-space: nowrap'>b</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;&gt;&#xA0;0)&#xA0;?&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;:&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>d</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br/>
</span></font></code>
This enables one to include conditionals in the recording of
<code><font color="blue">adouble</font></code> operations and later evaluation for different
values of the independent variables
(in the same spirit as the CppAD <a href="condexp.xml" target="_top"><span style='white-space: nowrap'>CondExp</span></a>
 function).
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #008080">adouble</span> <span style="font-weight: bold"><span style="color: #000000">CondExpOp</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">enum</span></span>  CppAD<span style="color: #990000">::</span><span style="color: #008080">CompareOp</span>     cop <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span>            <span style="color: #990000">&amp;</span>left <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span>           <span style="color: #990000">&amp;</span>right <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span>        <span style="color: #990000">&amp;</span>trueCase <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span>       <span style="color: #990000">&amp;</span>falseCase <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">adouble</span> result<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">switch</span></span><span style="color: #990000">(</span> cop <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>
               <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> CompareLt<span style="color: #990000">:</span> <span style="font-style: italic"><span style="color: #9A1900">// left &lt; right</span></span>
               <span style="font-weight: bold"><span style="color: #000000">condassign</span></span><span style="color: #990000">(</span>result<span style="color: #990000">,</span> right <span style="color: #990000">-</span> left<span style="color: #990000">,</span> trueCase<span style="color: #990000">,</span> falseCase<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

               <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> CompareLe<span style="color: #990000">:</span> <span style="font-style: italic"><span style="color: #9A1900">// left &lt;= right</span></span>
               <span style="font-weight: bold"><span style="color: #000000">condassign</span></span><span style="color: #990000">(</span>result<span style="color: #990000">,</span> left <span style="color: #990000">-</span> right<span style="color: #990000">,</span> falseCase<span style="color: #990000">,</span> trueCase<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

               <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> CompareEq<span style="color: #990000">:</span> <span style="font-style: italic"><span style="color: #9A1900">// left == right</span></span>
               <span style="font-weight: bold"><span style="color: #000000">condassign</span></span><span style="color: #990000">(</span>result<span style="color: #990000">,</span> left <span style="color: #990000">-</span> right<span style="color: #990000">,</span> falseCase<span style="color: #990000">,</span> trueCase<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #000000">condassign</span></span><span style="color: #990000">(</span>result<span style="color: #990000">,</span> right <span style="color: #990000">-</span> left<span style="color: #990000">,</span> falseCase<span style="color: #990000">,</span> result<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

               <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> CompareGe<span style="color: #990000">:</span> <span style="font-style: italic"><span style="color: #9A1900">// left &gt;= right</span></span>
               <span style="font-weight: bold"><span style="color: #000000">condassign</span></span><span style="color: #990000">(</span>result<span style="color: #990000">,</span> right <span style="color: #990000">-</span> left<span style="color: #990000">,</span> falseCase<span style="color: #990000">,</span> trueCase<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

               <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> CompareGt<span style="color: #990000">:</span> <span style="font-style: italic"><span style="color: #9A1900">// left &gt; right</span></span>
               <span style="font-weight: bold"><span style="color: #000000">condassign</span></span><span style="color: #990000">(</span>result<span style="color: #990000">,</span> left <span style="color: #990000">-</span> right<span style="color: #990000">,</span> trueCase<span style="color: #990000">,</span> falseCase<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #008080">               default:</span></span>
               CppAD<span style="color: #990000">::</span>ErrorHandler<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Call</span></span><span style="color: #990000">(</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">true</span></span>     <span style="color: #990000">,</span> __LINE__ <span style="color: #990000">,</span> __FILE__ <span style="color: #990000">,</span>
                    <span style="color: #FF0000">"CppAD::CondExp"</span><span style="color: #990000">,</span>
                    <span style="color: #FF0000">"Error: for unknown reason."</span>
               <span style="color: #990000">);</span>
               result <span style="color: #990000">=</span> trueCase<span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> result<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="CondExpRel" id="CondExpRel">CondExpRel</a></big></b>
<br/>
The <a href="base_cond_exp.xml#CondExpRel" target="_top"><span style='white-space: nowrap'>CPPAD_COND_EXP_REL</span></a>
 macro invocation
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_COND_EXP_REL</span></span><span style="color: #990000">(</span>adouble<span style="color: #990000">)</span>
<span style="color: #FF0000">}</span>
</tt></pre>
<br/>
<b><big><a name="EqualOpSeq" id="EqualOpSeq">EqualOpSeq</a></big></b>
<br/>
The Adolc user interface does not specify a way to determine if
two <code><font color="blue">adouble</font></code> variables correspond to the same operations sequence.
Make <code><font color="blue">EqualOpSeq</font></code> an error if it gets used:
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">EqualOpSeq</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span> <span style="color: #990000">&amp;</span>y<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     CppAD<span style="color: #990000">::</span>ErrorHandler<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Call</span></span><span style="color: #990000">(</span>
               <span style="font-weight: bold"><span style="color: #0000FF">true</span></span>     <span style="color: #990000">,</span> __LINE__ <span style="color: #990000">,</span> __FILE__ <span style="color: #990000">,</span>
               <span style="color: #FF0000">"CppAD::EqualOpSeq(x, y)"</span><span style="color: #990000">,</span>
               <span style="color: #FF0000">"Error: adouble does not support EqualOpSeq."</span>
          <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Identical" id="Identical">Identical</a></big></b>
<br/>
The Adolc user interface does not specify a way to determine if an
<code><font color="blue">adouble</font></code> depends on the independent variables.
To be safe (but slow) return <code><font color="blue">false</font></code> in all the cases below.
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">IdenticalPar</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">IdenticalZero</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">IdenticalOne</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">IdenticalEqualPar</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span> <span style="color: #990000">&amp;</span>y<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Integer" id="Integer">Integer</a></big></b>

<pre style='display:inline'><tt>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">int</span> <span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>    <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">int</span><span style="color: #990000">&gt;(</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">getValue</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
</tt></pre>
<br/>
<b><big><a name="azmul" id="azmul">azmul</a></big></b>

<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_AZMUL</span></span><span style="color: #990000">(</span> adouble <span style="color: #990000">)</span>
<span style="color: #FF0000">}</span>
</tt></pre>
<br/>
<b><big><a name="Ordered" id="Ordered">Ordered</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">GreaterThanZero</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>    <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span>x <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span><span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">GreaterThanOrZero</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>    <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span>x <span style="color: #990000">&gt;=</span> <span style="color: #993399">0</span><span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">LessThanZero</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>    <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span>x <span style="color: #990000">&lt;</span> <span style="color: #993399">0</span><span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">LessThanOrZero</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">adouble</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>    <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(</span>x <span style="color: #990000">&lt;=</span> <span style="color: #993399">0</span><span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">abs_geq</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> adouble<span style="color: #990000">&amp;</span> x<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> adouble<span style="color: #990000">&amp;</span> y<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>x<span style="color: #990000">)</span> <span style="color: #990000">&gt;=</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>y<span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Unary Standard Math" id="Unary Standard Math">Unary Standard Math</a></big></b>
<br/>
The following <a href="base_require.xml" target="_top"><span style='white-space: nowrap'>required</span></a>
 functions
are defined by the Adolc package for the <code><font color="blue">adouble</font></code> base case:
<code><span style='white-space: nowrap'><br/>
</span></code><code><font color="blue">acos</font></code>,
<code><font color="blue">asin</font></code>,
<code><font color="blue">atan</font></code>,
<code><font color="blue">cos</font></code>,
<code><font color="blue">cosh</font></code>,
<code><font color="blue">exp</font></code>,
<code><font color="blue">fabs</font></code>,
<code><font color="blue">log</font></code>,
<code><font color="blue">sin</font></code>,
<code><font color="blue">sinh</font></code>,
<code><font color="blue">sqrt</font></code>,
<code><font color="blue">tan</font></code>.

<br/>
<br/>
<b><big><a name="erf, asinh, acosh, atanh, expm1, log1p" id="erf, asinh, acosh, atanh, expm1, log1p">erf, asinh, acosh, atanh, expm1, log1p</a></big></b>
<br/>
If the
<a href="base_std_math.xml#erf, asinh, acosh, atanh, expm1, log1p" target="_top"><span style='white-space: nowrap'>erf,&#xA0;asinh,&#xA0;acosh,&#xA0;atanh,&#xA0;expm1,&#xA0;log1p</span></a>
,
functions are supported by the compiler,
they must also be supported by a 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 type;
The adolc package does not support these functions so make
their use an error:
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># define</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_BASE_ADOLC_NO_SUPPORT</span></span><span style="color: #990000">(</span>fun<span style="color: #990000">)</span>                         <span style="color: #990000">\</span>
    <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #008080">adouble</span> <span style="font-weight: bold"><span style="color: #000000">fun</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> adouble<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>                          <span style="color: #990000">\</span>
    <span style="color: #FF0000">{</span>   <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>                                       <span style="color: #990000">\</span>
            <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">,</span>                                                <span style="color: #990000">\</span>
<span style="font-weight: bold"><span style="color: #000080">            #fun</span></span> <span style="color: #FF0000">": adolc does not support this function"</span>         <span style="color: #990000">\</span>
        <span style="color: #990000">);</span>                                                        <span style="color: #990000">\</span>
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>                                               <span style="color: #990000">\</span>
    <span style="color: #FF0000">}</span>
<span style="font-weight: bold"><span style="color: #000080"># if</span></span> CPPAD_USE_CPLUSPLUS_2011
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_BASE_ADOLC_NO_SUPPORT</span></span><span style="color: #990000">(</span>erf<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_BASE_ADOLC_NO_SUPPORT</span></span><span style="color: #990000">(</span>asinh<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_BASE_ADOLC_NO_SUPPORT</span></span><span style="color: #990000">(</span>acosh<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_BASE_ADOLC_NO_SUPPORT</span></span><span style="color: #990000">(</span>atanh<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_BASE_ADOLC_NO_SUPPORT</span></span><span style="color: #990000">(</span>expm1<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_BASE_ADOLC_NO_SUPPORT</span></span><span style="color: #990000">(</span>log1p<span style="color: #990000">)</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
<span style="font-weight: bold"><span style="color: #000080"># undef</span></span> CPPAD_BASE_ADOLC_NO_SUPPORT
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="sign" id="sign">sign</a></big></b>
<br/>
This <a href="base_require.xml" target="_top"><span style='white-space: nowrap'>required</span></a>
 function is defined using the
<code><font color="blue">codassign</font></code> function so that its <code><font color="blue">adouble</font></code> operation sequence
does not depend on the value of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
.
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #008080">adouble</span> <span style="font-weight: bold"><span style="color: #000000">sign</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> adouble<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">adouble</span> s_plus<span style="color: #990000">,</span> s_minus<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">half</span></span><span style="color: #990000">(.</span><span style="color: #993399">5</span><span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// set s_plus to sign(x)/2,  except for case x == 0, s_plus = -.5</span></span>
          <span style="font-weight: bold"><span style="color: #000000">condassign</span></span><span style="color: #990000">(</span>s_plus<span style="color: #990000">,</span>  <span style="color: #990000">+</span>x<span style="color: #990000">,</span> <span style="color: #990000">-</span>half<span style="color: #990000">,</span> <span style="color: #990000">+</span>half<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// set s_minus to -sign(x)/2, except for case x == 0, s_minus = -.5</span></span>
          <span style="font-weight: bold"><span style="color: #000000">condassign</span></span><span style="color: #990000">(</span>s_minus<span style="color: #990000">,</span> <span style="color: #990000">-</span>x<span style="color: #990000">,</span> <span style="color: #990000">-</span>half<span style="color: #990000">,</span> <span style="color: #990000">+</span>half<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// set s to sign(x)</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> s_plus <span style="color: #990000">-</span> s_minus<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="abs" id="abs">abs</a></big></b>
<br/>
This <a href="base_require.xml" target="_top"><span style='white-space: nowrap'>required</span></a>
 function uses the adolc <code><font color="blue">fabs</font></code>
function:
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #008080">adouble</span> <span style="font-weight: bold"><span style="color: #000000">abs</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> adouble<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="pow" id="pow">pow</a></big></b>
<br/>
This <a href="base_require.xml" target="_top"><span style='white-space: nowrap'>required</span></a>
 function
is defined by the Adolc package for the <code><font color="blue">adouble</font></code> base case.

<br/>
<br/>
<b><big><a name="numeric_limits" id="numeric_limits">numeric_limits</a></big></b>
<br/>
The following defines the CppAD <a href="numeric_limits.xml" target="_top"><span style='white-space: nowrap'>numeric_limits</span></a>

for the type <code><font color="blue">adouble</font></code>:
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_NUMERIC_LIMITS</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">,</span> adouble<span style="color: #990000">)</span>
<span style="color: #FF0000">}</span>
</tt></pre>
<br/>
<b><big><a name="to_string" id="to_string">to_string</a></big></b>
<br/>
The following defines the CppAD <a href="to_string.xml" target="_top"><span style='white-space: nowrap'>to_string</span></a>
 function
for the type <code><font color="blue">adouble</font></code>:
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;&gt;</span> <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">to_string_struct</span><span style="color: #990000">&lt;</span>adouble<span style="color: #990000">&gt;</span>
     <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span><span style="color: #008080">string</span> <span style="font-weight: bold"><span style="color: #0000FF">operator</span></span><span style="color: #990000">()(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> adouble<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span><span style="color: #008080">stringstream</span> os<span style="color: #990000">;</span>
               <span style="color: #009900">int</span> n_digits <span style="color: #990000">=</span> <span style="color: #993399">1</span> <span style="color: #990000">+</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span>digits10<span style="color: #990000">;</span>
               os <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">setprecision</span></span><span style="color: #990000">(</span>n_digits<span style="color: #990000">);</span>
               os <span style="color: #990000">&lt;&lt;</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">value</span></span><span style="color: #990000">();</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> os<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">str</span></span><span style="color: #990000">();</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="hash_code" id="hash_code">hash_code</a></big></b>
<br/>
It appears that an <code><font color="blue">adouble</font></code> object can have fields
that are not initialized.
This results in a <code><font color="blue">valgrind</font></code> error when these fields are used by the
<a href="base_hash.xml#Default" target="_top"><span style='white-space: nowrap'>default</span></a>
 hashing function.
For this reason, the <code><font color="blue">adouble</font></code> class overrides the default definition.
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">unsigned</span> <span style="color: #009900">short</span> <span style="font-weight: bold"><span style="color: #000000">hash_code</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> adouble<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">unsigned</span> <span style="color: #009900">short</span> code <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="color: #009900">double</span> value <span style="color: #990000">=</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">value</span></span><span style="color: #990000">();</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> value <span style="color: #990000">==</span> <span style="color: #993399">0.0</span> <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> code<span style="color: #990000">;</span>
          <span style="color: #009900">double</span> log_x <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span> value <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// assume log( std::numeric_limits&lt;double&gt;::max() ) is near 700</span></span>
          code <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">unsigned</span> <span style="color: #009900">short</span><span style="color: #990000">&gt;(</span>
               <span style="color: #990000">(</span>CPPAD_HASH_TABLE_SIZE <span style="color: #990000">/</span> <span style="color: #993399">700</span> <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> log_x
          <span style="color: #990000">);</span>
          code <span style="color: #990000">=</span> code <span style="color: #990000">%</span> CPPAD_HASH_TABLE_SIZE<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> code<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
Note that after the hash codes match, the
<a href="base_adolc.hpp.xml#Identical" target="_top"><span style='white-space: nowrap'>Identical</span></a>
 function will be used
to make sure two values are the same and one can replace the other.
A more sophisticated implementation of the <code><font color="blue">Identical</font></code> function
would detect which <code><font color="blue">adouble</font></code> values depend on the
<code><font color="blue">adouble</font></code> independent variables (and hence can change).



<hr/>Input File: cppad/example/base_adolc.hpp

</body>
</html>
