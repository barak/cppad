<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Forward Mode Jacobian Sparsity Patterns</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Forward Mode Jacobian Sparsity Patterns"/>
<meta name="keywords" id="keywords" content=" forward mode jacobian sparsity patterns syntax purpose x sizevector f size_forward_bool size_forward_set pattern_in transpose dependency internal_bool pattern_out entire example "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_for_jac_sparsity_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="sparsity_pattern.xml" target="_top">Prev</a>
</td><td><a href="for_jac_sparsity.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>sparsity_pattern</option>
<option>for_jac_sparsity</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADFun-&gt;</option>
<option>record_adfun</option>
<option>drivers</option>
<option>Forward</option>
<option>Reverse</option>
<option>sparsity_pattern</option>
<option>sparse_derivative</option>
<option>optimize</option>
<option>abs_normal</option>
<option>FunCheck</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>sparsity_pattern-&gt;</option>
<option>for_jac_sparsity</option>
<option>ForSparseJac</option>
<option>rev_jac_sparsity</option>
<option>RevSparseJac</option>
<option>rev_hes_sparsity</option>
<option>RevSparseHes</option>
<option>for_hes_sparsity</option>
<option>ForSparseHes</option>
<option>dependency.cpp</option>
<option>rc_sparsity.cpp</option>
<option>subgraph_sparsity</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>for_jac_sparsity-&gt;</option>
<option>for_jac_sparsity.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>x</option>
<option>SizeVector</option>
<option>f</option>
<option>---..size_forward_bool</option>
<option>---..size_forward_set</option>
<option>pattern_in</option>
<option>transpose</option>
<option>dependency</option>
<option>internal_bool</option>
<option>pattern_out</option>
<option>Sparsity for Entire Jacobian</option>
<option>Example</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Forward Mode Jacobian Sparsity Patterns</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.for_jac_sparsity(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern_in</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>dependency</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>internal_bool</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
)</span></font></code>


<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
We use 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>F</mi>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>m</mi>
</msup>
</mrow></math>

 to denote the
<a href="glossary.xml#AD Function" target="_top"><span style='white-space: nowrap'>AD&#xA0;function</span></a>
 corresponding to
the operation sequence stored in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
Fix 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mo stretchy="false">&#x02113;</mo>
</mrow>
</msup>
</mrow></math>

 and define the function

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>J</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<msup><mi mathvariant='italic'>F</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">*</mo>
<mi mathvariant='italic'>R</mi>
</mrow></math>

Given the <a href="glossary.xml#Sparsity Pattern" target="_top"><span style='white-space: nowrap'>sparsity&#xA0;pattern</span></a>
 for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
</mrow></math>

,
<code><font color="blue">for_jac_sparsity</font></code> computes a sparsity pattern for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>J</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="x" id="x">x</a></big></b>
<br/>
Note that the sparsity pattern 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>J</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 corresponds to the
operation sequence stored in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 and does not depend on
the argument 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
.
(The operation sequence may contain
<a href="condexp.xml" target="_top"><span style='white-space: nowrap'>CondExp</span></a>
 and  <a href="vecad.xml" target="_top"><span style='white-space: nowrap'>VecAD</span></a>
 operations.)

<br/>
<br/>
<b><big><a name="SizeVector" id="SizeVector">SizeVector</a></big></b>
<br/>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i></code>
 is a <a href="simplevector.xml" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.xml#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&#xA0;of&#xA0;type</span></a>

<code><font color="blue">size_t</font></code>.

<br/>
<br/>
<b><big><a name="f" id="f">f</a></big></b>
<br/>
The object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
The <a href="adfun.xml" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is not <code><font color="blue">const</font></code>.
After a call to <code><font color="blue">for_jac_sparsity</font></code>, a sparsity pattern
for each of the variables in the operation sequence
is held in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 for possible later use during
reverse Hessian sparsity calculations.

<br/>
<br/>
<b><a name="f.size_forward_bool" id="f.size_forward_bool">size_forward_bool</a></b>
<br/>
After <code><font color="blue">for_jac_sparsity</font></code>, if 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
 is a <code><font color="blue">size_t</font></code> object,

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_bool()<br/>
</span></font></code>
sets 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
 to the amount of memory (in unsigned character units)
used to store the
<a href="glossary.xml#Sparsity Pattern.Boolean Vector" target="_top"><span style='white-space: nowrap'>boolean&#xA0;vector</span></a>

sparsity patterns.
If 
<code><i><font color="black"><span style='white-space: nowrap'>internal_bool</span></font></i></code>
 if false, 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
 will be zero.
Otherwise it will be non-zero.
If you do not need this information for <a href="revsparsehes.xml" target="_top"><span style='white-space: nowrap'>RevSparseHes</span></a>

calculations, it can be deleted
(and the corresponding memory freed) using

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_bool(0)<br/>
</span></font></code>
after which 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_bool()</span></font></code>
 will return zero.

<br/>
<br/>
<b><a name="f.size_forward_set" id="f.size_forward_set">size_forward_set</a></b>
<br/>
After <code><font color="blue">for_jac_sparsity</font></code>, if 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
 is a <code><font color="blue">size_t</font></code> object,

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_set()<br/>
</span></font></code>
sets 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
 to the amount of memory (in unsigned character units)
used to store the
<a href="glossary.xml#Sparsity Pattern.Vector of Sets" target="_top"><span style='white-space: nowrap'>vector&#xA0;of&#xA0;sets</span></a>

sparsity patterns.
If 
<code><i><font color="black"><span style='white-space: nowrap'>internal_bool</span></font></i></code>
 if true, 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
 will be zero.
Otherwise it will be non-zero.
If you do not need this information for future <a href="rev_hes_sparsity.xml" target="_top"><span style='white-space: nowrap'>rev_hes_sparsity</span></a>

calculations, it can be deleted
(and the corresponding memory freed) using

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_set(0)<br/>
</span></font></code>
after which 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_set()</span></font></code>
 will return zero.

<br/>
<br/>
<b><big><a name="pattern_in" id="pattern_in">pattern_in</a></big></b>
<br/>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>pattern_in</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;sparse_rc&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern_in</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
see <a href="sparse_rc.xml" target="_top"><span style='white-space: nowrap'>sparse_rc</span></a>
.
If 
<code><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i></code>
 it is false (true),

<code><i><font color="black"><span style='white-space: nowrap'>pattern_in</span></font></i></code>
 is a sparsity pattern for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
</mrow></math>

 (
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>R</mi>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
</mrow></math>

).

<br/>
<br/>
<b><big><a name="transpose" id="transpose">transpose</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
See <a href="for_jac_sparsity.xml#pattern_in" target="_top"><span style='white-space: nowrap'>pattern_in</span></a>
 above and
<a href="for_jac_sparsity.xml#pattern_out" target="_top"><span style='white-space: nowrap'>pattern_out</span></a>
 below.

<br/>
<br/>
<b><big><a name="dependency" id="dependency">dependency</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>dependency</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
see <a href="for_jac_sparsity.xml#pattern_out" target="_top"><span style='white-space: nowrap'>pattern_out</span></a>
 below.

<br/>
<br/>
<b><big><a name="internal_bool" id="internal_bool">internal_bool</a></big></b>
<br/>
If this is true, calculations are done with sets represented by a vector
of boolean values. Otherwise, a vector of sets of integers is used.

<br/>
<br/>
<b><big><a name="pattern_out" id="pattern_out">pattern_out</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sparse_rc&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
This input value of 
<code><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i></code>
 does not matter.
If 
<code><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i></code>
 it is false (true),
upon return 
<code><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i></code>
 is a sparsity pattern for

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>J</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 (
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>J</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
</mrow></math>

).
If 
<code><i><font color="black"><span style='white-space: nowrap'>dependency</span></font></i></code>
 is true, 
<code><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i></code>
 is a
<a href="dependency.cpp.xml#Dependency Pattern" target="_top"><span style='white-space: nowrap'>dependency&#xA0;pattern</span></a>

instead of sparsity pattern.

<br/>
<br/>
<b><big><a name="Sparsity for Entire Jacobian" id="Sparsity for Entire Jacobian">Sparsity for Entire Jacobian</a></big></b>
<br/>
Suppose that

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
</mrow></math>

 is the 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 identity matrix.
In this case, 
<code><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i></code>
 is a sparsity pattern for

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>F</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

  ( 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>F</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
</mrow></math>

 )
if 
<code><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i></code>
 is false (true).

<br/>
<br/>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br/>
The file
<a href="for_jac_sparsity.cpp.xml" target="_top"><span style='white-space: nowrap'>for_jac_sparsity.cpp</span></a>

contains an example and test of this operation.
It returns true if it succeeds and false otherwise.


<hr/>Input File: cppad/core/for_jac_sparsity.hpp

</body>
</html>
