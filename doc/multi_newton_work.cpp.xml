<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Multi-threading Newton Method Utility Routines</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Multi-threading Newton Method Utility Routines"/>
<meta name="keywords" id="keywords" content=" multi-threading newton method utility routines multi_newton_work setup worker combine syntax purpose multi_newton_setup fun num_sub xlow xup epsilon max_itr num_threads multi_newton_worker multi_newton_combine xout source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_newton_work.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="multi_newton_time.cpp.xml" target="_top">Prev</a>
</td><td><a href="team_thread.hpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>multi_newton.cpp</option>
<option>multi_newton_work.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
<option>simple_ad_openmp.cpp</option>
<option>simple_ad_bthread.cpp</option>
<option>simple_ad_pthread.cpp</option>
<option>team_example.cpp</option>
<option>harmonic.cpp</option>
<option>multi_newton.cpp</option>
<option>team_thread.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>multi_newton.cpp-&gt;</option>
<option>multi_newton_time.cpp</option>
<option>multi_newton_work.cpp</option>
</select>
</td>
<td>multi_newton_work.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>multi_newton_setup</option>
<option>---..fun</option>
<option>---..num_sub</option>
<option>xlow</option>
<option>---..xup</option>
<option>---..epsilon</option>
<option>max_itr</option>
<option>---..num_threads</option>
<option>multi_newton_worker</option>
<option>multi_newton_combine</option>
<option>---..xout</option>
<option>Source</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Multi-threading Newton Method Utility Routines</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;multi_newton_setup(<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>fun</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>xlow</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>xup</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>max_itr</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
)</span></font></code>


<code><font color="blue"><span style='white-space: nowrap'>multi_newton_worker()<br/>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;multi_newton_combine(</span></font><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
These routines aid in the computation of multiple zeros of a function

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">:</mo>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>a</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">]</mo>
<mo stretchy="false">&#x02192;</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="multi_newton_setup" id="multi_newton_setup">multi_newton_setup</a></big></b>
<br/>
Calling this functions splits up the computation of the zeros
into different sub-intervals for each thread.

<br/>
<br/>
<b><a name="multi_newton_setup.fun" id="multi_newton_setup.fun">fun</a></b>
<br/>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>fun</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>fun</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;(double&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;double&amp;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;double&amp;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>df</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
This argument must evaluate the function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

,
and its derivative 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>f</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

,
using the syntax

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>fun</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>df</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
where the arguments have the prototypes

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&amp;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&amp;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>df</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
.
The input values of 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>df</span></font></i></code>
 do not matter.
Upon return they are 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>f</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 respectively.

<br/>
<br/>
<b><a name="multi_newton_setup.num_sub" id="multi_newton_setup.num_sub">num_sub</a></b>
<br/>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
It specifies the number of sub-intervals; i.e., 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
</mrow></math>


in to split the calculation into.

<br/>
<br/>
<b><big><a name="xlow" id="xlow">xlow</a></big></b>
<br/>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>xlow</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>xlow</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
It specifies the lower limit for the entire search; i.e., 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>a</mi>
</mrow></math>

.

<br/>
<br/>
<b><a name="xlow.xup" id="xlow.xup">xup</a></b>
<br/>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>xup</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>xup</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
It specifies the upper limit for the entire search; i.e., 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>b</mi>
</mrow></math>

.

<br/>
<br/>
<b><a name="xlow.epsilon" id="xlow.epsilon">epsilon</a></b>
<br/>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
It specifies the convergence criteria for Newton's method in terms
of how small the function value 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">|</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">|</mo>
<mo stretchy="false">&#x02264;</mo>
<mi mathvariant='normal'>&#x003B5;</mi>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="max_itr" id="max_itr">max_itr</a></big></b>
<br/>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>max_itr</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>max_itr</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
It specifies the maximum number of iterations of Newton's method to try
before giving up on convergence.

<br/>
<br/>
<b><a name="max_itr.num_threads" id="max_itr.num_threads">num_threads</a></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
It specifies the number of threads that are available for this test.
If it is zero, the test is run without multi-threading.

<br/>
<br/>
<b><big><a name="multi_newton_worker" id="multi_newton_worker">multi_newton_worker</a></big></b>
<br/>
Calling this function does the computation for one thread.
Following a call to <code><font color="blue">multi_newton_setup</font></code>,
this function should be called by each of the 
<code><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i></code>
 threads.

<br/>
<br/>
<b><big><a name="multi_newton_combine" id="multi_newton_combine">multi_newton_combine</a></big></b>
<br/>
After the 
<code><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i></code>
 threads have completed their
calls to <code><font color="blue">multi_newton_worker</font></code>,
this function call will combine the results and return the final
set of approximate zeros for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

.

<br/>
<br/>
<b><a name="multi_newton_combine.xout" id="multi_newton_combine.xout">xout</a></b>
<br/>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i></code>
 has the prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::vector&lt;double&gt;&amp;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
The input size and value of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i></code>
 do not matter.
Upon return from <code><font color="blue">multi_newton_combine</font></code>,
the size of 
<code><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i></code>
 is less than or equal 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 and

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;|&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>(&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&#xA0;)&#xA0;|&#xA0;&lt;=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
for each valid index 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
.
In addition, the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i></code>
 are in ascending order and

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i><font color="blue"><span style='white-space: nowrap'>[i+1]&#xA0;-&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&#xA0;&gt;=&#xA0;&#xA0;0.5&#xA0;*&#xA0;(</span></font><i><font color="black"><span style='white-space: nowrap'>xup</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;-&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>xlow</span></font></i><font color="blue"><span style='white-space: nowrap'>)&#xA0;/&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
<br/>
<b><big><a name="Source" id="Source">Source</a></big></b>

<code><font color="blue">
<pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"multi_newton_work.hpp"</span>

<span style="font-weight: bold"><span style="color: #000080"># define</span></span> USE_THREAD_ALLOC_FOR_WORK_ALL <span style="color: #993399">1</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// This vector template class frees all memory when resized to zero.</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// In addition, its memory allocation works well during multi-threading.</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// number of threads in previous call to multi_newton_setup</span></span>
     <span style="color: #008080">size_t</span> num_threads_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// convergence criteria in previous call to multi_newton_setup</span></span>
     <span style="color: #009900">double</span> epsilon_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// maximum number of iterations in previous call to multi_newton_setup</span></span>
     <span style="color: #008080">size_t</span> max_itr_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// length for all sub-intervals</span></span>
     <span style="color: #009900">double</span> sub_length_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// function we are finding zeros of in previous call to multi_newton_setup</span></span>
     <span style="color: #009900">void</span> <span style="color: #990000">(*</span>fun_<span style="color: #990000">)(</span><span style="color: #009900">double</span> x<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> f<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> df<span style="color: #990000">)</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// structure with information for one thread</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #FF0000">{</span>
          <span style="font-style: italic"><span style="color: #9A1900">// number of sub intervals (worker input)</span></span>
          <span style="color: #008080">size_t</span> num_sub<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// beginning of interval (worker input)</span></span>
          <span style="color: #009900">double</span> xlow<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// end of interval (worker input)</span></span>
          <span style="color: #009900">double</span> xup<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// vector of zero candidates (worker output)</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// after call to multi_newton_setup:   x.size() == 0</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// after call to multi_newton_work:    x.size() is number of zeros</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// after call to multi_newton_combine: x.size() == 0</span></span>
          <span style="color: #008080">vector&lt;double&gt;</span> x<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// false if an error occurs, true otherwise (worker output)</span></span>
          <span style="color: #009900">bool</span>   ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span> work_one_t<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// vector with information for all threads</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// after call to multi_newton_setup:   work_all.size() == num_threads</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// after call to multi_newton_combine: work_all.size() == 0</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (use pointers instead of values to avoid false sharing)</span></span>
     <span style="color: #008080">vector&lt;work_one_t*&gt;</span> work_all_<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------------------</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// do the work for one thread</span></span>
<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">multi_newton_worker</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Split [xlow, xup] into num_sub intervales and</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// look for one zero in each sub-interval.</span></span>
     <span style="color: #008080">size_t</span> thread_num    <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">thread_num</span></span><span style="color: #990000">();</span>
     <span style="color: #008080">size_t</span> num_threads   <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">(</span>num_threads_<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">));</span>
     <span style="color: #009900">bool</span>   ok            <span style="color: #990000">=</span> thread_num <span style="color: #990000">&lt;</span> num_threads<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> num_sub       <span style="color: #990000">=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>num_sub<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> xlow          <span style="color: #990000">=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>xlow<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> xup           <span style="color: #990000">=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>xup<span style="color: #990000">;</span>
     vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> x    <span style="color: #990000">=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>x<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check arguments</span></span>
     ok <span style="color: #990000">&amp;=</span> max_itr_ <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> num_sub <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> xlow <span style="color: #990000">&lt;</span> xup<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check for special case where there is nothing for this thread to do</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> num_sub <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>ok <span style="color: #990000">=</span> ok<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check for a zero on each sub-interval</span></span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> xlast <span style="color: #990000">=</span> xlow <span style="color: #990000">-</span> <span style="color: #993399">2</span> <span style="color: #990000">*</span> sub_length_<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// over sub_length_ away from x_low</span></span>
     <span style="color: #009900">double</span> flast <span style="color: #990000">=</span> <span style="color: #993399">2</span> <span style="color: #990000">*</span> epsilon_<span style="color: #990000">;</span>           <span style="font-style: italic"><span style="color: #9A1900">// any value &gt; epsilon_ would do</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> num_sub<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>
          <span style="font-style: italic"><span style="color: #9A1900">// note that when i == 0, xlow_i == xlow (exactly)</span></span>
          <span style="color: #009900">double</span> xlow_i <span style="color: #990000">=</span> xlow <span style="color: #990000">+</span> i <span style="color: #990000">*</span> sub_length_<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// note that when i == num_sub - 1, xup_i = xup (exactly)</span></span>
          <span style="color: #009900">double</span> xup_i  <span style="color: #990000">=</span> xup  <span style="color: #990000">-</span> <span style="color: #990000">(</span>num_sub <span style="color: #990000">-</span> i <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> sub_length_<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// initial point for Newton iterations</span></span>
          <span style="color: #009900">double</span> xcur <span style="color: #990000">=</span> <span style="color: #990000">(</span>xup_i <span style="color: #990000">+</span> xlow_i<span style="color: #990000">)</span> <span style="color: #990000">/</span> <span style="color: #993399">2</span><span style="color: #990000">.;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Newton iterations</span></span>
          <span style="color: #009900">bool</span> more_itr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> itr    <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// initialize these values to avoid MSC C++ warning</span></span>
          <span style="color: #009900">double</span> fcur<span style="color: #990000">=</span><span style="color: #993399">0.0</span><span style="color: #990000">,</span> dfcur<span style="color: #990000">=</span><span style="color: #993399">0.0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span> more_itr <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">fun_</span></span><span style="color: #990000">(</span>xcur<span style="color: #990000">,</span> fcur<span style="color: #990000">,</span> dfcur<span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// check end of iterations</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>fcur<span style="color: #990000">)</span> <span style="color: #990000">&lt;=</span> epsilon_ <span style="color: #990000">)</span>
                    more_itr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">(</span>xcur <span style="color: #990000">==</span> xlow_i <span style="color: #990000">)</span> <span style="color: #990000">&amp;</span> <span style="color: #990000">(</span>fcur <span style="color: #990000">*</span> dfcur <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span><span style="color: #990000">.)</span> <span style="color: #990000">)</span>
                    more_itr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">(</span>xcur <span style="color: #990000">==</span> xup_i<span style="color: #990000">)</span>   <span style="color: #990000">&amp;</span> <span style="color: #990000">(</span>fcur <span style="color: #990000">*</span> dfcur <span style="color: #990000">&lt;</span> <span style="color: #993399">0</span><span style="color: #990000">.)</span> <span style="color: #990000">)</span>
                    more_itr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>

               <span style="font-style: italic"><span style="color: #9A1900">// next Newton iterate</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> more_itr <span style="color: #990000">)</span>
               <span style="color: #FF0000">{</span>     xcur <span style="color: #990000">=</span> xcur <span style="color: #990000">-</span> fcur <span style="color: #990000">/</span> dfcur<span style="color: #990000">;</span>
                    <span style="font-style: italic"><span style="color: #9A1900">// keep in bounds</span></span>
                    xcur <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">(</span>xcur<span style="color: #990000">,</span> xlow_i<span style="color: #990000">);</span>
                    xcur <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">min</span></span><span style="color: #990000">(</span>xcur<span style="color: #990000">,</span> xup_i<span style="color: #990000">);</span>

                    more_itr <span style="color: #990000">=</span> <span style="color: #990000">++</span>itr <span style="color: #990000">&lt;</span> max_itr_<span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span> fcur <span style="color: #990000">)</span> <span style="color: #990000">&lt;=</span> epsilon_ <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// check for case where xcur is lower bound for this</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// sub-interval and upper bound for previous sub-interval</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>xcur <span style="color: #990000">-</span> xlast<span style="color: #990000">)</span> <span style="color: #990000">&gt;=</span> sub_length_ <span style="color: #990000">)</span>
               <span style="color: #FF0000">{</span>     x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">(</span> xcur <span style="color: #990000">);</span>
                    xlast <span style="color: #990000">=</span> xcur<span style="color: #990000">;</span>
                    flast <span style="color: #990000">=</span> fcur<span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
               <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>fcur<span style="color: #990000">)</span> <span style="color: #990000">&lt;</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>flast<span style="color: #990000">)</span> <span style="color: #990000">)</span>
               <span style="color: #FF0000">{</span>     x<span style="color: #990000">[</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> xcur<span style="color: #990000">;</span>
                    xlast            <span style="color: #990000">=</span> xcur<span style="color: #990000">;</span>
                    flast            <span style="color: #990000">=</span> fcur<span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>ok <span style="color: #990000">=</span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------------------</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// setup the work up for multiple threads</span></span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">multi_newton_setup</span></span><span style="color: #990000">(</span>
     <span style="color: #009900">void</span> <span style="color: #990000">(</span>fun<span style="color: #990000">)(</span><span style="color: #009900">double</span> x<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> f<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> df<span style="color: #990000">)</span> <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span> num_sub                              <span style="color: #990000">,</span>
     <span style="color: #009900">double</span> xlow                                 <span style="color: #990000">,</span>
     <span style="color: #009900">double</span> xup                                  <span style="color: #990000">,</span>
     <span style="color: #009900">double</span> epsilon                              <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span> max_itr                              <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span> num_threads                          <span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>
     num_threads_ <span style="color: #990000">=</span> num_threads<span style="color: #990000">;</span>
     num_threads  <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">(</span>num_threads_<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">));</span>
     <span style="color: #009900">bool</span> ok      <span style="color: #990000">=</span> num_threads <span style="color: #990000">==</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">num_threads</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// inputs that are same for all threads</span></span>
     epsilon_ <span style="color: #990000">=</span> epsilon<span style="color: #990000">;</span>
     max_itr_ <span style="color: #990000">=</span> max_itr<span style="color: #990000">;</span>
     fun_     <span style="color: #990000">=</span> fun<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// resize the work vector to accomidate the number of threads</span></span>
     ok <span style="color: #990000">&amp;=</span> work_all_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     work_all_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>num_threads<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// length of each sub interval</span></span>
     sub_length_ <span style="color: #990000">=</span> <span style="color: #990000">(</span>xup <span style="color: #990000">-</span> xlow<span style="color: #990000">)</span> <span style="color: #990000">/</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>num_sub<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// determine values that are specific to each thread</span></span>
     <span style="color: #008080">size_t</span> num_min   <span style="color: #990000">=</span> num_sub <span style="color: #990000">/</span> num_threads<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// minimum num_sub</span></span>
     <span style="color: #008080">size_t</span> num_more  <span style="color: #990000">=</span> num_sub <span style="color: #990000">%</span> num_threads<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// number that have one more</span></span>
     <span style="color: #008080">size_t</span> sum_num   <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// sum with respect to thread of num_sub</span></span>
     <span style="color: #008080">size_t</span> thread_num<span style="color: #990000">,</span> num_sub_thread<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>thread_num <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> thread_num <span style="color: #990000">&lt;</span> num_threads<span style="color: #990000">;</span> thread_num<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># if</span></span>  USE_THREAD_ALLOC_FOR_WORK_ALL
          <span style="font-style: italic"><span style="color: #9A1900">// allocate separate memory for this thread to avoid false sharing</span></span>
          <span style="color: #008080">size_t</span> <span style="font-weight: bold"><span style="color: #000000">min_bytes</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>work_one_t<span style="color: #990000">)),</span> cap_bytes<span style="color: #990000">;</span>
          <span style="color: #009900">void</span><span style="color: #990000">*</span> v_ptr <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">get_memory</span></span><span style="color: #990000">(</span>min_bytes<span style="color: #990000">,</span> cap_bytes<span style="color: #990000">);</span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span>work_one_t<span style="color: #990000">*&gt;(</span>v_ptr<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// thread_alloc is a raw memory allocator; i.e., it does not call</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// the constructor for the objects it creates. The CppAD::vector</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// class requires it's constructor to be called so we do it here</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">new</span></span><span style="color: #990000">(&amp;</span> <span style="color: #990000">(</span>work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>x<span style="color: #990000">)</span> <span style="color: #990000">)</span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;();</span>
<span style="font-weight: bold"><span style="color: #000080"># else</span></span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> work_one_t<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// number of sub-intervalse for this thread</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> thread_num <span style="color: #990000">&lt;</span> num_more  <span style="color: #990000">)</span>
               num_sub_thread <span style="color: #990000">=</span> num_min <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>     num_sub_thread <span style="color: #990000">=</span> num_min<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// when thread_num == 0, xlow_thread == xlow</span></span>
          <span style="color: #009900">double</span> xlow_thread <span style="color: #990000">=</span> xlow <span style="color: #990000">+</span> sum_num <span style="color: #990000">*</span> sub_length_<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// when thread_num == num_threads - 1, xup_thread = xup</span></span>
          <span style="color: #009900">double</span> xup_thread <span style="color: #990000">=</span> xlow <span style="color: #990000">+</span> <span style="color: #990000">(</span>sum_num <span style="color: #990000">+</span> num_sub_thread<span style="color: #990000">)</span> <span style="color: #990000">*</span> sub_length_<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> thread_num <span style="color: #990000">==</span> num_threads <span style="color: #990000">-</span> <span style="color: #993399">1</span> <span style="color: #990000">)</span>
               xup_thread <span style="color: #990000">=</span> xup<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// update sum_num for next time through loop</span></span>
          sum_num <span style="color: #990000">+=</span> num_sub_thread<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// input information specific to this thread</span></span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>num_sub <span style="color: #990000">=</span> num_sub_thread<span style="color: #990000">;</span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>xlow    <span style="color: #990000">=</span> xlow_thread<span style="color: #990000">;</span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>xup     <span style="color: #990000">=</span> xup_thread<span style="color: #990000">;</span>
          ok <span style="color: #990000">&amp;=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// in case this thread does not get called</span></span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     ok <span style="color: #990000">&amp;=</span> sum_num <span style="color: #990000">==</span> num_sub<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------------------</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// get the result of the work</span></span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">multi_newton_combine</span></span><span style="color: #990000">(</span>CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> xout<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// number of threads in the calculation</span></span>
     <span style="color: #008080">size_t</span> num_threads  <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">(</span>num_threads_<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">));</span>

     <span style="font-style: italic"><span style="color: #9A1900">// remove duplicates and points that are not solutions</span></span>
     xout<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="color: #009900">bool</span>   ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> thread_num<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// initialize as more that sub_lenght_ / 2 from any possible solution</span></span>
     <span style="color: #009900">double</span> xlast <span style="color: #990000">=</span> <span style="color: #990000">-</span> sub_length_<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>thread_num <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> thread_num <span style="color: #990000">&lt;</span> num_threads<span style="color: #990000">;</span> thread_num<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> x <span style="color: #990000">=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>x<span style="color: #990000">;</span>

          <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// check for case where this point is lower limit for this</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// thread and upper limit for previous thread</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">-</span> xlast<span style="color: #990000">)</span> <span style="color: #990000">&gt;=</span> sub_length_ <span style="color: #990000">)</span>
               <span style="color: #FF0000">{</span>     xout<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                    xlast <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
               <span style="color: #FF0000">}</span>
               <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
               <span style="color: #FF0000">{</span>     <span style="color: #009900">double</span> fcur<span style="color: #990000">,</span> flast<span style="color: #990000">,</span> df<span style="color: #990000">;</span>
                    <span style="font-weight: bold"><span style="color: #000000">fun_</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span>i<span style="color: #990000">],</span>   fcur<span style="color: #990000">,</span> df<span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #000000">fun_</span></span><span style="color: #990000">(</span>xlast<span style="color: #990000">,</span> flast<span style="color: #990000">,</span> df<span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>fcur<span style="color: #990000">)</span> <span style="color: #990000">&lt;</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>flast<span style="color: #990000">)</span> <span style="color: #990000">)</span>
                    <span style="color: #FF0000">{</span>     xout<span style="color: #990000">[</span> xout<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
                         xlast                  <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          ok <span style="color: #990000">&amp;=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// go down so free memory for other threads before memory for master</span></span>
     thread_num <span style="color: #990000">=</span> num_threads<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>thread_num<span style="color: #990000">--)</span>
     <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># if</span></span> USE_THREAD_ALLOC_FOR_WORK_ALL
          <span style="font-style: italic"><span style="color: #9A1900">// call the destructor for CppAD::vector destructor</span></span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>x<span style="color: #990000">.~</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;();</span>
          <span style="font-style: italic"><span style="color: #9A1900">// delete the raw memory allocation</span></span>
          <span style="color: #009900">void</span><span style="color: #990000">*</span> v_ptr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">void</span><span style="color: #990000">*&gt;(</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]</span> <span style="color: #990000">);</span>
          thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">return_memory</span></span><span style="color: #990000">(</span> v_ptr <span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># else</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">delete</span></span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">];</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// Note that xout corresponds to memroy that is inuse by master</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (so we can only chech have freed all their memory).</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> thread_num <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// check that there is no longer any memory inuse by this thread</span></span>
               ok <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">inuse</span></span><span style="color: #990000">(</span>thread_num<span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// return all memory being held for future use by this thread</span></span>
               thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">free_available</span></span><span style="color: #990000">(</span>thread_num<span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// now we are done with the work_all_ vector so free its memory</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (because it is a static variable)</span></span>
     work_all_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: multi_thread/multi_newton_work.cpp

</body>
</html>
