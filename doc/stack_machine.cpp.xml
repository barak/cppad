<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Example Differentiating a Stack Machine Interpreter</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Example Differentiating a Stack Machine Interpreter"/>
<meta name="keywords" id="keywords" content=" example differentiating stack machine interpreter test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_stack_machine.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="ode_taylor.cpp.xml" target="_top">Prev</a>
</td><td><a href="exampleutility.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>stack_machine.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>testvector</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>General-&gt;</option>
<option>ad_fun.cpp</option>
<option>ad_in_c.cpp</option>
<option>conj_grad.cpp</option>
<option>cppad_eigen.hpp</option>
<option>hes_minor_det.cpp</option>
<option>hes_lu_det.cpp</option>
<option>interface2c.cpp</option>
<option>jac_minor_det.cpp</option>
<option>jac_lu_det.cpp</option>
<option>mul_level</option>
<option>ode_stiff.cpp</option>
<option>mul_level_ode.cpp</option>
<option>mul_level_adolc_ode.cpp</option>
<option>ode_taylor.cpp</option>
<option>stack_machine.cpp</option>
</select>
</td>
<td>stack_machine.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Example Differentiating a Stack Machine Interpreter</big></big></b></center>
<code><font color="blue"><pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cstring&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cstddef&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cstdlib&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cctype&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cassert&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;stack&gt;</span>

<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
<span style="font-style: italic"><span style="color: #9A1900">// Begin empty namespace ------------------------------------------------</span></span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">is_number</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">string</span> <span style="color: #990000">&amp;</span>s <span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">char</span> ch <span style="color: #990000">=</span> s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
     <span style="color: #009900">bool</span> number <span style="color: #990000">=</span> <span style="color: #990000">(</span>std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">strchr</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"0123456789."</span><span style="color: #990000">,</span> ch<span style="color: #990000">)</span> <span style="color: #990000">!=</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> number<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">is_binary</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">string</span> <span style="color: #990000">&amp;</span>s <span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">char</span> ch <span style="color: #990000">=</span> s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
     <span style="color: #009900">bool</span> binary <span style="color: #990000">=</span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">strchr</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"+-*/."</span><span style="color: #990000">,</span> ch<span style="color: #990000">)</span> <span style="color: #990000">!=</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> binary<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">is_variable</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span><span style="color: #008080">string</span> <span style="color: #990000">&amp;</span>s <span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">char</span> ch <span style="color: #990000">=</span> s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
     <span style="color: #009900">bool</span> variable <span style="color: #990000">=</span> <span style="color: #990000">(</span><span style="color: #FF0000">'a'</span> <span style="color: #990000">&lt;=</span> ch<span style="color: #990000">)</span> <span style="color: #990000">&amp;</span> <span style="color: #990000">(</span>ch <span style="color: #990000">&lt;=</span> <span style="color: #FF0000">'z'</span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> variable<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">StackMachine</span></span><span style="color: #990000">(</span>
     std<span style="color: #990000">::</span><span style="color: #008080">stack&lt; std::string &gt;</span>          <span style="color: #990000">&amp;</span>token_stack  <span style="color: #990000">,</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; CppAD::AD&lt;double&gt; &gt;</span> <span style="color: #990000">&amp;</span>variable     <span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>string<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>stack<span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>

     <span style="color: #008080">stack&lt; AD&lt;double&gt; &gt;</span> value_stack<span style="color: #990000">;</span>
     <span style="color: #008080">string</span>              token<span style="color: #990000">;</span>
     <span style="color: #008080">AD&lt;double&gt;</span>          value_one<span style="color: #990000">;</span>
     <span style="color: #008080">AD&lt;double&gt;</span>          value_two<span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> token_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">empty</span></span><span style="color: #990000">()</span> <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">string</span> s <span style="color: #990000">=</span> token_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">top</span></span><span style="color: #990000">();</span>
          token_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">pop</span></span><span style="color: #990000">();</span>

          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">is_number</span></span><span style="color: #990000">(</span>s<span style="color: #990000">)</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     value_one <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">atof</span></span><span style="color: #990000">(</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">c_str</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
               value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push</span></span><span style="color: #990000">(</span> value_one <span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">is_variable</span></span><span style="color: #990000">(</span>s<span style="color: #990000">)</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     value_one <span style="color: #990000">=</span> variable<span style="color: #990000">[</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">])</span> <span style="color: #990000">-</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'a'</span><span style="color: #990000">)</span> <span style="color: #990000">];</span>
               value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push</span></span><span style="color: #990000">(</span> value_one <span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">is_binary</span></span><span style="color: #990000">(</span>s<span style="color: #990000">)</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>
               value_one <span style="color: #990000">=</span> value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">top</span></span><span style="color: #990000">();</span>
               value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">pop</span></span><span style="color: #990000">();</span>
               value_two <span style="color: #990000">=</span> value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">top</span></span><span style="color: #990000">();</span>
               value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">pop</span></span><span style="color: #990000">();</span>

               <span style="font-weight: bold"><span style="color: #0000FF">switch</span></span><span style="color: #990000">(</span> s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
               <span style="color: #FF0000">{</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> <span style="color: #FF0000">'+'</span><span style="color: #990000">:</span>
                    value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push</span></span><span style="color: #990000">(</span>value_one <span style="color: #990000">+</span> value_two<span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

                    <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> <span style="color: #FF0000">'-'</span><span style="color: #990000">:</span>
                    value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push</span></span><span style="color: #990000">(</span>value_one <span style="color: #990000">-</span> value_two<span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

                    <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> <span style="color: #FF0000">'*'</span><span style="color: #990000">:</span>
                    value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push</span></span><span style="color: #990000">(</span>value_one <span style="color: #990000">*</span> value_two<span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

                    <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> <span style="color: #FF0000">'/'</span><span style="color: #990000">:</span>
                    value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push</span></span><span style="color: #990000">(</span>value_one <span style="color: #990000">/</span> value_two<span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #008080">                    default:</span></span>
                    <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #FF0000">'='</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> token_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               s <span style="color: #990000">=</span> token_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">top</span></span><span style="color: #990000">();</span>
               token_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">pop</span></span><span style="color: #990000">();</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">is_variable</span></span><span style="color: #990000">(</span> s <span style="color: #990000">)</span> <span style="color: #990000">);</span>
               value_one <span style="color: #990000">=</span> value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">top</span></span><span style="color: #990000">();</span>
               value_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">pop</span></span><span style="color: #990000">();</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               variable<span style="color: #990000">[</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">])</span> <span style="color: #990000">-</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span><span style="color: #FF0000">'a'</span><span style="color: #990000">)</span> <span style="color: #990000">]</span> <span style="color: #990000">=</span> value_one<span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">// End empty namespace -------------------------------------------------------</span></span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">StackMachine</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>string<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>stack<span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> eps99 <span style="color: #990000">=</span> <span style="color: #993399">99.0</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// The users program in that stack machine language</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span> <span style="color: #990000">*</span>program<span style="color: #990000">[]</span> <span style="color: #990000">=</span> <span style="color: #FF0000">{</span>
          <span style="color: #FF0000">"1.0"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"a"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"+"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"="</span><span style="color: #990000">,</span> <span style="color: #FF0000">"b"</span><span style="color: #990000">,</span>  <span style="font-style: italic"><span style="color: #9A1900">// b = a + 1</span></span>
          <span style="color: #FF0000">"2.0"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"b"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"*"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"="</span><span style="color: #990000">,</span> <span style="color: #FF0000">"c"</span><span style="color: #990000">,</span>  <span style="font-style: italic"><span style="color: #9A1900">// c = b * 2</span></span>
          <span style="color: #FF0000">"3.0"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"c"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"-"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"="</span><span style="color: #990000">,</span> <span style="color: #FF0000">"d"</span><span style="color: #990000">,</span>  <span style="font-style: italic"><span style="color: #9A1900">// d = c - 3</span></span>
          <span style="color: #FF0000">"4.0"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"d"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"/"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"="</span><span style="color: #990000">,</span> <span style="color: #FF0000">"e"</span>   <span style="font-style: italic"><span style="color: #9A1900">// e = d / 4</span></span>
     <span style="color: #FF0000">}</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> n_program <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span> program <span style="color: #990000">)</span> <span style="color: #990000">/</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span> program<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// put the program in the token stack</span></span>
     <span style="color: #008080">stack&lt; string &gt;</span> token_stack<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> n_program<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>i<span style="color: #990000">--)</span>
          token_stack<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push</span></span><span style="color: #990000">(</span> program<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">X</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     X<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and start tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>X<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// x[0] corresponds to a in the stack machine</span></span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">variable</span></span><span style="color: #990000">(</span><span style="color: #993399">26</span><span style="color: #990000">);</span>
     variable<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> X<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// calculate the resutls of the program</span></span>
     <span style="font-weight: bold"><span style="color: #000000">StackMachine</span></span><span style="color: #990000">(</span> token_stack <span style="color: #990000">,</span> variable<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// range space vector</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">4</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">Y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     Y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> variable<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>   <span style="font-style: italic"><span style="color: #9A1900">// b = a + 1</span></span>
     Y<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> variable<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>   <span style="font-style: italic"><span style="color: #9A1900">// c = (a + 1) * 2</span></span>
     Y<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> variable<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">];</span>   <span style="font-style: italic"><span style="color: #9A1900">// d = (a + 1) * 2 - 3</span></span>
     Y<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> variable<span style="color: #990000">[</span><span style="color: #993399">4</span><span style="color: #990000">];</span>   <span style="font-style: italic"><span style="color: #9A1900">// e = ( (a + 1) * 2 - 3 ) / 4</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// create f : X -&gt; Y and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>X<span style="color: #990000">,</span> Y<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// use forward mode to evaluate function at different argument value</span></span>
     <span style="color: #008080">size_t</span> p <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     y    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span>p<span style="color: #990000">,</span> x<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check function values</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">.);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #990000">(</span>x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">.)</span> <span style="color: #990000">*</span> <span style="color: #993399">2</span><span style="color: #990000">.);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #990000">(</span>x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">.)</span> <span style="color: #990000">*</span> <span style="color: #993399">2</span><span style="color: #990000">.</span> <span style="color: #990000">-</span> <span style="color: #993399">3</span><span style="color: #990000">.);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #990000">(</span> <span style="color: #990000">(</span>x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">.)</span> <span style="color: #990000">*</span> <span style="color: #993399">2</span><span style="color: #990000">.</span> <span style="color: #990000">-</span> <span style="color: #993399">3</span><span style="color: #990000">.)</span> <span style="color: #990000">/</span> <span style="color: #993399">4</span><span style="color: #990000">.);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Use forward mode (because x is shorter than y) to calculate Jacobian</span></span>
     p <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">dx</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">dy</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     dx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     dy    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span>p<span style="color: #990000">,</span> dx<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> <span style="color: #993399">1</span><span style="color: #990000">.,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dy<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> <span style="color: #993399">2</span><span style="color: #990000">.,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dy<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">],</span> <span style="color: #993399">2</span><span style="color: #990000">.,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dy<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">],</span> <span style="color: #990000">.</span><span style="color: #993399">5</span><span style="color: #990000">,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Use Jacobian routine (which automatically decides which mode to use)</span></span>
     dy <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Jacobian</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> <span style="color: #993399">1</span><span style="color: #990000">.,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dy<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> <span style="color: #993399">2</span><span style="color: #990000">.,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dy<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">],</span> <span style="color: #993399">2</span><span style="color: #990000">.,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dy<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">],</span> <span style="color: #990000">.</span><span style="color: #993399">5</span><span style="color: #990000">,</span> eps99<span style="color: #990000">,</span> eps99<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: example/stack_machine.cpp

</body>
</html>
