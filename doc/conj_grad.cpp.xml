<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Differentiate Conjugate Gradient Algorithm: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Differentiate Conjugate Gradient Algorithm: Example and Test"/>
<meta name="keywords" id="keywords" content=" differentiate conjugate gradient algorithm: example test purpose algorithm "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_conj_grad.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="ad_in_c.cpp.xml" target="_top">Prev</a>
</td><td><a href="cppad_eigen.hpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>conj_grad.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Example-&gt;</option>
<option>get_started.cpp</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>testvector</option>
<option>wno_conversion</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>General-&gt;</option>
<option>ad_fun.cpp</option>
<option>ad_in_c.cpp</option>
<option>conj_grad.cpp</option>
<option>cppad_eigen.hpp</option>
<option>hes_minor_det.cpp</option>
<option>hes_lu_det.cpp</option>
<option>interface2c.cpp</option>
<option>jac_minor_det.cpp</option>
<option>jac_lu_det.cpp</option>
<option>mul_level</option>
<option>ode_stiff.cpp</option>
<option>mul_level_ode.cpp</option>
<option>mul_level_adolc_ode.cpp</option>
<option>ode_taylor.cpp</option>
<option>stack_machine.cpp</option>
</select>
</td>
<td>conj_grad.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Algorithm</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Differentiate Conjugate Gradient Algorithm: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
The conjugate gradient algorithm is sparse linear solver and
a good example where checkpointing can be applied (for each iteration).
This example is a preliminary version of a new library routine
for the conjugate gradient algorithm.

<br/>
<br/>
<b><big><a name="Algorithm" id="Algorithm">Algorithm</a></big></b>
<br/>
Given a positive definite matrix 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>A</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msup>
</mrow></math>

,
a vector 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
and tolerance 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B5;</mi>
</mrow></math>

,
the conjugate gradient algorithm finds an 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>


such that 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">&#x02016;</mo>
<mi mathvariant='italic'>A</mi>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>b</mi>
<msup><mo stretchy="false">&#x02016;</mo>
<mn>2</mn>
</msup>
<mo stretchy="false">/</mo>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x02264;</mo>
<msup><mi mathvariant='normal'>&#x003B5;</mi>
<mn>2</mn>
</msup>
</mrow></math>


(or it terminates at a specified maximum number of iterations).

<ol type="1"><li>
Input:
<code><span style='white-space: nowrap'><br/>
</span></code>The matrix 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>A</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msup>
</mrow></math>

,
the vector 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>b</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

,
a tolerance 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='normal'>&#x003B5;</mi>
<mo stretchy="false">&#x02265;</mo>
<mn>0</mn>
</mrow></math>

,
a maximum number of iterations 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>m</mi>
</mrow></math>

,
and the initial approximate solution 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>x</mi>
<mn>0</mn>
</msup>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>


(can use zero for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>x</mi>
<mn>0</mn>
</msup>
</mrow></math>

).

</li><li>

Initialize:
<code><span style='white-space: nowrap'><br/>
</span></code>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>g</mi>
<mn>0</mn>
</msup>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>A</mi>
<mo stretchy="false">*</mo>
<msup><mi mathvariant='italic'>x</mi>
<mn>0</mn>
</msup>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>b</mi>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>d</mi>
<mn>0</mn>
</msup>
<mo stretchy="false">=</mo>
<mo stretchy="false">-</mo>
<msup><mi mathvariant='italic'>g</mi>
<mn>0</mn>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>s</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">=</mo>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>g</mi>
<mn>0</mn>
</msup>
<msup><mo stretchy="false">)</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<msup><mi mathvariant='italic'>g</mi>
<mn>0</mn>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>k</mi>
<mo stretchy="false">=</mo>
<mn>0</mn>
</mrow></math>

.

</li><li>

Convergence Check:
<code><span style='white-space: nowrap'><br/>
</span></code>if 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>k</mi>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>m</mi>
</mrow></math>

 or 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msqrt><mrow><msub><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">/</mo>
<mi mathvariant='italic'>n</mi>
</mrow>
</msqrt>
<mo stretchy="false">&lt;</mo>
<mi mathvariant='normal'>&#x003B5;</mi>
</mrow></math>

,
return 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>k</mi>
</mrow></math>

 as the number of iterations and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>


as the approximate solution.

</li><li>

Next 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>

:
<code><span style='white-space: nowrap'><br/>
</span></code>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='normal'>&#x003BC;</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msub>
<mo stretchy="false">=</mo>
<msub><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">/</mo>
<mo stretchy="false">[</mo>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>d</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<msup><mo stretchy="false">)</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mi mathvariant='italic'>A</mi>
<msup><mi mathvariant='italic'>d</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">]</mo>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>x</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msup>
<mo stretchy="false">=</mo>
<msup><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">+</mo>
<msub><mi mathvariant='normal'>&#x003BC;</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msub>
<msup><mi mathvariant='italic'>d</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>

.

</li><li>

Next 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>g</mi>
</mrow></math>

:
<code><span style='white-space: nowrap'><br/>
</span></code>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>g</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msup>
<mo stretchy="false">=</mo>
<msup><mi mathvariant='italic'>g</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">+</mo>
<msub><mi mathvariant='normal'>&#x003BC;</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msub>
<mi mathvariant='italic'>A</mi>
<msup><mi mathvariant='italic'>d</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>

,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>s</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msub>
<mo stretchy="false">=</mo>
<mo stretchy="false">(</mo>
<msup><mi mathvariant='italic'>g</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msup>
<msup><mo stretchy="false">)</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<msup><mi mathvariant='italic'>g</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msup>
</mrow></math>

.

</li><li>

Next 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>d</mi>
</mrow></math>

:
<code><span style='white-space: nowrap'><br/>
</span></code>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mi mathvariant='italic'>d</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msup>
<mo stretchy="false">=</mo>
<mo stretchy="false">-</mo>
<msup><mi mathvariant='italic'>g</mi>
<mi mathvariant='italic'>k</mi>
</msup>
<mo stretchy="false">+</mo>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>s</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow>
</msub>
<mo stretchy="false">/</mo>
<msub><mi mathvariant='italic'>s</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">)</mo>
<msup><mi mathvariant='italic'>d</mi>
<mi mathvariant='italic'>k</mi>
</msup>
</mrow></math>

.

</li><li>

Iterate:
<code><span style='white-space: nowrap'><br/>
</span></code>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>k</mi>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>k</mi>
<mo stretchy="false">+</mo>
<mn>1</mn>
</mrow></math>

,
goto Convergence Check.
</li></ol>


<code><font color="blue">
<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cstdlib&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cmath&gt;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// Begin empty namespace</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// A simple matrix multiply c = a * b , where a has n columns</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// and b has n rows. This should be changed to a function so that</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// it can efficiently handle the case were A is large and sparse.</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Vector</span><span style="color: #990000">&gt;</span> <span style="font-style: italic"><span style="color: #9A1900">// a simple vector class</span></span>
     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">mat_mul</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> n<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span> a<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span> b<span style="color: #990000">,</span> Vector<span style="color: #990000">&amp;</span> c<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">typename</span></span> <span style="color: #008080">Vector</span><span style="color: #990000">::</span><span style="color: #008080">value_type</span> scalar<span style="color: #990000">;</span>

          <span style="color: #008080">size_t</span> m<span style="color: #990000">,</span> p<span style="color: #990000">;</span>
          m <span style="color: #990000">=</span> a<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> n<span style="color: #990000">;</span>
          p <span style="color: #990000">=</span> b<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> n<span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">*</span> n <span style="color: #990000">==</span> a<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">*</span> p <span style="color: #990000">==</span> b<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">*</span> p <span style="color: #990000">==</span> c<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>

          <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> ij<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> p<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     ij    <span style="color: #990000">=</span> i <span style="color: #990000">*</span> p <span style="color: #990000">+</span> j<span style="color: #990000">;</span>
                    c<span style="color: #990000">[</span>ij<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">scalar</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                         c<span style="color: #990000">[</span>ij<span style="color: #990000">]</span> <span style="color: #990000">=</span> c<span style="color: #990000">[</span>ij<span style="color: #990000">]</span> <span style="color: #990000">+</span> a<span style="color: #990000">[</span>i <span style="color: #990000">*</span> m <span style="color: #990000">+</span> k<span style="color: #990000">]</span> <span style="color: #990000">*</span> b<span style="color: #990000">[</span>k <span style="color: #990000">*</span> p <span style="color: #990000">+</span> j<span style="color: #990000">];</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Solve A * x == b to tolerance epsilon or terminate at m interations.</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Vector</span><span style="color: #990000">&gt;</span> <span style="font-style: italic"><span style="color: #9A1900">// a simple vector class</span></span>
     <span style="color: #008080">size_t</span> <span style="font-weight: bold"><span style="color: #000000">conjugate_gradient</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>         m       <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// input</span></span>
          <span style="color: #009900">double</span>         epsilon <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// input</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span>  A       <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// input</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span>  b       <span style="color: #990000">,</span> <span style="font-style: italic"><span style="color: #9A1900">// input</span></span>
          Vector<span style="color: #990000">&amp;</span>        x       <span style="color: #990000">)</span> <span style="font-style: italic"><span style="color: #9A1900">// input / output</span></span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">typename</span></span> <span style="color: #008080">Vector</span><span style="color: #990000">::</span><span style="color: #008080">value_type</span> scalar<span style="color: #990000">;</span>
          <span style="color: #008080">scalar</span> mu<span style="color: #990000">,</span> s_previous<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> k<span style="color: #990000">;</span>

          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> A<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">*</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> b<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>

          <span style="color: #008080">Vector</span> <span style="font-weight: bold"><span style="color: #000000">g</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">d</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">s</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">Ad</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">dAd</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// g = A * x</span></span>
          <span style="font-weight: bold"><span style="color: #000000">mat_mul</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> A<span style="color: #990000">,</span> x<span style="color: #990000">,</span> g<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// g = A * x - b</span></span>
               g<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> g<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">-</span> b<span style="color: #990000">[</span>i<span style="color: #990000">];</span>

               <span style="font-style: italic"><span style="color: #9A1900">// d = - g</span></span>
               d<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span>g<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// s = g^T * g</span></span>
          <span style="font-weight: bold"><span style="color: #000000">mat_mul</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> g<span style="color: #990000">,</span> g<span style="color: #990000">,</span> s<span style="color: #990000">);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     s_previous <span style="color: #990000">=</span> s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> s_previous <span style="color: #990000">&lt;</span> epsilon <span style="color: #990000">)</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> k<span style="color: #990000">;</span>

               <span style="font-style: italic"><span style="color: #9A1900">// Ad = A * d</span></span>
               <span style="font-weight: bold"><span style="color: #000000">mat_mul</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> A<span style="color: #990000">,</span> d<span style="color: #990000">,</span> Ad<span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// dAd = d^T * A * d</span></span>
               <span style="font-weight: bold"><span style="color: #000000">mat_mul</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> d<span style="color: #990000">,</span> Ad<span style="color: #990000">,</span> dAd<span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// mu = s / d^T * A * d</span></span>
               mu <span style="color: #990000">=</span> s_previous <span style="color: #990000">/</span> dAd<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

               <span style="font-style: italic"><span style="color: #9A1900">// g = g + mu * A * d</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">+</span> mu <span style="color: #990000">*</span> d<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
                    g<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> g<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">+</span> mu <span style="color: #990000">*</span> Ad<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
               <span style="color: #FF0000">}</span>

               <span style="font-style: italic"><span style="color: #9A1900">// s = g^T * g</span></span>
               <span style="font-weight: bold"><span style="color: #000000">mat_mul</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> g<span style="color: #990000">,</span> g<span style="color: #990000">,</span> s<span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// d = - g + (s / s_previous) * d</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                    d<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span> g<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">+</span> <span style="color: #990000">(</span> s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">/</span> s_previous<span style="color: #990000">)</span> <span style="color: #990000">*</span> d<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> m<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// End empty namespace</span></span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">conj_grad</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Setup</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>cout<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>endl<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">;</span>


     <span style="font-style: italic"><span style="color: #9A1900">// size of the vectors</span></span>
     <span style="color: #008080">size_t</span> n  <span style="color: #990000">=</span> <span style="color: #993399">40</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">D</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">Dt</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">A</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">b</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">c</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">a_A</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">a_x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">a_b</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// D = diagonally dominant matrix</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// c = vector of ones</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     c<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
          <span style="color: #009900">double</span> sum <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i <span style="color: #990000">!=</span> j <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     D<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">rand</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>RAND_MAX<span style="color: #990000">);</span>
               Dt<span style="color: #990000">[</span>j <span style="color: #990000">*</span> n <span style="color: #990000">+</span> i <span style="color: #990000">]</span> <span style="color: #990000">=</span> D<span style="color: #990000">[</span>i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j <span style="color: #990000">];</span>
               sum           <span style="color: #990000">+=</span> D<span style="color: #990000">[</span>i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j <span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          Dt<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> i <span style="color: #990000">]</span> <span style="color: #990000">=</span> D<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> i <span style="color: #990000">]</span> <span style="color: #990000">=</span> sum <span style="color: #990000">*</span> <span style="color: #993399">1.1</span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// A = D^T * D</span></span>
     <span style="font-weight: bold"><span style="color: #000000">mat_mul</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> Dt<span style="color: #990000">,</span> D<span style="color: #990000">,</span> A<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// b = D^T * c</span></span>
     <span style="font-weight: bold"><span style="color: #000000">mat_mul</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> Dt<span style="color: #990000">,</span> c<span style="color: #990000">,</span> b<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// copy from double to AD&lt;double&gt;</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     a_b<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> b<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               a_A<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> A<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j <span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// ---------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Record the function f : b -&gt; x</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// ---------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Make b the independent variable vector</span></span>
     <span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>a_b<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Solve A * x = b using conjugate gradient method</span></span>
     <span style="color: #009900">double</span> epsilon <span style="color: #990000">=</span> <span style="color: #993399">1e-7</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               a_x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> n <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">conjugate_gradient</span></span><span style="color: #990000">(</span>m<span style="color: #990000">,</span> epsilon<span style="color: #990000">,</span> a_A<span style="color: #990000">,</span> a_b<span style="color: #990000">,</span> a_x<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// create f_cg: b -&gt; x and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>a_b<span style="color: #990000">,</span> a_x<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// ---------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Check for correctness</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// ---------------------------------------------------------------------</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// conjugate gradient should converge with in n iterations</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>k <span style="color: #990000">&lt;=</span> n<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// accuracy to which we expect values to agree</span></span>
     <span style="color: #009900">double</span> delta <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> epsilon <span style="color: #990000">*</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">sqrt</span></span><span style="color: #990000">(</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>n<span style="color: #990000">)</span> <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// copy x from AD&lt;double&gt; to double</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">Value</span></span><span style="color: #990000">(</span> a_x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check c = A * x</span></span>
     <span style="font-weight: bold"><span style="color: #000000">mat_mul</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> A<span style="color: #990000">,</span> x<span style="color: #990000">,</span> c<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>c<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">,</span> b<span style="color: #990000">[</span>i<span style="color: #990000">],</span>  delta <span style="color: #990000">,</span> delta<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// forward computation of partials w.r.t. b[0]</span></span>
     <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">db</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">dx</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          db<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     db<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check db = A * dx</span></span>
     delta <span style="color: #990000">=</span> <span style="color: #993399">5</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> delta<span style="color: #990000">;</span>
     dx <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> db<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">mat_mul</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> A<span style="color: #990000">,</span> dx<span style="color: #990000">,</span> c<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          ok   <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>c<span style="color: #990000">[</span>i<span style="color: #990000">],</span> db<span style="color: #990000">[</span>i<span style="color: #990000">],</span> delta<span style="color: #990000">,</span> delta<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: example/sparse/conj_grad.cpp

</body>
</html>
