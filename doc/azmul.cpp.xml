<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>AD Absolute Zero Multiplication: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="AD Absolute Zero Multiplication: Example and Test"/>
<meta name="keywords" id="keywords" content=" ad absolute zero multiplication: example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_azmul.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="azmul.xml" target="_top">Prev</a>
</td><td><a href="condexp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>binary_math</option>
<option>azmul</option>
<option>azmul.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>unary_standard_math</option>
<option>binary_math</option>
<option>CondExp</option>
<option>Discrete</option>
<option>numeric_limits</option>
<option>atomic</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>binary_math-&gt;</option>
<option>atan2</option>
<option>pow</option>
<option>azmul</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>azmul-&gt;</option>
<option>azmul.cpp</option>
</select>
</td>
<td>azmul.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>AD Absolute Zero Multiplication: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cmath&gt;</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">azmul</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> inf <span style="color: #990000">=</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">infinity</span></span><span style="color: #990000">();</span>
     <span style="color: #009900">double</span> eps <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
     <span style="color: #008080">size_t</span> n  <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="color: #009900">double</span> x <span style="color: #990000">=</span> <span style="color: #993399">0.5</span><span style="color: #990000">;</span>
     <span style="color: #009900">double</span> y <span style="color: #990000">=</span> <span style="color: #993399">2.0</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">axy</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     axy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>      <span style="color: #990000">=</span> x<span style="color: #990000">;</span>
     axy<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span>      <span style="color: #990000">=</span> y<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and start tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>axy<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// range space vector</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">5</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">az</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     az<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">azmul</span></span><span style="color: #990000">(</span>axy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> axy<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span> <span style="font-style: italic"><span style="color: #9A1900">// azmul(variable, variable)</span></span>
     az<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">azmul</span></span><span style="color: #990000">(</span>axy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> inf<span style="color: #990000">);</span>    <span style="font-style: italic"><span style="color: #9A1900">// azmul(variable, parameter=inf)</span></span>
     az<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">azmul</span></span><span style="color: #990000">(</span>axy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> <span style="color: #993399">3.0</span><span style="color: #990000">);</span>    <span style="font-style: italic"><span style="color: #9A1900">// azmul(variable, parameter=3.0)</span></span>
     az<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">azmul</span></span><span style="color: #990000">(</span><span style="color: #993399">0.0</span><span style="color: #990000">,</span> axy<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>    <span style="font-style: italic"><span style="color: #9A1900">// azmul(parameter=0.0, variable)</span></span>
     az<span style="color: #990000">[</span><span style="color: #993399">4</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">azmul</span></span><span style="color: #990000">(</span><span style="color: #993399">4.0</span><span style="color: #990000">,</span> axy<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>    <span style="font-style: italic"><span style="color: #9A1900">// azmul(parameter=4.0, variable)</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// create f: axy -&gt; az and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>axy<span style="color: #990000">,</span> az<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check value when x is not zero</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>az<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> x <span style="color: #990000">*</span> y<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> az<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> inf<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>az<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> x <span style="color: #990000">*</span> <span style="color: #993399">3.0</span><span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> az<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>az<span style="color: #990000">[</span><span style="color: #993399">4</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> <span style="color: #993399">4.0</span> <span style="color: #990000">*</span> y<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>


     <span style="font-style: italic"><span style="color: #9A1900">// check value x is zero and y is infinity</span></span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">xy</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">z</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     xy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
     xy<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> inf<span style="color: #990000">;</span>
     z     <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> xy<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> z<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> z<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> z<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> z<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> z<span style="color: #990000">[</span><span style="color: #993399">4</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> inf<span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: example/general/azmul.cpp

</body>
</html>
