<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>AD Absolute Zero Multiplication: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="AD Absolute Zero Multiplication: Example and Test"/>
<meta name="keywords" id="keywords" content=" ad absolute zero multiplication: example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_azmul.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="azmul.xml" target="_top">Prev</a>
</td><td><a href="condexp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>binary_math</option>
<option>azmul</option>
<option>azmul.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>unary_standard_math</option>
<option>binary_math</option>
<option>CondExp</option>
<option>Discrete</option>
<option>numeric_limits</option>
<option>atomic</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>binary_math-&gt;</option>
<option>atan2</option>
<option>pow</option>
<option>azmul</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>azmul-&gt;</option>
<option>azmul.cpp</option>
</select>
</td>
<td>azmul.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>AD Absolute Zero Multiplication: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;
# include &lt;cmath&gt;

bool azmul(void)
{	bool ok = true;

	using CppAD::AD;
	using CppAD::NearEqual;
	double inf = std::numeric_limits&lt;double&gt;::infinity();
	double eps = 10. * std::numeric_limits&lt;double&gt;::epsilon();

	// domain space vector
	size_t n  = 2;
	double x = 0.5;
	double y = 2.0;
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(AD&lt;double&gt;) axy(n);
	axy[0]      = x;
	axy[1]      = y;

	// declare independent variables and start tape recording
	CppAD::<a href="independent.xml" target="_top">Independent</a>(axy);

	// range space vector
	size_t m = 5;
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(AD&lt;double&gt;) az(m);
	az[0] = CppAD::azmul(axy[0], axy[1]); // azmul(variable, variable)
	az[1] = CppAD::azmul(axy[0], inf);    // azmul(variable, parameter=inf)
	az[2] = CppAD::azmul(axy[0], 3.0);    // azmul(variable, parameter=3.0)
	az[3] = CppAD::azmul(0.0, axy[1]);    // azmul(parameter=0.0, variable)
	az[4] = CppAD::azmul(4.0, axy[1]);    // azmul(parameter=4.0, variable)

	// create f: axy -&gt; az and stop tape recording
	CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f(axy, az);

	// check value when x is not zero
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(az[0] , x * y,  eps, eps);
	ok &amp;= az[1] == inf;
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(az[2] , x * 3.0,  eps, eps);
	ok &amp;= az[3] == 0.0;
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(az[4] , 4.0 * y,  eps, eps);


	// check value x is zero and y is infinity
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(double) xy(n), z(m);
	xy[0] = 0.0;
	xy[1] = inf;
	z     = f.<a href="forward.xml" target="_top">Forward</a>(0, xy);
	ok &amp;= z[0] == 0.0;
	ok &amp;= z[1] == 0.0;
	ok &amp;= z[2] == 0.0;
	ok &amp;= z[3] == 0.0;
	ok &amp;= z[4] == inf;

	return ok;
}

</pre>

</font></code>


<hr/>Input File: example/azmul.cpp

</body>
</html>
