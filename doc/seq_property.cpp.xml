<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>ADFun Sequence Properties: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="ADFun Sequence Properties: Example and Test"/>
<meta name="keywords" id="keywords" content=" adfun sequence properties: example test Domain Range Parameter size_var size_par size_op_arg size_vecad "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_seq_property.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="seq_property.xml" target="_top">Prev</a>
</td><td><a href="funeval.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>seq_property</option>
<option>seq_property.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>abort_recording</option>
<option>seq_property</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>optimize</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>seq_property-&gt;</option>
<option>seq_property.cpp</option>
</select>
</td>
<td>seq_property.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>ADFun Sequence Properties: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">seq_property</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Use nvar to track the number of variables in the operation sequence.</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Start with one for the phantom variable at tape address zero.</span></span>
     <span style="color: #008080">size_t</span> nvar <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Use npar to track the number of parameters in the operation sequence.</span></span>
     <span style="color: #008080">size_t</span> npar <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Start with one for operator corresponding to phantom variable</span></span>
     <span style="color: #008080">size_t</span> nop  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Start with one for operator corresponding to phantom argument</span></span>
     <span style="color: #008080">size_t</span> narg <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Use ntext to track the number of characters used to label</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// output generated using PrintFor commands.</span></span>
     <span style="color: #008080">size_t</span> ntext <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Use nvecad to track the number of VecAD vectors, plus the number</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// of VecAD vector elements, in the operation sequence.</span></span>
     <span style="color: #008080">size_t</span> nvecad <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// a VecAD vector</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">VecAD&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">v</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     v<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>     <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// requires the parameter 0, when becomes a variable</span></span>
     v<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span>     <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// requires the parameter 1, when becomes a variable</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>     <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span>     <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and start tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>
     nvar    <span style="color: #990000">+=</span> n<span style="color: #990000">;</span>
     nop     <span style="color: #990000">+=</span> n<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// a computation that adds to the operation sequence</span></span>
     <span style="color: #008080">AD&lt;double&gt;</span> I <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     v<span style="color: #990000">[</span>I<span style="color: #990000">]</span>         <span style="color: #990000">=</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
     nvecad      <span style="color: #990000">+=</span>   <span style="color: #993399">3</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// one for vector, two for its elements</span></span>
     npar        <span style="color: #990000">+=</span>   <span style="color: #993399">2</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// need parameters 0 and 1 for initial v</span></span>
     nop         <span style="color: #990000">+=</span>   <span style="color: #993399">1</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// operator for storing in a VecAD object</span></span>
     narg        <span style="color: #990000">+=</span>   <span style="color: #993399">3</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// the three arguments are v, I, and x[0]</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// some operations that do not add to the operation sequence</span></span>
     <span style="color: #008080">AD&lt;double&gt;</span> u <span style="color: #990000">=</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>  <span style="font-style: italic"><span style="color: #9A1900">// use same variable as x[0]</span></span>
     <span style="color: #008080">AD&lt;double&gt;</span> w <span style="color: #990000">=</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>  <span style="font-style: italic"><span style="color: #9A1900">// use same variable as x[1]</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// a computation that adds to the operation sequence</span></span>
     w      <span style="color: #990000">=</span> w <span style="color: #990000">*</span> <span style="color: #990000">(</span>u <span style="color: #990000">+</span> w<span style="color: #990000">);</span>
     nop   <span style="color: #990000">+=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// requires two new operators, an add and a multiply</span></span>
     nvar  <span style="color: #990000">+=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// each operator results in its own variable</span></span>
     narg  <span style="color: #990000">+=</span> <span style="color: #993399">4</span><span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// each operator has two arguments</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// range space vector</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// operations that do not add to the operation sequence</span></span>
     y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>   <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>  <span style="font-style: italic"><span style="color: #9A1900">// re-use the parameter 1</span></span>
     y<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span>   <span style="color: #990000">=</span> u<span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// use same variable as u</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// a computation that adds to the operation sequence</span></span>
     y<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span>   <span style="color: #990000">=</span> w <span style="color: #990000">+</span> <span style="color: #993399">2</span><span style="color: #990000">.;</span>
     nop   <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// requires a new add operator</span></span>
     npar  <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// new parameter 2 is new, so it must be included</span></span>
     nvar  <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// variable corresponding to the result</span></span>
     narg  <span style="color: #990000">+=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// operator has two arguments</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// create f: x -&gt; y and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> y<span style="color: #990000">);</span>
     nop   <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// special operator for y[0] because it is a parameter</span></span>
     nvar  <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// special variable for y[0] because it is a parameter</span></span>
     narg  <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// identifies which parameter corresponds to y[0]</span></span>
     nop   <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// special operator at the end of operation sequence</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the sequence property functions</span></span>
     ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Domain</span></span><span style="color: #990000">()</span>      <span style="color: #990000">==</span> n<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Range</span></span><span style="color: #990000">()</span>       <span style="color: #990000">==</span> m<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Parameter</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">)</span>  <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Parameter</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">)</span>  <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Parameter</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">)</span>  <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size_var</span></span><span style="color: #990000">()</span>    <span style="color: #990000">==</span> nvar<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size_op</span></span><span style="color: #990000">()</span>     <span style="color: #990000">==</span> nop<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size_op_arg</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> narg<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size_par</span></span><span style="color: #990000">()</span>    <span style="color: #990000">==</span> npar<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size_text</span></span><span style="color: #990000">()</span>   <span style="color: #990000">==</span> ntext<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size_VecAD</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> nvecad<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> sum <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     sum <span style="color: #990000">+=</span> nop    <span style="color: #990000">*</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>CppAD<span style="color: #990000">::</span>local<span style="color: #990000">::</span>OpCode<span style="color: #990000">);</span>
     sum <span style="color: #990000">+=</span> narg   <span style="color: #990000">*</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>CPPAD_TAPE_ADDR_TYPE<span style="color: #990000">);</span>
     sum <span style="color: #990000">+=</span> npar   <span style="color: #990000">*</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">);</span>
     sum <span style="color: #990000">+=</span> ntext  <span style="color: #990000">*</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span><span style="color: #009900">char</span><span style="color: #990000">);</span>
     sum <span style="color: #990000">+=</span> nvecad <span style="color: #990000">*</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>CPPAD_TAPE_ADDR_TYPE<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size_op_seq</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> sum<span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: example/seq_property.cpp

</body>
</html>
