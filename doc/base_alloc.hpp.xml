<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Example AD&lt;Base&gt; Where Base Constructor Allocates Memory</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Example AD&lt;Base&gt; Where Base Constructor Allocates Memory"/>
<meta name="keywords" id="keywords" content=" example ad&lt;base&gt; where base constructor allocates memory purpose include file compound assignment macro binary operator boolean class definition condexpop condexprel equalopseq identical output integer azmul ordered unary standard math erf asinh acosh atanh expm1 log1p sign pow numeric_limits to_string hash_code "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_base_alloc.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="base_example.xml" target="_top">Prev</a>
</td><td><a href="base_require.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>base_require</option>
<option>base_example</option>
<option>base_alloc.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>ad_ctor</option>
<option>ad_assign</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>base_require-&gt;</option>
<option>base_member</option>
<option>base_cond_exp</option>
<option>base_identical</option>
<option>base_ordered</option>
<option>base_std_math</option>
<option>base_limits</option>
<option>base_to_string</option>
<option>base_hash</option>
<option>base_example</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>base_example-&gt;</option>
<option>base_alloc.hpp</option>
<option>base_require.cpp</option>
<option>base_adolc.hpp</option>
<option>base_float.hpp</option>
<option>base_double.hpp</option>
<option>base_complex.hpp</option>
</select>
</td>
<td>base_alloc.hpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Include File</option>
<option>Compound Assignment Macro</option>
<option>Binary Operator Macro</option>
<option>Boolean Operator Macro</option>
<option>Class Definition</option>
<option>CondExpOp</option>
<option>CondExpRel</option>
<option>EqualOpSeq</option>
<option>Identical</option>
<option>Output Operator</option>
<option>Integer</option>
<option>azmul</option>
<option>Ordered</option>
<option>Unary Standard Math</option>
<option>erf, asinh, acosh, atanh, expm1, log1p</option>
<option>sign</option>
<option>pow</option>
<option>numeric_limits</option>
<option>to_string</option>
<option>hash_code</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Example AD&lt;Base&gt; Where Base Constructor Allocates Memory</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
Demonstrate use of 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>

where memory is allocated for each element of the type 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
.
In addition, this is a complete example where all the
<a href="base_require.xml" target="_top"><span style='white-space: nowrap'>required&#xA0;Base</span></a>
 type
operations are defined (as apposed to other examples where
some of the operations for the Base type are already defined).

<br/>
<br/>
<b><big><a name="Include File" id="Include File">Include File</a></big></b>
<br/>
This file uses some of the definitions in <a href="base_require.xml" target="_top"><span style='white-space: nowrap'>base_require</span></a>

and <a href="thread_alloc.xml" target="_top"><span style='white-space: nowrap'>thread_alloc</span></a>
.
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/base_require.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/thread_alloc.hpp&gt;</span>
</tt></pre>
<br/>
<b><big><a name="Compound Assignment Macro" id="Compound Assignment Macro">Compound Assignment Macro</a></big></b>
<br/>
This macro is used for the
<code><font color="blue">base_alloc</font></code> compound assignment operators; to be specific,
used with 
<code><i><font color="black"><span style='white-space: nowrap'>op&#xA0;</span></font></i></code>
 equal to
<code><font color="blue">+=</font></code>,
<code><font color="blue">-=</font></code>,
<code><font color="blue">*=</font></code>,
<code><font color="blue">/=</font></code>.
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #000080"># define</span></span> <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_ASSIGN_OPERATOR</span></span><span style="color: #990000">(</span>op<span style="color: #990000">)</span> <span style="color: #990000">\</span>
     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #0000FF">operator</span></span> <span style="font-weight: bold"><span style="color: #000000">op</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span> <span style="color: #990000">\</span>
     <span style="color: #FF0000">{</span>     <span style="color: #990000">*</span><span style="color: #008080">ptrdbl_</span> <span style="color: #008080">op</span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
</tt></pre>
<br/>
<b><big><a name="Binary Operator Macro" id="Binary Operator Macro">Binary Operator Macro</a></big></b>
<br/>
This macro is used for the
<code><font color="blue">base_alloc</font></code> binary operators (as member functions); to be specific,
used with 
<code><i><font color="black"><span style='white-space: nowrap'>op&#xA0;</span></font></i></code>
 equal to
<code><font color="blue">+</font></code>,
<code><font color="blue">-</font></code>,
<code><font color="blue">*</font></code>,
<code><font color="blue">/</font></code>.
<pre><tt><span style="font-weight: bold"><span style="color: #000080"># define</span></span> <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_BINARY_OPERATOR</span></span><span style="color: #990000">(</span>op<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #990000">\</span>
     base_alloc <span style="color: #008080">operator</span> <span style="font-weight: bold"><span style="color: #000000">op</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #990000">\</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">base_alloc</span> result<span style="color: #990000">;</span> <span style="color: #990000">\</span>
          <span style="color: #009900">double</span>   dbl <span style="color: #990000">=</span> <span style="color: #990000">*</span>ptrdbl_<span style="color: #990000">;</span> <span style="color: #990000">\</span>
          <span style="color: #009900">double</span> x_dbl <span style="color: #990000">=</span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">;</span> <span style="color: #990000">\</span>
          <span style="color: #990000">*</span>result<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">=</span> dbl <span style="color: #008080">op</span> x_dbl<span style="color: #990000">;</span> <span style="color: #990000">\</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> result<span style="color: #990000">;</span> <span style="color: #990000">\</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Boolean Operator Macro" id="Boolean Operator Macro">Boolean Operator Macro</a></big></b>
<br/>
This macro can be used for the
<code><font color="blue">base_alloc</font></code> binary operators that have a
<code><font color="blue">bool</font></code> result; to be specific,
used with 
<code><i><font color="black"><span style='white-space: nowrap'>op&#xA0;</span></font></i></code>
 equal to
<code><font color="blue">==</font></code>,
<code><font color="blue">!=</font></code>,
<code><font color="blue">&lt;</font></code>,
<code><font color="blue">&lt;=</font></code>,
<code><font color="blue">&gt;=</font></code>, and
<code><font color="blue">&gt;</font></code>,
<pre><tt><span style="font-weight: bold"><span style="color: #000080"># define</span></span> <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_BOOL_OPERATOR</span></span><span style="color: #990000">(</span>op<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #990000">\</span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #0000FF">operator</span></span> <span style="font-weight: bold"><span style="color: #000000">op</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #990000">\</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">double</span>   dbl <span style="color: #990000">=</span> <span style="color: #990000">*</span>ptrdbl_<span style="color: #990000">;</span> <span style="color: #990000">\</span>
          <span style="color: #009900">double</span> x_dbl <span style="color: #990000">=</span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">;</span> <span style="color: #990000">\</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> dbl <span style="color: #008080">op</span> x_dbl<span style="color: #990000">;</span> <span style="color: #990000">\</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Class Definition" id="Class Definition">Class Definition</a></big></b>
<br/>
The following example class
defines the necessary <a href="base_member.xml" target="_top"><span style='white-space: nowrap'>base_member</span></a>
 functions.
It is made more complicated by storing a pointer to a <code><font color="blue">double</font></code>
instead of the <code><font color="blue">double</font></code> value itself.
<pre><tt>
<span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">base_alloc</span> <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
     <span style="color: #009900">double</span><span style="color: #990000">*</span> ptrdbl_<span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #000000">base_alloc</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> cap<span style="color: #990000">;</span>
          <span style="color: #009900">void</span><span style="color: #990000">*</span> v  <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">get_memory</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">),</span> cap<span style="color: #990000">);</span>
          ptrdbl_  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">*&gt;(</span>v<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #000000">base_alloc</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span> dbl<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> cap<span style="color: #990000">;</span>
          <span style="color: #009900">void</span> <span style="color: #990000">*</span>v  <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">get_memory</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">),</span> cap<span style="color: #990000">);</span>
          ptrdbl_  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">*&gt;(</span>v<span style="color: #990000">);</span>
          <span style="color: #990000">*</span>ptrdbl_ <span style="color: #990000">=</span> dbl<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #000000">base_alloc</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> cap<span style="color: #990000">;</span>
          <span style="color: #009900">void</span> <span style="color: #990000">*</span>v  <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">get_memory</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">),</span> cap<span style="color: #990000">);</span>
          ptrdbl_  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">*&gt;(</span>v<span style="color: #990000">);</span>
          <span style="color: #990000">*</span>ptrdbl_ <span style="color: #990000">=</span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="color: #990000">~</span><span style="font-weight: bold"><span style="color: #000000">base_alloc</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">void</span><span style="color: #990000">*</span> v  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">void</span><span style="color: #990000">*&gt;(</span>ptrdbl_<span style="color: #990000">);</span>
          CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">return_memory</span></span><span style="color: #990000">(</span>v<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     <span style="color: #008080">base_alloc</span> <span style="font-weight: bold"><span style="color: #0000FF">operator</span></span><span style="color: #990000">-(</span><span style="color: #009900">void</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">base_alloc</span> result<span style="color: #990000">;</span>
          <span style="color: #990000">*</span>result<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">=</span> <span style="color: #990000">-</span> <span style="color: #990000">*</span>ptrdbl_<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> result<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="color: #008080">base_alloc</span> <span style="font-weight: bold"><span style="color: #0000FF">operator</span></span><span style="color: #990000">+(</span><span style="color: #009900">void</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">*</span><span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #0000FF">operator</span></span><span style="color: #990000">=(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #990000">*</span>ptrdbl_ <span style="color: #990000">=</span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_ASSIGN_OPERATOR</span></span><span style="color: #990000">(+=)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_ASSIGN_OPERATOR</span></span><span style="color: #990000">(-=)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_ASSIGN_OPERATOR</span></span><span style="color: #990000">(*=)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_ASSIGN_OPERATOR</span></span><span style="color: #990000">(/=)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_BINARY_OPERATOR</span></span><span style="color: #990000">(+)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_BINARY_OPERATOR</span></span><span style="color: #990000">(-)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_BINARY_OPERATOR</span></span><span style="color: #990000">(*)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_BINARY_OPERATOR</span></span><span style="color: #990000">(/)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_BOOL_OPERATOR</span></span><span style="color: #990000">(==)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_BOOL_OPERATOR</span></span><span style="color: #990000">(!=)</span>
     <span style="font-style: italic"><span style="color: #9A1900">// The &lt;= operator is not necessary for the base type requirements</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (needed so we can use NearEqual with base_alloc arguments).</span></span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_BOOL_OPERATOR</span></span><span style="color: #990000">(&lt;=)</span>
<span style="color: #FF0000">}</span><span style="color: #990000">;</span></tt></pre>
<br/>
<b><big><a name="CondExpOp" id="CondExpOp">CondExpOp</a></big></b>
<br/>
The type <code><font color="blue">base_alloc</font></code> does not use <a href="condexp.xml" target="_top"><span style='white-space: nowrap'>CondExp</span></a>
 operations.
Hence its <code><font color="blue">CondExpOp</font></code> function is defined by
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #008080">base_alloc</span> <span style="font-weight: bold"><span style="color: #000000">CondExpOp</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">enum</span></span> <span style="color: #008080">CompareOp</span>     cop          <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span>       left         <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span>       right        <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span>       exp_if_true  <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span>       exp_if_false <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// not used</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// to void compiler error</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #000000">base_alloc</span></span><span style="color: #990000">();</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="CondExpRel" id="CondExpRel">CondExpRel</a></big></b>
<br/>
The <a href="base_cond_exp.xml#CondExpRel" target="_top"><span style='white-space: nowrap'>CPPAD_COND_EXP_REL</span></a>
 macro invocation
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_COND_EXP_REL</span></span><span style="color: #990000">(</span>base_alloc<span style="color: #990000">)</span>
<span style="color: #FF0000">}</span>
</tt></pre>
uses <code><font color="blue">CondExpOp</font></code> above to
define 
<code><font color="blue"><span style='white-space: nowrap'>CondExp</span></font><i><font color="black"><span style='white-space: nowrap'>Rel</span></font></i></code>
 for <code><font color="blue">base_alloc</font></code> arguments
and 
<code><i><font color="black"><span style='white-space: nowrap'>Rel</span></font></i></code>
 equal to
<code><font color="blue">Lt</font></code>, <code><font color="blue">Le</font></code>, <code><font color="blue">Eq</font></code>, <code><font color="blue">Ge</font></code>, and <code><font color="blue">Gt</font></code>.

<br/>
<br/>
<b><big><a name="EqualOpSeq" id="EqualOpSeq">EqualOpSeq</a></big></b>
<br/>
The type <code><font color="blue">base_alloc</font></code> is simple (in this respect) and so we define
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">EqualOpSeq</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> y<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">==</span> <span style="color: #990000">*</span>y<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Identical" id="Identical">Identical</a></big></b>
<br/>
The type <code><font color="blue">base_alloc</font></code> is simple (in this respect) and so we define
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">IdenticalPar</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">IdenticalZero</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(*</span>x<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">==</span> <span style="color: #993399">0.0</span><span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">IdenticalOne</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(*</span>x<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">==</span> <span style="color: #993399">1.0</span><span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">IdenticalEqualPar</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> y<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">(*</span>x<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">==</span> <span style="color: #990000">*</span>y<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Output Operator" id="Output Operator">Output Operator</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     std<span style="color: #990000">::</span>ostream<span style="color: #990000">&amp;</span> <span style="font-weight: bold"><span style="color: #0000FF">operator</span></span> <span style="color: #990000">&lt;&lt;</span> <span style="color: #990000">(</span>std<span style="color: #990000">::</span><span style="color: #008080">ostream</span> <span style="color: #990000">&amp;</span>os<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     os <span style="color: #990000">&lt;&lt;</span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> os<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Integer" id="Integer">Integer</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">int</span> <span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">int</span><span style="color: #990000">&gt;(*</span>x<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="azmul" id="azmul">azmul</a></big></b>

<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_AZMUL</span></span><span style="color: #990000">(</span> base_alloc <span style="color: #990000">)</span>
<span style="color: #FF0000">}</span>
</tt></pre>
<br/>
<b><big><a name="Ordered" id="Ordered">Ordered</a></big></b>
<br/>
The <code><font color="blue">base_alloc</font></code> type supports ordered comparisons
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">GreaterThanZero</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">&gt;</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">GreaterThanOrZero</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">&gt;=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">LessThanZero</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">&lt;</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">LessThanOrZero</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">&lt;=</span> <span style="color: #993399">0</span><span style="color: #990000">.</span>f<span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">abs_geq</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> y<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(*</span>x<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">)</span> <span style="color: #990000">&gt;=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(*</span>y<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Unary Standard Math" id="Unary Standard Math">Unary Standard Math</a></big></b>
<br/>
The macro
<a href="base_std_math.xml#CPPAD_STANDARD_MATH_UNARY" target="_top"><span style='white-space: nowrap'>CPPAD_STANDARD_MATH_UNARY</span></a>

would not work with the type <code><font color="blue">base_alloc</font></code> so we define
a special macro for this type:
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #000080"># define</span></span> <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>fun<span style="color: #990000">)</span> <span style="color: #990000">\</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #008080">base_alloc</span> <span style="font-weight: bold"><span style="color: #000000">fun</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span> <span style="color: #990000">\</span>
     <span style="color: #FF0000">{</span> <span style="font-weight: bold"><span style="color: #0000FF">return</span></span>   std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">fun</span></span><span style="color: #990000">(*</span>x<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
</tt></pre>
The following invocations of the macro above define the
<a href="base_std_math.xml#Unary Standard Math" target="_top"><span style='white-space: nowrap'>unary&#xA0;standard&#xA0;math</span></a>
 functions
(except for <code><font color="blue">abs</font></code>):
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>acos<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>asin<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>atan<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>cos<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>cosh<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>exp<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>fabs<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>log<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>log10<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>sin<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>sinh<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>sqrt<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>tan<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>tanh<span style="color: #990000">)</span>
<span style="color: #FF0000">}</span></tt></pre>
The absolute value function is special because it <code><font color="blue">std</font></code> name is
<code><font color="blue">fabs</font></code>
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #008080">base_alloc</span> <span style="font-weight: bold"><span style="color: #000000">abs</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="erf, asinh, acosh, atanh, expm1, log1p" id="erf, asinh, acosh, atanh, expm1, log1p">erf, asinh, acosh, atanh, expm1, log1p</a></big></b>
<br/>
The following defines the
<a href="base_std_math.xml#erf, asinh, acosh, atanh, expm1, log1p" target="_top"><span style='white-space: nowrap'>erf,&#xA0;asinh,&#xA0;acosh,&#xA0;atanh,&#xA0;expm1,&#xA0;log1p</span></a>
 functions
required by <code><font color="blue">AD&lt;base_alloc&gt;</font></code>:
<pre><tt><span style="font-weight: bold"><span style="color: #000080"># if</span></span> CPPAD_USE_CPLUSPLUS_2011
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>erf<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>asinh<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>acosh<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>atanh<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>expm1<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #000000">BASE_ALLOC_STD_MATH</span></span><span style="color: #990000">(</span>log1p<span style="color: #990000">)</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span></tt></pre>
<br/>
<b><big><a name="sign" id="sign">sign</a></big></b>
<br/>
The following defines the <code><font color="blue">CppAD::sign</font></code> function that
is required to use <code><font color="blue">AD&lt;base_alloc&gt;</font></code>:
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #008080">base_alloc</span> <span style="font-weight: bold"><span style="color: #000000">sign</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">&gt;</span> <span style="color: #993399">0.0</span> <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">==</span> <span style="color: #993399">0.0</span> <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">-</span><span style="color: #993399">1.0</span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="pow" id="pow">pow</a></big></b>
<br/>
The following defines a <code><font color="blue">CppAD::pow</font></code> function that
is required to use <code><font color="blue">AD&lt;base_alloc&gt;</font></code>:
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #008080">base_alloc</span> <span style="font-weight: bold"><span style="color: #000000">pow</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> y<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span> <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">pow</span></span><span style="color: #990000">(*</span>x<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">,</span> <span style="color: #990000">*</span>y<span style="color: #990000">.</span>ptrdbl_<span style="color: #990000">);</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="numeric_limits" id="numeric_limits">numeric_limits</a></big></b>
<br/>
The following defines the CppAD <a href="numeric_limits.xml" target="_top"><span style='white-space: nowrap'>numeric_limits</span></a>

for the type <code><font color="blue">base_alloc</font></code>:
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_NUMERIC_LIMITS</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">,</span> base_alloc<span style="color: #990000">)</span>
<span style="color: #FF0000">}</span>
</tt></pre>
<br/>
<b><big><a name="to_string" id="to_string">to_string</a></big></b>
<br/>
The following defines the CppAD <a href="to_string.xml" target="_top"><span style='white-space: nowrap'>to_string</span></a>
 function
for the type <code><font color="blue">base_alloc</font></code>:
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TO_STRING</span></span><span style="color: #990000">(</span>base_alloc<span style="color: #990000">)</span>
<span style="color: #FF0000">}</span>
</tt></pre>
<br/>
<b><big><a name="hash_code" id="hash_code">hash_code</a></big></b>
<br/>
The <a href="base_hash.xml#Default" target="_top"><span style='white-space: nowrap'>default</span></a>
 hashing function does
not work well for this case because two different pointers can
have the same value.
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">unsigned</span> <span style="color: #009900">short</span> <span style="font-weight: bold"><span style="color: #000000">hash_code</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> base_alloc<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">unsigned</span> <span style="color: #009900">short</span> code <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">==</span> <span style="color: #993399">0.0</span> <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> code<span style="color: #990000">;</span>
          <span style="color: #009900">double</span> log_x <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>x<span style="color: #990000">.</span>ptrdbl_ <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// assume log( std::numeric_limits&lt;double&gt;::max() ) is near 700</span></span>
          code <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">unsigned</span> <span style="color: #009900">short</span><span style="color: #990000">&gt;(</span>
               <span style="color: #990000">(</span>CPPAD_HASH_TABLE_SIZE <span style="color: #990000">/</span> <span style="color: #993399">700</span> <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> log_x
          <span style="color: #990000">);</span>
          code <span style="color: #990000">=</span> code <span style="color: #990000">%</span> CPPAD_HASH_TABLE_SIZE<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> code<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: example/general/base_alloc.hpp

</body>
</html>
