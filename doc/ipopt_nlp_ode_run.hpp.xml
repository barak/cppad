<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Driver for Running the Ipopt ODE Example</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Driver for Running the Ipopt ODE Example"/>
<meta name="keywords" id="keywords" content=" driver running the ipopt ode example "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ipopt_nlp_ode_run.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="ipopt_nlp_ode_fast.hpp.xml" target="_top">Prev</a>
</td><td><a href="ipopt_nlp_ode_check.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>cppad_ipopt_nlp</option>
<option>ipopt_nlp_ode</option>
<option>ipopt_nlp_ode_run.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>deprecated-&gt;</option>
<option>include_deprecated</option>
<option>FunDeprecated</option>
<option>CompareChange</option>
<option>omp_max_thread</option>
<option>TrackNewDel</option>
<option>omp_alloc</option>
<option>memory_leak</option>
<option>epsilon</option>
<option>test_vector</option>
<option>cppad_ipopt_nlp</option>
<option>old_atomic</option>
<option>zdouble</option>
<option>autotools</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>cppad_ipopt_nlp-&gt;</option>
<option>ipopt_nlp_get_started.cpp</option>
<option>ipopt_nlp_ode</option>
<option>ipopt_ode_speed.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ipopt_nlp_ode-&gt;</option>
<option>ipopt_nlp_ode_problem</option>
<option>ipopt_nlp_ode_simple</option>
<option>ipopt_nlp_ode_fast</option>
<option>ipopt_nlp_ode_run.hpp</option>
<option>ipopt_nlp_ode_check.cpp</option>
</select>
</td>
<td>ipopt_nlp_ode_run.hpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Driver for Running the Ipopt ODE Example</big></big></b></center>
<code><font color="blue"><pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"ode_problem.hpp"</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// BEGIN empty namespace -----------------------------------------</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span> <span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> cppad_ipopt<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">FG_info</span><span style="color: #990000">&gt;</span>
<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">ipopt_ode_case</span></span><span style="color: #990000">(</span>
     <span style="color: #009900">bool</span>  retape        <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> SizeVector<span style="color: #990000">&amp;</span> N <span style="color: #990000">,</span>
     NumberVector<span style="color: #990000">&amp;</span>     x <span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compute the partial sums of the number of grid points</span></span>
     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> N<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> Nz <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> N<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
     <span style="color: #008080">SizeVector</span> <span style="font-weight: bold"><span style="color: #000000">S</span></span><span style="color: #990000">(</span>Nz<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     S<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;=</span> Nz<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          S<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> S<span style="color: #990000">[</span>i<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> N<span style="color: #990000">[</span>i<span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// number of components of x corresponding to values for y</span></span>
     <span style="color: #008080">size_t</span> ny_inx <span style="color: #990000">=</span> <span style="color: #990000">(</span>S<span style="color: #990000">[</span>Nz<span style="color: #990000">]</span> <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> Ny<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// number of constraints (range dimension of g)</span></span>
     <span style="color: #008080">size_t</span> m      <span style="color: #990000">=</span> ny_inx<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// number of components in x (domain dimension for f and g)</span></span>
     <span style="color: #008080">size_t</span> n      <span style="color: #990000">=</span> ny_inx <span style="color: #990000">+</span> Na<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// the argument vector for the optimization is</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// y(t) at t[0] , ... , t[S[Nz]] , followed by a</span></span>
     <span style="color: #008080">NumberVector</span> <span style="font-weight: bold"><span style="color: #000000">x_i</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">x_l</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">x_u</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> ny_inx<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     x_i<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>       <span style="font-style: italic"><span style="color: #9A1900">// initial y(t) for optimization</span></span>
          x_l<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1.0e19</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// no lower limit</span></span>
          x_u<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">+</span><span style="color: #993399">1.0e19</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// no upper limit</span></span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> Na<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     x_i<span style="color: #990000">[</span>ny_inx <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">.</span><span style="color: #993399">5</span><span style="color: #990000">;</span>       <span style="font-style: italic"><span style="color: #9A1900">// initiali a for optimization</span></span>
          x_l<span style="color: #990000">[</span>ny_inx <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span>  <span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">.</span>e19<span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// no lower limit</span></span>
          x_u<span style="color: #990000">[</span>ny_inx <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span>  <span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">.</span>e19<span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// no upper</span></span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// all of the difference equations are constrained to the value zero</span></span>
     <span style="color: #008080">NumberVector</span> <span style="font-weight: bold"><span style="color: #000000">g_l</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">g_u</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     g_l<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
          g_u<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// object defining the objective f(x) and constraints g(x)</span></span>
     <span style="color: #008080">FG_info</span> <span style="font-weight: bold"><span style="color: #000000">fg_info</span></span><span style="color: #990000">(</span>retape<span style="color: #990000">,</span> N<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// create the CppAD Ipopt interface</span></span>
     <span style="color: #008080">cppad_ipopt_solution</span> solution<span style="color: #990000">;</span>
     Ipopt<span style="color: #990000">::</span><span style="color: #008080">SmartPtr&lt;Ipopt::TNLP&gt;</span> cppad_nlp <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">cppad_ipopt_nlp</span></span><span style="color: #990000">(</span>
          n<span style="color: #990000">,</span> m<span style="color: #990000">,</span> x_i<span style="color: #990000">,</span> x_l<span style="color: #990000">,</span> x_u<span style="color: #990000">,</span> g_l<span style="color: #990000">,</span> g_u<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>fg_info<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>solution
     <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Create an Ipopt application</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> Ipopt<span style="color: #990000">::</span>IpoptApplication<span style="color: #990000">;</span>
     Ipopt<span style="color: #990000">::</span><span style="color: #008080">SmartPtr&lt;IpoptApplication&gt;</span> app <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> <span style="font-weight: bold"><span style="color: #000000">IpoptApplication</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// turn off any printing</span></span>
     app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Options</span></span><span style="color: #990000">()-&gt;</span><span style="font-weight: bold"><span style="color: #000000">SetIntegerValue</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"print_level"</span><span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>
     app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Options</span></span><span style="color: #990000">()-&gt;</span><span style="font-weight: bold"><span style="color: #000000">SetStringValue</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"sb"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"yes"</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// maximum number of iterations</span></span>
     app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Options</span></span><span style="color: #990000">()-&gt;</span><span style="font-weight: bold"><span style="color: #000000">SetIntegerValue</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"max_iter"</span><span style="color: #990000">,</span> <span style="color: #993399">30</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// approximate accuracy in first order necessary conditions;</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// see Mathematical Programming, Volume 106, Number 1,</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Pages 25-57, Equation (6)</span></span>
     app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Options</span></span><span style="color: #990000">()-&gt;</span><span style="font-weight: bold"><span style="color: #000000">SetNumericValue</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"tol"</span><span style="color: #990000">,</span> <span style="color: #993399">1e-9</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Derivative testing is very slow for large problems</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// so comment this out if you use a large value for N[].</span></span>
     app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Options</span></span><span style="color: #990000">()-&gt;</span> <span style="font-weight: bold"><span style="color: #000000">SetStringValue</span></span><span style="color: #990000">(</span> <span style="color: #FF0000">"derivative_test"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"second-order"</span><span style="color: #990000">);</span>
     app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Options</span></span><span style="color: #990000">()-&gt;</span> <span style="font-weight: bold"><span style="color: #000000">SetNumericValue</span></span><span style="color: #990000">(</span> <span style="color: #FF0000">"point_perturbation_radius"</span><span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">.);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Initialize the application and process the options</span></span>
     Ipopt<span style="color: #990000">::</span><span style="color: #008080">ApplicationReturnStatus</span> status <span style="color: #990000">=</span> app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Initialize</span></span><span style="color: #990000">();</span>
     ok    <span style="color: #990000">&amp;=</span> status <span style="color: #990000">==</span> Ipopt<span style="color: #990000">::</span>Solve_Succeeded<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Run the application</span></span>
     status <span style="color: #990000">=</span> app<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">OptimizeTNLP</span></span><span style="color: #990000">(</span>cppad_nlp<span style="color: #990000">);</span>
     ok    <span style="color: #990000">&amp;=</span> status <span style="color: #990000">==</span> Ipopt<span style="color: #990000">::</span>Solve_Succeeded<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// return the solution</span></span>
     x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span> solution<span style="color: #990000">.</span>x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span> j<span style="color: #990000">++)</span>
          x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> solution<span style="color: #990000">.</span>x<span style="color: #990000">[</span>j<span style="color: #990000">];</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// END empty namespace ----------------------------------------------------</span></span></tt></pre>
</font></code>
<hr/>Input File: cppad_ipopt/example/ode_run.hpp

</body>
</html>
