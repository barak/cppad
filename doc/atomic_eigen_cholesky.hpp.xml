<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Atomic Eigen Cholesky Factorization Class</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Atomic Eigen Cholesky Factorization Class"/>
<meta name="keywords" id="keywords" content=" atomic eigen cholesky factorization class purpose start definition public types constructor op private variables forward reverse end "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_eigen_cholesky.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="cholesky_theory.xml" target="_top">Prev</a>
</td><td><a href="atomic_mat_mul.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_base</option>
<option>atomic_eigen_cholesky.cpp</option>
<option>atomic_eigen_cholesky.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>atomic-&gt;</option>
<option>checkpoint</option>
<option>atomic_base</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>atomic_base-&gt;</option>
<option>atomic_ctor</option>
<option>atomic_option</option>
<option>atomic_afun</option>
<option>atomic_forward</option>
<option>atomic_reverse</option>
<option>atomic_for_sparse_jac</option>
<option>atomic_rev_sparse_jac</option>
<option>atomic_for_sparse_hes</option>
<option>atomic_rev_sparse_hes</option>
<option>atomic_base_clear</option>
<option>atomic_get_started.cpp</option>
<option>atomic_norm_sq.cpp</option>
<option>atomic_reciprocal.cpp</option>
<option>atomic_set_sparsity.cpp</option>
<option>atomic_tangent.cpp</option>
<option>atomic_eigen_mat_mul.cpp</option>
<option>atomic_eigen_mat_inv.cpp</option>
<option>atomic_eigen_cholesky.cpp</option>
<option>atomic_mat_mul.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>atomic_eigen_cholesky.cpp-&gt;</option>
<option>cholesky_theory</option>
<option>atomic_eigen_cholesky.hpp</option>
</select>
</td>
<td>atomic_eigen_cholesky.hpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Start Class Definition</option>
<option>Public</option>
<option>---..Types</option>
<option>---..Constructor</option>
<option>---..op</option>
<option>Private</option>
<option>---..Variables</option>
<option>---..forward</option>
<option>---..reverse</option>
<option>End Class Definition</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Atomic Eigen Cholesky Factorization Class</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
Construct an atomic operation that computes a lower triangular matrix

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>L</mi>
</mrow></math>

 such that 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>L</mi>
<msup><mi mathvariant='italic'>L</mi>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>A</mi>
</mrow></math>


for any positive integer 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>p</mi>
</mrow></math>


and symmetric positive definite matrix 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>A</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>p</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>p</mi>
</mrow>
</msup>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="Start Class Definition" id="Start Class Definition">Start Class Definition</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;Eigen/Dense&gt;</span>

</tt></pre>
<b><big><a name="Public" id="Public">Public</a></big></b>


<br/>
<br/>
<b><a name="Public.Types" id="Public.Types">Types</a></b>

<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// BEGIN_EMPTY_NAMESPACE</span></span>

<span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Base</span><span style="color: #990000">&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">atomic_eigen_cholesky</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;</span> <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
     <span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// type of elements during calculation of derivatives</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="color: #008080">Base</span>              scalar<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// type of elements during taping</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;scalar&gt;</span> ad_scalar<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// type of matrix during calculation of derivatives</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> Eigen<span style="color: #990000">::</span>Matrix<span style="color: #990000">&lt;</span>
          scalar<span style="color: #990000">,</span> Eigen<span style="color: #990000">::</span>Dynamic<span style="color: #990000">,</span> Eigen<span style="color: #990000">::</span>Dynamic<span style="color: #990000">,</span> Eigen<span style="color: #990000">::</span>RowMajor<span style="color: #990000">&gt;</span>        matrix<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// type of matrix during taping</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> Eigen<span style="color: #990000">::</span>Matrix<span style="color: #990000">&lt;</span>
          ad_scalar<span style="color: #990000">,</span> Eigen<span style="color: #990000">::</span>Dynamic<span style="color: #990000">,</span> Eigen<span style="color: #990000">::</span>Dynamic<span style="color: #990000">,</span> Eigen<span style="color: #990000">::</span>RowMajor <span style="color: #990000">&gt;</span> ad_matrix<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// lower triangular scalar matrix</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> Eigen<span style="color: #990000">::</span><span style="color: #008080">TriangularView&lt;matrix, Eigen::Lower&gt;</span>             lower_view<span style="color: #990000">;</span></tt></pre>
<br/>
<b><a name="Public.Constructor" id="Public.Constructor">Constructor</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// constructor</span></span>
     <span style="font-weight: bold"><span style="color: #000000">atomic_eigen_cholesky</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span> <span style="color: #990000">:</span> CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;(</span>
          <span style="color: #FF0000">"atom_eigen_cholesky"</span>                             <span style="color: #990000">,</span>
          CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;::</span>set_sparsity_enum
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><a name="Public.op" id="Public.op">op</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// use atomic operation to invert an AD matrix</span></span>
     <span style="color: #008080">ad_matrix</span> <span style="font-weight: bold"><span style="color: #000000">op</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> ad_matrix<span style="color: #990000">&amp;</span> arg<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> nr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> arg<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">rows</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> ny <span style="color: #990000">=</span> <span style="color: #990000">(</span> <span style="color: #990000">(</span>nr <span style="color: #990000">+</span> <span style="color: #993399">1</span> <span style="color: #990000">)</span> <span style="color: #990000">*</span> nr <span style="color: #990000">)</span> <span style="color: #990000">/</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nx <span style="color: #990000">=</span> <span style="color: #993399">1</span> <span style="color: #990000">+</span> ny<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nr <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> arg<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">cols</span></span><span style="color: #990000">()</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// packed version of arg</span></span>
          <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>ad_scalar<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">packed_arg</span></span><span style="color: #990000">(</span>nx<span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> index <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          packed_arg<span style="color: #990000">[</span>index<span style="color: #990000">++]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">ad_scalar</span></span><span style="color: #990000">(</span> nr <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// lower triangle of symmetric matrix A</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;=</span> i<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    packed_arg<span style="color: #990000">[</span>index<span style="color: #990000">++]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">arg</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> j<span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> index <span style="color: #990000">==</span> nx <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// packed version of result = arg^{-1}.</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// This is an atomic_base function call that CppAD uses to</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// store the atomic operation on the tape.</span></span>
          <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>ad_scalar<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">packed_result</span></span><span style="color: #990000">(</span>ny<span style="color: #990000">);</span>
          <span style="color: #990000">(*</span><span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">)(</span>packed_arg<span style="color: #990000">,</span> packed_result<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// unpack result matrix L</span></span>
          <span style="color: #008080">ad_matrix</span> result <span style="color: #990000">=</span> ad_matrix<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Zero</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
          index <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;=</span> i<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> j<span style="color: #990000">)</span> <span style="color: #990000">=</span> packed_result<span style="color: #990000">[</span>index<span style="color: #990000">++];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> result<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Private" id="Private">Private</a></big></b>


<br/>
<br/>
<b><a name="Private.Variables" id="Private.Variables">Variables</a></b>

<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span>
     <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// one forward mode vector of matrices for argument and result</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;matrix&gt;</span> f_arg_<span style="color: #990000">,</span> f_result_<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// one reverse mode vector of matrices for argument and result</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;matrix&gt;</span> r_arg_<span style="color: #990000">,</span> r_result_<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------</span></span></tt></pre>
<br/>
<b><a name="Private.forward" id="Private.forward">forward</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// forward mode routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">forward</span></span><span style="color: #990000">(</span>
          <span style="font-style: italic"><span style="color: #9A1900">// lowest order Taylor coefficient we are evaluating</span></span>
          <span style="color: #008080">size_t</span>                          p <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// highest order Taylor coefficient we are evaluating</span></span>
          <span style="color: #008080">size_t</span>                          q <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// which components of x are variables</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>      vx <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// which components of y are variables</span></span>
          CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>            vy <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// tx [ j * (q+1) + k ] is x_j^k</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span>scalar<span style="color: #990000">&gt;&amp;</span>    tx <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// ty [ i * (q+1) + k ] is y_i^k</span></span>
          CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span>scalar<span style="color: #990000">&gt;&amp;</span>          ty
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> n_order <span style="color: #990000">=</span> q <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nr      <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span> <span style="color: #993399">0</span> <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> <span style="color: #993399">0</span> <span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> ny      <span style="color: #990000">=</span> <span style="color: #990000">((</span>nr <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> nr<span style="color: #990000">)</span> <span style="color: #990000">/</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> nx      <span style="color: #990000">=</span> <span style="color: #993399">1</span> <span style="color: #990000">+</span> ny<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> nx <span style="color: #990000">==</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> ny <span style="color: #990000">==</span> vy<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx <span style="color: #990000">*</span> n_order <span style="color: #990000">==</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> ny <span style="color: #990000">*</span> n_order <span style="color: #990000">==</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// make sure f_arg_ and f_result_ are large enough</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> f_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> f_result_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> f_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&lt;</span> n_order <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     f_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>n_order<span style="color: #990000">);</span>
               f_result_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>n_order<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     f_arg_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
                    f_result_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// unpack tx into f_arg_</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> index <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// unpack arg values for this order</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;=</span> i<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     f_arg_<span style="color: #990000">[</span>k<span style="color: #990000">](</span>i<span style="color: #990000">,</span> j<span style="color: #990000">)</span> <span style="color: #990000">=</span> tx<span style="color: #990000">[</span> index <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> k <span style="color: #990000">];</span>
                         f_arg_<span style="color: #990000">[</span>k<span style="color: #990000">](</span>j<span style="color: #990000">,</span> i<span style="color: #990000">)</span> <span style="color: #990000">=</span> f_arg_<span style="color: #990000">[</span>k<span style="color: #990000">](</span>i<span style="color: #990000">,</span> j<span style="color: #990000">);</span>
                         index<span style="color: #990000">++;</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// result for each order</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (we could avoid recalculting f_result_[k] for k=0,...,p-1)</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          Eigen<span style="color: #990000">::</span><span style="color: #008080">LLT&lt;matrix&gt;</span> <span style="font-weight: bold"><span style="color: #000000">cholesky</span></span><span style="color: #990000">(</span>f_arg_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
          f_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>   <span style="color: #990000">=</span> cholesky<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">matrixL</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">lower_view</span> L_0 <span style="color: #990000">=</span> f_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #0000FF">template</span></span> triangularView<span style="color: #990000">&lt;</span>Eigen<span style="color: #990000">::</span>Lower<span style="color: #990000">&gt;();</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// initialize sum as A_k</span></span>
               <span style="color: #008080">matrix</span> f_sum <span style="color: #990000">=</span> f_arg_<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
               <span style="font-style: italic"><span style="color: #9A1900">// compute A_k - B_k</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;</span> k<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                    f_sum <span style="color: #990000">-=</span> f_result_<span style="color: #990000">[</span>ell<span style="color: #990000">]</span> <span style="color: #990000">*</span> f_result_<span style="color: #990000">[</span>k<span style="color: #990000">-</span>ell<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">();</span>
               <span style="font-style: italic"><span style="color: #9A1900">// compute L_0^{-1} * (A_k - B_k) * L_0^{-T}</span></span>
               <span style="color: #008080">matrix</span> temp <span style="color: #990000">=</span> L_0<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">template</span></span> solve<span style="color: #990000">&lt;</span>Eigen<span style="color: #990000">::</span>OnTheLeft<span style="color: #990000">&gt;(</span>f_sum<span style="color: #990000">);</span>
               temp   <span style="color: #990000">=</span> L_0<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">().</span><span style="font-weight: bold"><span style="color: #0000FF">template</span></span> solve<span style="color: #990000">&lt;</span>Eigen<span style="color: #990000">::</span>OnTheRight<span style="color: #990000">&gt;(</span>temp<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// divide the diagonal by 2</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                    <span style="font-weight: bold"><span style="color: #000000">temp</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> i<span style="color: #990000">)</span> <span style="color: #990000">/=</span> <span style="font-weight: bold"><span style="color: #000000">scalar</span></span><span style="color: #990000">(</span><span style="color: #993399">2.0</span><span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// L_k = L_0 * low[ L_0^{-1} * (A_k - B_k) * L_0^{-T} ]</span></span>
               <span style="color: #008080">lower_view</span> view <span style="color: #990000">=</span> temp<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">template</span></span> triangularView<span style="color: #990000">&lt;</span>Eigen<span style="color: #990000">::</span>Lower<span style="color: #990000">&gt;();</span>
               f_result_<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> f_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> view<span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// pack result_ into ty</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> index <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;=</span> i<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     ty<span style="color: #990000">[</span> index <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> k <span style="color: #990000">]</span> <span style="color: #990000">=</span> f_result_<span style="color: #990000">[</span>k<span style="color: #990000">](</span>i<span style="color: #990000">,</span> j<span style="color: #990000">);</span>
                         index<span style="color: #990000">++;</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// check if we are computing vy</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// ------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// This is a very dumb algorithm that over estimates which</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// elements of the inverse are variables (which is not efficient).</span></span>
          <span style="color: #009900">bool</span> var <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> ny<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               var <span style="color: #990000">|=</span> vx<span style="color: #990000">[</span><span style="color: #993399">1</span> <span style="color: #990000">+</span> i<span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> ny<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               vy<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> var<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><a name="Private.reverse" id="Private.reverse">reverse</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// reverse mode routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">reverse</span></span><span style="color: #990000">(</span>
          <span style="font-style: italic"><span style="color: #9A1900">// highest order Taylor coefficient that we are computing derivative of</span></span>
          <span style="color: #008080">size_t</span>                     q <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// forward mode Taylor coefficients for x variables</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>     tx <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// forward mode Taylor coefficients for y variables</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>     ty <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// upon return, derivative of G[ F[ {x_j^k} ] ] w.r.t {x_j^k}</span></span>
          CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>           px <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// derivative of G[ {y_i^k} ] w.r.t. {y_i^k}</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>     py
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> n_order <span style="color: #990000">=</span> q <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span> <span style="color: #993399">0</span> <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> <span style="color: #993399">0</span> <span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> ny <span style="color: #990000">=</span> <span style="color: #990000">(</span> <span style="color: #990000">(</span>nr <span style="color: #990000">+</span> <span style="color: #993399">1</span> <span style="color: #990000">)</span> <span style="color: #990000">*</span> nr <span style="color: #990000">)</span> <span style="color: #990000">/</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nx <span style="color: #990000">=</span> <span style="color: #993399">1</span> <span style="color: #990000">+</span> ny<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx <span style="color: #990000">*</span> n_order <span style="color: #990000">==</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> ny <span style="color: #990000">*</span> n_order <span style="color: #990000">==</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> px<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>    <span style="color: #990000">==</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> py<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>    <span style="color: #990000">==</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// make sure f_arg_ is large enough</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> f_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> f_result_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// must have previous run forward with order &gt;= n_order</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> f_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> n_order <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// make sure r_arg_, r_result_ are large enough</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> r_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> r_result_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> r_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&lt;</span> n_order <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     r_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>n_order<span style="color: #990000">);</span>
               r_result_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>n_order<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     r_arg_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
                    r_result_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// unpack tx into f_arg_</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> index <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// unpack arg values for this order</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;=</span> i<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     f_arg_<span style="color: #990000">[</span>k<span style="color: #990000">](</span>i<span style="color: #990000">,</span> j<span style="color: #990000">)</span> <span style="color: #990000">=</span> tx<span style="color: #990000">[</span> index <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> k <span style="color: #990000">];</span>
                         f_arg_<span style="color: #990000">[</span>k<span style="color: #990000">](</span>j<span style="color: #990000">,</span> i<span style="color: #990000">)</span> <span style="color: #990000">=</span> f_arg_<span style="color: #990000">[</span>k<span style="color: #990000">](</span>i<span style="color: #990000">,</span> j<span style="color: #990000">);</span>
                         index<span style="color: #990000">++;</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// unpack py into r_result_</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     r_result_<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> matrix<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Zero</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
               <span style="color: #008080">size_t</span> index <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;=</span> i<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     r_result_<span style="color: #990000">[</span>k<span style="color: #990000">](</span>i<span style="color: #990000">,</span> j<span style="color: #990000">)</span> <span style="color: #990000">=</span> py<span style="color: #990000">[</span> index <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> k <span style="color: #990000">];</span>
                         index<span style="color: #990000">++;</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// initialize r_arg_ as zero</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               r_arg_<span style="color: #990000">[</span>k<span style="color: #990000">]</span>   <span style="color: #990000">=</span> matrix<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Zero</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// matrix reverse mode calculation</span></span>
          <span style="color: #008080">lower_view</span> L_0 <span style="color: #990000">=</span> f_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #0000FF">template</span></span> triangularView<span style="color: #990000">&lt;</span>Eigen<span style="color: #990000">::</span>Lower<span style="color: #990000">&gt;();</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k1 <span style="color: #990000">=</span> n_order<span style="color: #990000">;</span> k1 <span style="color: #990000">&gt;</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> k1<span style="color: #990000">--)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> k1 <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// L_0^T * bar{L}_k</span></span>
               <span style="color: #008080">matrix</span> tmp1 <span style="color: #990000">=</span> L_0<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">()</span> <span style="color: #990000">*</span> r_result_<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">//low[ L_0^T * bar{L}_k ]</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                    <span style="font-weight: bold"><span style="color: #000000">tmp1</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> i<span style="color: #990000">)</span> <span style="color: #990000">/=</span> <span style="font-weight: bold"><span style="color: #000000">scalar</span></span><span style="color: #990000">(</span><span style="color: #993399">2.0</span><span style="color: #990000">);</span>
               <span style="color: #008080">matrix</span> tmp2 <span style="color: #990000">=</span> tmp1<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">template</span></span> triangularView<span style="color: #990000">&lt;</span>Eigen<span style="color: #990000">::</span>Lower<span style="color: #990000">&gt;();</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// L_0^{-T} low[ L_0^T * bar{L}_k ]</span></span>
               tmp1 <span style="color: #990000">=</span> L_0<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">().</span><span style="font-weight: bold"><span style="color: #0000FF">template</span></span> solve<span style="color: #990000">&lt;</span>Eigen<span style="color: #990000">::</span>OnTheLeft<span style="color: #990000">&gt;(</span> tmp2 <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// M_k = L_0^{-T} * low[ L_0^T * bar{L}_k ]^{T} L_0^{-1}</span></span>
               <span style="color: #008080">matrix</span> M_k <span style="color: #990000">=</span> L_0<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">().</span><span style="font-weight: bold"><span style="color: #0000FF">template</span></span>
                    solve<span style="color: #990000">&lt;</span>Eigen<span style="color: #990000">::</span>OnTheLeft<span style="color: #990000">&gt;(</span> tmp1<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// remove L_k and compute bar{B}_k</span></span>
               <span style="color: #008080">matrix</span> barB_k <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">scalar</span></span><span style="color: #990000">(</span><span style="color: #993399">0.5</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> <span style="color: #990000">(</span> M_k <span style="color: #990000">+</span> M_k<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
               r_arg_<span style="color: #990000">[</span>k<span style="color: #990000">]</span>    <span style="color: #990000">+=</span> barB_k<span style="color: #990000">;</span>
               barB_k        <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">scalar</span></span><span style="color: #990000">(-</span><span style="color: #993399">1.0</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> barB_k<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// 2.0 * lower( bar{B}_k L_k )</span></span>
               <span style="color: #008080">matrix</span> temp <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">scalar</span></span><span style="color: #990000">(</span><span style="color: #993399">2.0</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> barB_k <span style="color: #990000">*</span> f_result_<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
               temp        <span style="color: #990000">=</span> temp<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">template</span></span> triangularView<span style="color: #990000">&lt;</span>Eigen<span style="color: #990000">::</span>Lower<span style="color: #990000">&gt;();</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// remove C_k</span></span>
               r_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+=</span> temp<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// remove B_k</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;</span> k<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// bar{L}_ell = 2 * lower( \bar{B}_k * L_{k-ell} )</span></span>
                    temp <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">scalar</span></span><span style="color: #990000">(</span><span style="color: #993399">2.0</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> barB_k <span style="color: #990000">*</span> f_result_<span style="color: #990000">[</span>k<span style="color: #990000">-</span>ell<span style="color: #990000">];</span>
                    r_result_<span style="color: #990000">[</span>ell<span style="color: #990000">]</span> <span style="color: #990000">+=</span> temp<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">template</span></span> triangularView<span style="color: #990000">&lt;</span>Eigen<span style="color: #990000">::</span>Lower<span style="color: #990000">&gt;();</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// M_0 = L_0^{-T} * low[ L_0^T * bar{L}_0 ]^{T} L_0^{-1}</span></span>
          <span style="color: #008080">matrix</span> M_0 <span style="color: #990000">=</span> L_0<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">()</span> <span style="color: #990000">*</span> r_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="font-weight: bold"><span style="color: #000000">M_0</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> i<span style="color: #990000">)</span> <span style="color: #990000">/=</span> <span style="font-weight: bold"><span style="color: #000000">scalar</span></span><span style="color: #990000">(</span><span style="color: #993399">2.0</span><span style="color: #990000">);</span>
          M_0 <span style="color: #990000">=</span> M_0<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">template</span></span> triangularView<span style="color: #990000">&lt;</span>Eigen<span style="color: #990000">::</span>Lower<span style="color: #990000">&gt;();</span>
          M_0 <span style="color: #990000">=</span> L_0<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #0000FF">template</span></span> solve<span style="color: #990000">&lt;</span>Eigen<span style="color: #990000">::</span>OnTheRight<span style="color: #990000">&gt;(</span> M_0 <span style="color: #990000">);</span>
          M_0 <span style="color: #990000">=</span> L_0<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">().</span><span style="font-weight: bold"><span style="color: #0000FF">template</span></span> solve<span style="color: #990000">&lt;</span>Eigen<span style="color: #990000">::</span>OnTheLeft<span style="color: #990000">&gt;(</span> M_0 <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// remove L_0</span></span>
          r_arg_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+=</span> <span style="font-weight: bold"><span style="color: #000000">scalar</span></span><span style="color: #990000">(</span><span style="color: #993399">0.5</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> <span style="color: #990000">(</span> M_0 <span style="color: #990000">+</span> M_0<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// pack r_arg into px</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// note that only the lower triangle of barA_k is stored in px</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> index <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
               px<span style="color: #990000">[</span> index <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> k <span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
               index<span style="color: #990000">++;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> nr<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> i<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     px<span style="color: #990000">[</span> index <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> k <span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> r_arg_<span style="color: #990000">[</span>k<span style="color: #990000">](</span>i<span style="color: #990000">,</span> j<span style="color: #990000">);</span>
                         index<span style="color: #990000">++;</span>
                    <span style="color: #FF0000">}</span>
                    px<span style="color: #990000">[</span> index <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> k<span style="color: #990000">]</span> <span style="color: #990000">=</span> r_arg_<span style="color: #990000">[</span>k<span style="color: #990000">](</span>i<span style="color: #990000">,</span> i<span style="color: #990000">);</span>
                    index<span style="color: #990000">++;</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="End Class Definition" id="End Class Definition">End Class Definition</a></big></b>

<pre style='display:inline'><tt>
<span style="color: #FF0000">}</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// End of atomic_eigen_cholesky class</span></span>

<span style="color: #FF0000">}</span>  <span style="font-style: italic"><span style="color: #9A1900">// END_EMPTY_NAMESPACE</span></span>
</tt></pre>

<hr/>Input File: cppad/example/eigen_cholesky.hpp

</body>
</html>
