<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Adolc Speed: Ode</title>
<meta name="description" id="description" content="Adolc Speed: Ode"/>
<meta name="keywords" id="keywords" content=" link_ode adolc speed ode "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_adolc_ode.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="adolc_mat_mul.cpp.xml" target="_top">Prev</a>
</td><td><a href="adolc_poly.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_adolc</option>
<option>adolc_ode.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>library</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_adolc-&gt;</option>
<option>adolc_det_minor.cpp</option>
<option>adolc_det_lu.cpp</option>
<option>adolc_mat_mul.cpp</option>
<option>adolc_ode.cpp</option>
<option>adolc_poly.cpp</option>
<option>adolc_sparse_hessian.cpp</option>
<option>adolc_sparse_jacobian.cpp</option>
<option>adolc_alloc_mat</option>
</select>
</td>
<td>adolc_ode.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Specifications</option>
<option>Implementation</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>Adolc Speed: Ode</big></big></b></center>
<br/>
<b><big><a name="Specifications" id="Specifications">Specifications</a></big></b>
<br/>
See <a href="link_ode.xml" target="_top"><span style='white-space: nowrap'>link_ode</span></a>
.

<br/>
<br/>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>


<code><font color='blue'><pre style='display:inline'> 
# include &lt;adolc/adolc.h&gt;

# include &lt;cppad/vector.hpp&gt;
# include &lt;cppad/speed/ode_evaluate.hpp&gt;
# include &lt;cppad/speed/uniform_01.hpp&gt;

// list of possible options
extern bool global_memory, global_onetape, global_atomic, global_optimize;
extern bool global_boolsparsity;

bool link_ode(
	size_t                     size       ,
	size_t                     repeat     ,
	CppAD::vector&lt;double&gt;      &amp;x         ,
	CppAD::vector&lt;double&gt;      &amp;jac
)
{
	// speed test global option values
	if( global_atomic || global_boolsparsity )
		return false;
	if( global_memory || global_optimize )
		return false;
	// -------------------------------------------------------------
	// setup
	assert( x.size() == size );
	assert( jac.size() == size * size );

	typedef CppAD::vector&lt;adouble&gt; ADVector;
	typedef CppAD::vector&lt;double&gt;  DblVector;

	size_t i, j;
	int tag    = 0;       // tape identifier
	int keep   = 0;       // do not keep forward mode results
	size_t p   = 0;       // use ode to calculate function values
	size_t n   = size;    // number of independent variables
	size_t m   = n;       // number of dependent variables
	ADVector  X(n), Y(m); // independent and dependent variables
	DblVector f(m);       // function value

	// set up for thread_alloc memory allocator (fast and checks for leaks)
	using CppAD::thread_alloc; // the allocator
	size_t size_min;           // requested number of elements
	size_t size_out;           // capacity of an allocation

	// raw memory for use with adolc
	size_min = n;
	double *x_raw   = thread_alloc::create_array&lt;double&gt;(size_min, size_out);
	size_min = m * n;
	double *jac_raw = thread_alloc::create_array&lt;double&gt;(size_min, size_out);
	size_min = m;
	double **jac_ptr = thread_alloc::create_array&lt;double*&gt;(size_min, size_out);
	for(i = 0; i &lt; m; i++)
		jac_ptr[i] = jac_raw + i * n;

	// -------------------------------------------------------------
	if( ! global_onetape ) while(repeat--)
	{ 	// choose next x value
		uniform_01(n, x);

		// declare independent variables
		trace_on(tag, keep);
		for(j = 0; j &lt; n; j++)
			X[j] &lt;&lt;= x[j];

		// evaluate function
		CppAD::ode_evaluate(X, p, Y);

		// create function object f : X -&gt; Y
		for(i = 0; i &lt; m; i++)
			Y[i] &gt;&gt;= f[i];
		trace_off();

		// evaluate the Jacobian
		for(j = 0; j &lt; n; j++)
			x_raw[j] = x[j];
		jacobian(tag, m, n, x_raw, jac_ptr);
	}
	else
	{ 	// choose next x value
		uniform_01(n, x);

		// declare independent variables
		trace_on(tag, keep);
		for(j = 0; j &lt; n; j++)
			X[j] &lt;&lt;= x[j];

		// evaluate function
		CppAD::ode_evaluate(X, p, Y);

		// create function object f : X -&gt; Y
		for(i = 0; i &lt; m; i++)
			Y[i] &gt;&gt;= f[i];
		trace_off();

		while(repeat--)
		{	// get next argument value
			uniform_01(n, x);
			for(j = 0; j &lt; n; j++)
				x_raw[j] = x[j];

			// evaluate jacobian
			jacobian(tag, m, n, x_raw, jac_ptr);
		}
	}
	// convert return value to a simple vector
	for(i = 0; i &lt; m; i++)
	{	for(j = 0; j &lt; n; j++)
			jac[i * n + j] = jac_ptr[i][j];
	}
	// ----------------------------------------------------------------------
	// tear down
	thread_alloc::delete_array(x_raw);
	thread_alloc::delete_array(jac_raw);
	thread_alloc::delete_array(jac_ptr);

	return true;
}
</pre></font></code>


<hr/>Input File: speed/adolc/ode.cpp

</body>
</html>
