<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Example and Test Linking CppAD to Languages Other than C++</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Example and Test Linking CppAD to Languages Other than C++"/>
<meta name="keywords" id="keywords" content=" example test linking cppad to languages other than c++ C Ad algorithmic differentiation automatic link "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ad_in_c.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="ad_fun.cpp.xml" target="_top">Prev</a>
</td><td><a href="conj_grad.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>ad_in_c.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Example-&gt;</option>
<option>get_started.cpp</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>testvector</option>
<option>wno_conversion</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>General-&gt;</option>
<option>ad_fun.cpp</option>
<option>ad_in_c.cpp</option>
<option>conj_grad.cpp</option>
<option>cppad_eigen.hpp</option>
<option>hes_minor_det.cpp</option>
<option>hes_lu_det.cpp</option>
<option>interface2c.cpp</option>
<option>jac_minor_det.cpp</option>
<option>jac_lu_det.cpp</option>
<option>mul_level</option>
<option>ode_stiff.cpp</option>
<option>mul_level_ode.cpp</option>
<option>mul_level_adolc_ode.cpp</option>
<option>ode_taylor.cpp</option>
<option>stack_machine.cpp</option>
</select>
</td>
<td>ad_in_c.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Example and Test Linking CppAD to Languages Other than C++</big></big></b></center>
<code><font color="blue"><pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cstdio&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;list&gt;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// Begin empty namespace *****************************************</span></span>

<span style="font-style: italic"><span style="color: #9A1900">/*</span></span>
<span style="font-style: italic"><span style="color: #9A1900">void debug_print(const char *label, double d)</span></span>
<span style="font-style: italic"><span style="color: #9A1900">{     using std::printf;</span></span>

<span style="font-style: italic"><span style="color: #9A1900">     unsigned char *byte = reinterpret_cast&lt;unsigned char *&gt;(&amp;d);</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     size_t n_byte = sizeof(d);</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     printf("%s", label);</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     for(size_t i = 0; i &lt; n_byte; i++)</span></span>
<span style="font-style: italic"><span style="color: #9A1900">          printf("%x", byte[i]);</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     printf("\n");</span></span>
<span style="font-style: italic"><span style="color: #9A1900">}</span></span>
<span style="font-style: italic"><span style="color: #9A1900">*/</span></span>

<span style="font-style: italic"><span style="color: #9A1900">// type in C corresponding to an AD&lt;double&gt; object</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #FF0000">{</span> <span style="color: #009900">void</span><span style="color: #990000">*</span>  p_void<span style="color: #990000">;</span> <span style="color: #FF0000">}</span> cad<span style="color: #990000">;</span>

<span style="font-style: italic"><span style="color: #9A1900">// type in C corresponding to a an ADFun&lt;double&gt;</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #FF0000">{</span> <span style="color: #009900">void</span><span style="color: #990000">*</span> p_void<span style="color: #990000">;</span> <span style="color: #FF0000">}</span> cad_fun<span style="color: #990000">;</span>

<span style="font-style: italic"><span style="color: #9A1900">// type in C corresponding to a C AD binary operator</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">enum</span></span> <span style="color: #FF0000">{</span> op_add<span style="color: #990000">,</span> op_sub<span style="color: #990000">,</span> op_mul<span style="color: #990000">,</span> op_div <span style="color: #FF0000">}</span> cad_binary_op<span style="color: #990000">;</span>

<span style="font-style: italic"><span style="color: #9A1900">// type in C corresponding to a C AD unary operator</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">enum</span></span> <span style="color: #FF0000">{</span>
     op_abs<span style="color: #990000">,</span> op_acos<span style="color: #990000">,</span> op_asin<span style="color: #990000">,</span> op_atan<span style="color: #990000">,</span> op_cos<span style="color: #990000">,</span> op_cosh<span style="color: #990000">,</span>
     op_exp<span style="color: #990000">,</span> op_log<span style="color: #990000">,</span>  op_sin<span style="color: #990000">,</span>  op_sinh<span style="color: #990000">,</span> op_sqrt
<span style="color: #FF0000">}</span> cad_unary_op<span style="color: #990000">;</span>

<span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------------</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// helper code not intended for use by C code  ------------------------------</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>ADFun<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>

<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">cad2vector</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> n<span style="color: #990000">,</span> cad<span style="color: #990000">*</span> p_cad<span style="color: #990000">,</span> vector<span style="color: #990000">&lt;</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span> v<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> v<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> p_ad <span style="color: #990000">=</span>
               <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> <span style="color: #990000">&gt;</span> <span style="color: #990000">(</span>p_cad<span style="color: #990000">[</span>j<span style="color: #990000">].</span>p_void<span style="color: #990000">);</span>
          v<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">*</span>p_ad<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">vector2cad</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> n<span style="color: #990000">,</span> vector<span style="color: #990000">&lt;</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span> v<span style="color: #990000">,</span> cad<span style="color: #990000">*</span> p_cad<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> v<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> p_ad <span style="color: #990000">=</span>
               <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> <span style="color: #990000">&gt;</span> <span style="color: #990000">(</span>p_cad<span style="color: #990000">[</span>j<span style="color: #990000">].</span>p_void<span style="color: #990000">);</span>
          <span style="color: #990000">*</span>p_ad <span style="color: #990000">=</span> v<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">double2vector</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> n<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">*</span> p_dbl<span style="color: #990000">,</span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> v<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> v<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          v<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> p_dbl<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">vector2double</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> n<span style="color: #990000">,</span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> v<span style="color: #990000">,</span> <span style="color: #009900">double</span> <span style="color: #990000">*</span>p_dbl<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> v<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          p_dbl<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> v<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
<span style="color: #FF0000">}</span>

std<span style="color: #990000">::</span><span style="color: #008080">list&lt;void*&gt;</span> allocated<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># ifdef</span></span> NDEBUG
<span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">push_allocated</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span> <span style="color: #990000">*</span>p<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>
<span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">pop_allocated</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span> <span style="color: #990000">*</span>p<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>
<span style="font-weight: bold"><span style="color: #000080"># else</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">push_allocated</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span> <span style="color: #990000">*</span>p<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> p <span style="color: #990000">!=</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
     allocated<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_front</span></span><span style="color: #990000">(</span>p<span style="color: #990000">);</span>
<span style="color: #FF0000">}</span>
<span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">pop_allocated</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span> <span style="color: #990000">*</span>p<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span>list<span style="color: #990000">&lt;</span><span style="color: #009900">void</span><span style="color: #990000">*&gt;::</span><span style="color: #008080">iterator</span> i<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> allocated<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">begin</span></span><span style="color: #990000">();</span> i <span style="color: #990000">!=</span> allocated<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">end</span></span><span style="color: #990000">();</span> <span style="color: #990000">++</span>i<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>i <span style="color: #990000">==</span> p <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     allocated<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">erase</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
<span style="color: #FF0000">}</span>

<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------------</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// Here is the code that links C to CppAD. You will have to add more</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// functions and operators to make a complete language link.</span></span>
<span style="font-style: italic"><span style="color: #9A1900">//</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #FF0000">"C"</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span> x<span style="color: #990000">,</span> <span style="color: #009900">double</span> y<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">double</span> eps <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> y<span style="color: #990000">,</span> eps<span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">.);</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">// create a C++ AD object</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// value is the value that the C++ AD object will have</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// p_cad-&gt;p_void: on input is 0, on output points to C++ AD object</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #FF0000">"C"</span>
<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">cad_new_ad</span></span><span style="color: #990000">(</span><span style="color: #008080">cad</span> <span style="color: #990000">*</span>p_cad<span style="color: #990000">,</span> <span style="color: #009900">double</span> value<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// make sure pointer is not currently allocated</span></span>
     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> p_cad<span style="color: #990000">-&gt;</span>p_void <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>

     AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> p_ad   <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span>value<span style="color: #990000">);</span>
     p_cad<span style="color: #990000">-&gt;</span>p_void      <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">void</span><span style="color: #990000">*&gt;(</span>p_ad<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// put in list of allocate pointers</span></span>
     <span style="font-weight: bold"><span style="color: #000000">push_allocated</span></span><span style="color: #990000">(</span> p_cad<span style="color: #990000">-&gt;</span>p_void <span style="color: #990000">);</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">// delete a C++ AD object</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// p_cad-&gt;value: not used</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// p_cad-&gt;p_void: on input points to C++ AD object, on output is 0</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #FF0000">"C"</span>
<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">cad_del_ad</span></span><span style="color: #990000">(</span>cad<span style="color: #990000">*</span> p_cad<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// make sure that p_cad has been allocated</span></span>
     <span style="font-weight: bold"><span style="color: #000000">pop_allocated</span></span><span style="color: #990000">(</span> p_cad<span style="color: #990000">-&gt;</span>p_void <span style="color: #990000">);</span>

     AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> p_ad   <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> <span style="color: #990000">&gt;(</span> p_cad<span style="color: #990000">-&gt;</span>p_void <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">delete</span></span> p_ad<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// special value for pointers that are not allocated</span></span>
     p_cad<span style="color: #990000">-&gt;</span>p_void <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">// extract the value from a C++ AD object</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// extern "C"</span></span>
<span style="color: #009900">double</span> <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>cad<span style="color: #990000">*</span> p_cad<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> p_ad <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> <span style="color: #990000">&gt;</span> <span style="color: #990000">(</span>p_cad<span style="color: #990000">-&gt;</span>p_void<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #000000">Value</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">Var2Par</span></span><span style="color: #990000">(*</span>p_ad<span style="color: #990000">)</span> <span style="color: #990000">);</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">// preform a C AD unary operation</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #FF0000">"C"</span>
<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">cad_unary</span></span><span style="color: #990000">(</span><span style="color: #008080">cad_unary_op</span> op<span style="color: #990000">,</span> cad<span style="color: #990000">*</span> p_operand<span style="color: #990000">,</span> cad<span style="color: #990000">*</span> p_result<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #008080">AD&lt;double&gt;</span> <span style="color: #990000">*</span>operand<span style="color: #990000">,</span> <span style="color: #990000">*</span>result<span style="color: #990000">;</span>
     result  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> <span style="color: #990000">&gt;</span> <span style="color: #990000">(</span>p_result<span style="color: #990000">-&gt;</span>p_void<span style="color: #990000">);</span>
     operand <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> <span style="color: #990000">&gt;</span> <span style="color: #990000">(</span>p_operand<span style="color: #990000">-&gt;</span>p_void<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">switch</span></span><span style="color: #990000">(</span>op<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_abs<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>operand <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_acos<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">acos</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>operand <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_asin<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">asin</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>operand <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_atan<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">atan</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>operand <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_cos<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">cos</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>operand <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_cosh<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">cosh</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>operand <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_exp<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">exp</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>operand <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_log<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>operand <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_sin<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">sin</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>operand <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_sinh<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">sinh</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>operand <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_sqrt<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">sqrt</span></span><span style="color: #990000">(</span> <span style="color: #990000">*</span>operand <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #008080">          default:</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// not a unary operator</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">// perform a C AD binary operation</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #FF0000">"C"</span>
<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">cad_binary</span></span><span style="color: #990000">(</span><span style="color: #008080">cad_binary_op</span> op<span style="color: #990000">,</span> cad<span style="color: #990000">*</span> p_left<span style="color: #990000">,</span> cad<span style="color: #990000">*</span> p_right<span style="color: #990000">,</span> cad<span style="color: #990000">*</span> p_result<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #008080">AD&lt;double&gt;</span> <span style="color: #990000">*</span>result<span style="color: #990000">,</span> <span style="color: #990000">*</span>left<span style="color: #990000">,</span> <span style="color: #990000">*</span>right<span style="color: #990000">;</span>
     result <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> <span style="color: #990000">&gt;</span> <span style="color: #990000">(</span>p_result<span style="color: #990000">-&gt;</span>p_void<span style="color: #990000">);</span>
     left   <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> <span style="color: #990000">&gt;</span> <span style="color: #990000">(</span>p_left<span style="color: #990000">-&gt;</span>p_void<span style="color: #990000">);</span>
     right  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> <span style="color: #990000">&gt;</span> <span style="color: #990000">(</span>p_right<span style="color: #990000">-&gt;</span>p_void<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> result <span style="color: #990000">!=</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> left <span style="color: #990000">!=</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> right <span style="color: #990000">!=</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">switch</span></span><span style="color: #990000">(</span>op<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_add<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result         <span style="color: #990000">=</span> <span style="color: #990000">*</span>left <span style="color: #990000">+</span> <span style="color: #990000">(*</span>right<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_sub<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result         <span style="color: #990000">=</span> <span style="color: #990000">*</span>left <span style="color: #990000">-</span> <span style="color: #990000">(*</span>right<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_mul<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result         <span style="color: #990000">=</span> <span style="color: #990000">*</span>left <span style="color: #990000">*</span> <span style="color: #990000">(*</span>right<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> op_div<span style="color: #990000">:</span>
          <span style="color: #990000">*</span>result         <span style="color: #990000">=</span> <span style="color: #990000">*</span>left <span style="color: #990000">/</span> <span style="color: #990000">(*</span>right<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #008080">          default:</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// not a binary operator</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">// declare the independent variables in C++</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #FF0000">"C"</span>
<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">cad_independent</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> n<span style="color: #990000">,</span> cad<span style="color: #990000">*</span> px_cad<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">cad2vector</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> px_cad<span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">vector2cad</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> x<span style="color: #990000">,</span> px_cad<span style="color: #990000">);</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">// create an ADFun object in C++</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #FF0000">"C"</span>
<span style="color: #008080">cad_fun</span> <span style="font-weight: bold"><span style="color: #000000">cad_new_fun</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> n<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> m<span style="color: #990000">,</span> cad<span style="color: #990000">*</span> px_cad<span style="color: #990000">,</span> cad<span style="color: #990000">*</span> py_cad<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #008080">cad_fun</span> fun<span style="color: #990000">;</span>

     ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> p_adfun <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">new</span></span> ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;;</span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">cad2vector</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> px_cad<span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">cad2vector</span></span><span style="color: #990000">(</span>m<span style="color: #990000">,</span> py_cad<span style="color: #990000">,</span> y<span style="color: #990000">);</span>
     p_adfun<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> y<span style="color: #990000">);</span>

     fun<span style="color: #990000">.</span>p_void <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">void</span><span style="color: #990000">*&gt;(</span> p_adfun <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// put in list of allocate pointers</span></span>
     <span style="font-weight: bold"><span style="color: #000000">push_allocated</span></span><span style="color: #990000">(</span> fun<span style="color: #990000">.</span>p_void <span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> fun<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">// delete an AD function object in C</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #FF0000">"C"</span>
<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">cad_del_fun</span></span><span style="color: #990000">(</span><span style="color: #008080">cad_fun</span> <span style="color: #990000">*</span>fun<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// make sure this pointer has been allocated</span></span>
     <span style="font-weight: bold"><span style="color: #000000">pop_allocated</span></span><span style="color: #990000">(</span> fun<span style="color: #990000">-&gt;</span>p_void <span style="color: #990000">);</span>

     ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> p_adfun
          <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span> ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> <span style="color: #990000">&gt;</span> <span style="color: #990000">(</span>fun<span style="color: #990000">-&gt;</span>p_void<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">delete</span></span> p_adfun<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// special value for pointers that are not allocated</span></span>
     fun<span style="color: #990000">-&gt;</span>p_void <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">// evaluate the Jacobian corresponding to a function object</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #FF0000">"C"</span>
<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">cad_jacobian</span></span><span style="color: #990000">(</span><span style="color: #008080">cad_fun</span> fun<span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span> n<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> m<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">*</span> px<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">*</span> pjac <span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> fun<span style="color: #990000">.</span>p_void <span style="color: #990000">!=</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>

     ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> p_adfun <span style="color: #990000">=</span>
          <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span> ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> <span style="color: #990000">&gt;(</span>fun<span style="color: #990000">.</span>p_void<span style="color: #990000">);</span>
     <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">jac</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> m<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #000000">double2vector</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> px<span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     jac <span style="color: #990000">=</span> p_adfun<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Jacobian</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">vector2double</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> m<span style="color: #990000">,</span> jac<span style="color: #990000">,</span> pjac<span style="color: #990000">);</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">// forward mode</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #FF0000">"C"</span>
<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">cad_forward</span></span><span style="color: #990000">(</span><span style="color: #008080">cad_fun</span> fun<span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span> order<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> n<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> m<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">*</span> px<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">*</span> py <span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> fun<span style="color: #990000">.</span>p_void <span style="color: #990000">!=</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>

     ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> p_adfun <span style="color: #990000">=</span>
          <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span> ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;*</span> <span style="color: #990000">&gt;(</span>fun<span style="color: #990000">.</span>p_void<span style="color: #990000">);</span>
     <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #000000">double2vector</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> px<span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     y <span style="color: #990000">=</span> p_adfun<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span>order<span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">vector2double</span></span><span style="color: #990000">(</span>m<span style="color: #990000">,</span> y<span style="color: #990000">,</span> py<span style="color: #990000">);</span>
<span style="color: #FF0000">}</span>

<span style="font-style: italic"><span style="color: #9A1900">// check that allocated list has been completely freed</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> <span style="color: #FF0000">"C"</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">cad_allocated_empty</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> allocated<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">empty</span></span><span style="color: #990000">();</span>
<span style="color: #FF0000">}</span>

<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// End empty namespace ****************************************************</span></span>

<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;math.h&gt;</span> <span style="font-style: italic"><span style="color: #9A1900">// used to check results in c code below</span></span>

<span style="font-weight: bold"><span style="color: #000080"># define</span></span> N <span style="color: #993399">2</span>       <span style="font-style: italic"><span style="color: #9A1900">// number of independent variables in example</span></span>
<span style="font-weight: bold"><span style="color: #000080"># define</span></span> M <span style="color: #993399">5</span>       <span style="font-style: italic"><span style="color: #9A1900">// number of dependent variables in example</span></span>

<span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------------</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// Here is the C code that uses the CppAD link above</span></span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">ad_in_c</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// This routine is intentionally coded as if it were written in C</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// as an example of how you can link C, and other languages to CppAD</span></span>
     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// x vector of AD objects in C</span></span>
     <span style="color: #009900">double</span> value<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> j<span style="color: #990000">,</span> n <span style="color: #990000">=</span> N<span style="color: #990000">;</span>
     <span style="color: #008080">cad</span> X<span style="color: #990000">[</span>N<span style="color: #990000">];</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     value       <span style="color: #990000">=</span> <span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="color: #990000">(</span>j<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">/</span> <span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> n<span style="color: #990000">;</span>
          X<span style="color: #990000">[</span>j<span style="color: #990000">].</span>p_void <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">cad_new_ad</span></span><span style="color: #990000">(</span>X <span style="color: #990000">+</span> j<span style="color: #990000">,</span> value<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// y vector of AD objects in C</span></span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> m <span style="color: #990000">=</span> M<span style="color: #990000">;</span>
     <span style="color: #008080">cad</span> Y<span style="color: #990000">[</span>M<span style="color: #990000">];</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     value       <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span> <span style="font-style: italic"><span style="color: #9A1900">// required, but not used</span></span>
          Y<span style="color: #990000">[</span>i<span style="color: #990000">].</span>p_void <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">cad_new_ad</span></span><span style="color: #990000">(</span>Y <span style="color: #990000">+</span> i<span style="color: #990000">,</span> value<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare X as the independent variable vector</span></span>
     <span style="font-weight: bold"><span style="color: #000000">cad_independent</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> X<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// y[0] = x[0] + x[1]</span></span>
     <span style="font-weight: bold"><span style="color: #000000">cad_binary</span></span><span style="color: #990000">(</span>op_add<span style="color: #990000">,</span> X<span style="color: #990000">+</span><span style="color: #993399">0</span><span style="color: #990000">,</span> X<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">,</span> Y<span style="color: #990000">+</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>Y<span style="color: #990000">+</span><span style="color: #993399">0</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>X<span style="color: #990000">+</span><span style="color: #993399">0</span><span style="color: #990000">)+</span><span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>X<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// y[1] = x[0] - x[1]</span></span>
     <span style="font-weight: bold"><span style="color: #000000">cad_binary</span></span><span style="color: #990000">(</span>op_sub<span style="color: #990000">,</span> X<span style="color: #990000">+</span><span style="color: #993399">0</span><span style="color: #990000">,</span> X<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">,</span> Y<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>Y<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>X<span style="color: #990000">+</span><span style="color: #993399">0</span><span style="color: #990000">)-</span><span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>X<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// y[2] = x[0] * x[1]</span></span>
     <span style="font-weight: bold"><span style="color: #000000">cad_binary</span></span><span style="color: #990000">(</span>op_mul<span style="color: #990000">,</span> X<span style="color: #990000">+</span><span style="color: #993399">0</span><span style="color: #990000">,</span> X<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">,</span> Y<span style="color: #990000">+</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>Y<span style="color: #990000">+</span><span style="color: #993399">2</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>X<span style="color: #990000">+</span><span style="color: #993399">0</span><span style="color: #990000">)*</span><span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>X<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// y[3] = x[0] * x[1]</span></span>
     <span style="font-weight: bold"><span style="color: #000000">cad_binary</span></span><span style="color: #990000">(</span>op_div<span style="color: #990000">,</span> X<span style="color: #990000">+</span><span style="color: #993399">0</span><span style="color: #990000">,</span> X<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">,</span> Y<span style="color: #990000">+</span><span style="color: #993399">3</span><span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>Y<span style="color: #990000">+</span><span style="color: #993399">3</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>X<span style="color: #990000">+</span><span style="color: #993399">0</span><span style="color: #990000">)/</span><span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>X<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// y[4] = sin(x[0]) + asin(sin(x[0]))</span></span>
     <span style="color: #008080">cad</span> sin_x0 <span style="color: #990000">=</span> <span style="color: #FF0000">{</span> <span style="color: #993399">0</span> <span style="color: #FF0000">}</span><span style="color: #990000">;</span>       <span style="font-style: italic"><span style="color: #9A1900">// initialize p_void as zero</span></span>
     <span style="font-weight: bold"><span style="color: #000000">cad_new_ad</span></span><span style="color: #990000">(</span> <span style="color: #990000">&amp;</span>sin_x0<span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">.);</span>
     <span style="font-weight: bold"><span style="color: #000000">cad_unary</span></span><span style="color: #990000">(</span>op_sin<span style="color: #990000">,</span> X<span style="color: #990000">+</span><span style="color: #993399">0</span><span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>sin_x0<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(&amp;</span>sin_x0<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">sin</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>X<span style="color: #990000">+</span><span style="color: #993399">0</span><span style="color: #990000">))</span> <span style="color: #990000">);</span>

     <span style="color: #008080">cad</span> asin_sin_x0 <span style="color: #990000">=</span> <span style="color: #FF0000">{</span> <span style="color: #993399">0</span> <span style="color: #FF0000">}</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// initialize p_void as zero</span></span>
     <span style="font-weight: bold"><span style="color: #000000">cad_new_ad</span></span><span style="color: #990000">(</span> <span style="color: #990000">&amp;</span>asin_sin_x0<span style="color: #990000">,</span> <span style="color: #993399">0</span><span style="color: #990000">.);</span>
     <span style="font-weight: bold"><span style="color: #000000">cad_unary</span></span><span style="color: #990000">(</span>op_asin<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>sin_x0<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>asin_sin_x0<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(&amp;</span>asin_sin_x0<span style="color: #990000">),</span>
          <span style="font-weight: bold"><span style="color: #000000">asin</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(&amp;</span>sin_x0<span style="color: #990000">)</span> <span style="color: #990000">)</span>
     <span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #000000">cad_binary</span></span><span style="color: #990000">(</span>op_add<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>sin_x0<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>asin_sin_x0<span style="color: #990000">,</span> Y<span style="color: #990000">+</span><span style="color: #993399">4</span><span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(</span>Y<span style="color: #990000">+</span><span style="color: #993399">4</span><span style="color: #990000">),</span>
          <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(&amp;</span>sin_x0<span style="color: #990000">)</span> <span style="color: #990000">+</span> <span style="font-weight: bold"><span style="color: #000000">cad_value</span></span><span style="color: #990000">(&amp;</span>asin_sin_x0<span style="color: #990000">)</span>
     <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare y as the dependent variable vector and stop recording</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// and store function object in f</span></span>
     <span style="color: #008080">cad_fun</span> f <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">cad_new_fun</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> m<span style="color: #990000">,</span> X<span style="color: #990000">,</span> Y<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// now use the function object</span></span>
     <span style="color: #009900">double</span> x<span style="color: #990000">[</span>N<span style="color: #990000">],</span> jac<span style="color: #990000">[</span>N <span style="color: #990000">*</span> M<span style="color: #990000">];</span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">.</span><span style="color: #993399">5</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compute the Jacobian</span></span>
     <span style="font-weight: bold"><span style="color: #000000">cad_jacobian</span></span><span style="color: #990000">(</span>f<span style="color: #990000">,</span> n<span style="color: #990000">,</span> m<span style="color: #990000">,</span> x<span style="color: #990000">,</span> jac<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the Jacobian values</span></span>
     <span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial y[0] w.r.t. x[0]</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>jac<span style="color: #990000">[</span>k<span style="color: #990000">++],</span> <span style="color: #993399">1</span><span style="color: #990000">.);</span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial y[0] w.r.t. x[1]</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>jac<span style="color: #990000">[</span>k<span style="color: #990000">++],</span> <span style="color: #993399">1</span><span style="color: #990000">.);</span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial y[1] w.r.t. x[0]</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>jac<span style="color: #990000">[</span>k<span style="color: #990000">++],</span> <span style="color: #993399">1</span><span style="color: #990000">.);</span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial y[1] w.r.t. x[1]</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>jac<span style="color: #990000">[</span>k<span style="color: #990000">++],</span> <span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">.);</span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial y[2] w.r.t. x[0]</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>jac<span style="color: #990000">[</span>k<span style="color: #990000">++],</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial y[2] w.r.t. x[1]</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>jac<span style="color: #990000">[</span>k<span style="color: #990000">++],</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial y[3] w.r.t. x[0]</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>jac<span style="color: #990000">[</span>k<span style="color: #990000">++],</span> <span style="color: #993399">1</span><span style="color: #990000">./</span>x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial y[3] w.r.t. x[1]</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>jac<span style="color: #990000">[</span>k<span style="color: #990000">++],</span> <span style="color: #990000">-</span>x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]/(</span>x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]*</span>x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]));</span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial y[4] w.r.t x[0]</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>jac<span style="color: #990000">[</span>k<span style="color: #990000">++],</span>  <span style="font-weight: bold"><span style="color: #000000">cos</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">])</span> <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">.);</span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial y[4] w.r.t x[1]</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>jac<span style="color: #990000">[</span>k<span style="color: #990000">++],</span>  <span style="color: #993399">0</span><span style="color: #990000">.);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// evaluate the function f at a different x</span></span>
     <span style="color: #008080">size_t</span> order <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="color: #009900">double</span> y<span style="color: #990000">[</span>M<span style="color: #990000">];</span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">.</span><span style="color: #993399">5</span><span style="color: #990000">;</span>
     x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     <span style="font-weight: bold"><span style="color: #000000">cad_forward</span></span><span style="color: #990000">(</span>f<span style="color: #990000">,</span> order<span style="color: #990000">,</span> n<span style="color: #990000">,</span> m<span style="color: #990000">,</span> x<span style="color: #990000">,</span> y<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the function values</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">-</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">/</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_near_equal</span></span><span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">4</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">sin</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">])</span> <span style="color: #990000">+</span> <span style="font-weight: bold"><span style="color: #000000">asin</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">sin</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]))</span> <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// delete All C++ copies of the AD objects</span></span>
     <span style="font-weight: bold"><span style="color: #000000">cad_del_fun</span></span><span style="color: #990000">(</span> <span style="color: #990000">&amp;</span>f <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">cad_del_ad</span></span><span style="color: #990000">(</span> <span style="color: #990000">&amp;</span>sin_x0 <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">cad_del_ad</span></span><span style="color: #990000">(</span> <span style="color: #990000">&amp;</span>asin_sin_x0 <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="font-weight: bold"><span style="color: #000000">cad_del_ad</span></span><span style="color: #990000">(</span>X <span style="color: #990000">+</span> j<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="font-weight: bold"><span style="color: #000000">cad_del_ad</span></span><span style="color: #990000">(</span>Y <span style="color: #990000">+</span> i<span style="color: #990000">);</span>

     ok     <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">cad_allocated_empty</span></span><span style="color: #990000">();</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: example/general/ad_in_c.cpp

</body>
</html>
