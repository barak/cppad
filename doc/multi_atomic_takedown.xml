<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Multi-Threaded User Atomic Take Down</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Multi-Threaded User Atomic Take Down"/>
<meta name="keywords" id="keywords" content=" multi-threaded user atomic take down syntax purpose thread square_root ok source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_atomic_takedown_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="multi_atomic_worker.xml" target="_top">Prev</a>
</td><td><a href="multi_atomic_run.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>multi_atomic.cpp</option>
<option>multi_atomic_takedown</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
<option>simple_ad_openmp.cpp</option>
<option>simple_ad_bthread.cpp</option>
<option>simple_ad_pthread.cpp</option>
<option>team_example.cpp</option>
<option>harmonic.cpp</option>
<option>multi_atomic.cpp</option>
<option>multi_newton.cpp</option>
<option>team_thread.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>multi_atomic.cpp-&gt;</option>
<option>multi_atomic_user</option>
<option>multi_atomic_common</option>
<option>multi_atomic_setup</option>
<option>multi_atomic_worker</option>
<option>multi_atomic_takedown</option>
<option>multi_atomic_run</option>
<option>multi_atomic_time</option>
</select>
</td>
<td>multi_atomic_takedown</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Thread</option>
<option>square_root</option>
<option>ok</option>
<option>Source</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Multi-Threaded User Atomic Take Down</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;multi_atomic_takedown(</span></font><i><font color="black"><span style='white-space: nowrap'>square_root</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This routine gathers up the results for each thread and
frees memory that was allocated by <a href="multi_atomic_setup.xml" target="_top"><span style='white-space: nowrap'>multi_atomic_setup</span></a>
.

<br/>
<br/>
<b><big><a name="Thread" id="Thread">Thread</a></big></b>
<br/>
It is assumed that this function is called by thread zero
and all the other threads are blocked (waiting).

<br/>
<br/>
<b><big><a name="square_root" id="square_root">square_root</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vector&lt;double&gt;&amp;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>square_root</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
The input value of 
<code><i><font color="black"><span style='white-space: nowrap'>square_root</span></font></i></code>
 does not matter.
Upon return,
it has the same size and is the element by element square root of
<a href="multi_atomic_setup.xml#y_squared" target="_top"><span style='white-space: nowrap'>y_squared</span></a>
.

<br/>
<br/>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br/>
This return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
If it is false,
<code><font color="blue">multi_atomic_takedown</font></code> detected an error.

<br/>
<br/>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">multi_atomic_takedown</span></span><span style="color: #990000">(</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> square_root<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok            <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     ok                <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">thread_num</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> num_threads <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">(</span>num_threads_<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">));</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// extract square roots in original order</span></span>
     square_root<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> thread_num <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> thread_num <span style="color: #990000">&lt;</span> num_threads<span style="color: #990000">;</span> thread_num<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// results for this thread</span></span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>square_root<span style="color: #990000">-&gt;</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               square_root<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">((*</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>square_root <span style="color: #990000">)[</span>i<span style="color: #990000">]);</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// go down so that free memory for other threads before memory for master</span></span>
     <span style="color: #008080">size_t</span> thread_num <span style="color: #990000">=</span> num_threads<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>thread_num<span style="color: #990000">--)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// check that this tread was ok with the work it did</span></span>
          ok  <span style="color: #990000">&amp;=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>ok<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// run destructor on vector object for this thread</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">delete</span></span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>y_squared<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">delete</span></span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>square_root<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// run destructor on function object for this thread</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">delete</span></span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>fun<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// delete problem specific information</span></span>
          <span style="color: #009900">void</span><span style="color: #990000">*</span> v_ptr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">void</span><span style="color: #990000">*&gt;(</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]</span> <span style="color: #990000">);</span>
          thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">return_memory</span></span><span style="color: #990000">(</span> v_ptr <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// check that there is no longer any memory inuse by this thread</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> thread_num <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> <span style="color: #993399">0</span> <span style="color: #990000">==</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">inuse</span></span><span style="color: #990000">(</span>thread_num<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// return all memory being held for future use by this thread</span></span>
               thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">free_available</span></span><span style="color: #990000">(</span>thread_num<span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: example/multi_thread/multi_atomic.cpp

</body>
</html>
