<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>The AD log10 Function: Example and Test</title>
<meta name="description" id="description" content="The AD log10 Function: Example and Test"/>
<meta name="keywords" id="keywords" content=" log10 Ad example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_log10.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="log.cpp.xml" target="_top">Prev</a>
</td><td><a href="sin.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>std_math_ad</option>
<option>log10.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>ad_ctor</option>
<option>ad_assign</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>std_math_ad</option>
<option>MathOther</option>
<option>CondExp</option>
<option>Discrete</option>
<option>atomic</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>std_math_ad-&gt;</option>
<option>Acos.cpp</option>
<option>Asin.cpp</option>
<option>atan.cpp</option>
<option>cos.cpp</option>
<option>cosh.cpp</option>
<option>exp.cpp</option>
<option>log.cpp</option>
<option>log10.cpp</option>
<option>sin.cpp</option>
<option>sinh.cpp</option>
<option>sqrt.cpp</option>
<option>tan.cpp</option>
<option>tanh.cpp</option>
</select>
</td>
<td>log10.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>The AD log10 Function: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;

bool Log10(void)
{	bool ok = true;

	using CppAD::AD;
	using CppAD::NearEqual;

	// domain space vector
	size_t n  = 1;
	double x0 = 0.5;
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(AD&lt;double&gt;) x(n);
	x[0]      = x0;

	// declare independent variables and start tape recording
	CppAD::<a href="independent.xml" target="_top">Independent</a>(x);

	// ten raised to the x0 power
	<a href="ad.xml" target="_top">AD</a>&lt;double&gt; ten = 10.;
	<a href="ad.xml" target="_top">AD</a>&lt;double&gt; pow_10_x0 = CppAD::pow(ten, x[0]); 

	// range space vector 
	size_t m = 1;
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(AD&lt;double&gt;) y(m);
	y[0] = CppAD::log10(pow_10_x0);

	// create f: x -&gt; y and stop tape recording
	CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f(x, y); 

	// check value 
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(y[0] , x0,  1e-10 , 1e-10);

	// forward computation of first partial w.r.t. x[0]
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(double) dx(n);
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(double) dy(m);
	dx[0] = 1.;
	dy    = f.<a href="forward.xml" target="_top">Forward</a>(1, dx);
	ok   &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(dy[0], 1., 1e-10, 1e-10);

	// reverse computation of derivative of y[0]
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(double)  w(m);
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(double) dw(n);
	w[0]  = 1.;
	dw    = f.<a href="reverse.xml" target="_top">Reverse</a>(1, w);
	ok   &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(dw[0], 1., 1e-10, 1e-10);

	// use a VecAD&lt;Base&gt;::reference object with log10
	CppAD::VecAD&lt;double&gt; v(1);
	<a href="ad.xml" target="_top">AD</a>&lt;double&gt; zero(0);
	v[zero]           = pow_10_x0;
	<a href="ad.xml" target="_top">AD</a>&lt;double&gt; result = CppAD::log10(v[zero]);
	ok   &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(result, x0, 1e-10, 1e-10);

	return ok;
}

</pre>

</font></code>


<hr/>Input File: example/log10.cpp

</body>
</html>
