<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Old Atomic Operation Reciprocal: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Old Atomic Operation Reciprocal: Example and Test"/>
<meta name="keywords" id="keywords" content=" old atomic operation reciprocal: example test deprecated 2013-05-27 theory "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_old_reciprocal.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="old_atomic.xml" target="_top">Prev</a>
</td><td><a href="old_usead_1.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>old_atomic</option>
<option>old_reciprocal.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>directory</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>wish_list</option>
<option>whats_new</option>
<option>deprecated</option>
<option>compare_c</option>
<option>numeric_ad</option>
<option>addon</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>deprecated-&gt;</option>
<option>include_deprecated</option>
<option>FunDeprecated</option>
<option>CompareChange</option>
<option>omp_max_thread</option>
<option>TrackNewDel</option>
<option>omp_alloc</option>
<option>memory_leak</option>
<option>epsilon</option>
<option>test_vector</option>
<option>cppad_ipopt_nlp</option>
<option>old_atomic</option>
<option>zdouble</option>
<option>autotools</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>old_atomic-&gt;</option>
<option>old_reciprocal.cpp</option>
<option>old_usead_1.cpp</option>
<option>old_usead_2.cpp</option>
<option>old_tan.cpp</option>
<option>old_mat_mul.cpp</option>
</select>
</td>
<td>old_reciprocal.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Deprecated 2013-05-27</option>
<option>Theory</option>
</select>
</td>
</tr></table><br/>

<center><b><big><big>Old Atomic Operation Reciprocal: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Deprecated 2013-05-27" id="Deprecated 2013-05-27">Deprecated 2013-05-27</a></big></b>
<br/>
This example has been deprecated;
see <a href="atomic_reciprocal.cpp.xml" target="_top"><span style='white-space: nowrap'>atomic_reciprocal.cpp</span></a>
 instead.

<br/>
<br/>
<b><big><a name="Theory" id="Theory">Theory</a></big></b>
<br/>
The example below defines the user atomic function

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>m</mi>
</msup>
</mrow></math>

 where

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow></math>

, 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>m</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow></math>

, and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mn>1</mn>
<mo stretchy="false">/</mo>
<mi mathvariant='italic'>x</mi>
</mrow></math>

.

<code><font color="blue">
<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// Begin empty namespace</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// a utility to compute the union of two sets.</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>set_union<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// forward mode routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">reciprocal_forward</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                   id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    k <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    m <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>      vx <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>            vy <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>    tx <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>          ty
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> k <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
          <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #009900">double</span> f<span style="color: #990000">,</span> fp<span style="color: #990000">,</span> fpp<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Must always define the case k = 0.</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// Do not need case k if not using f.Forward(q, xp) for q &gt;= k.</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">switch</span></span><span style="color: #990000">(</span>k<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> <span style="color: #993399">0</span><span style="color: #990000">:</span>
               <span style="font-style: italic"><span style="color: #9A1900">// this case must  be implemented</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
                    vy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> vx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               <span style="font-style: italic"><span style="color: #9A1900">// y^0 = f( x^0 ) = 1 / x^0</span></span>
               ty<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span> <span style="color: #990000">/</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               ok    <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

               <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> <span style="color: #993399">1</span><span style="color: #990000">:</span>
               <span style="font-style: italic"><span style="color: #9A1900">// needed if first order forward mode is used</span></span>
               <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// y^1 = f'( x^0 ) x^1</span></span>
               f     <span style="color: #990000">=</span> ty<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               fp    <span style="color: #990000">=</span> <span style="color: #990000">-</span> f <span style="color: #990000">/</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               ty<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> fp <span style="color: #990000">*</span> tx<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
               ok    <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

               <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> <span style="color: #993399">2</span><span style="color: #990000">:</span>
               <span style="font-style: italic"><span style="color: #9A1900">// needed if second order forward mode is used</span></span>
               <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// Y''(t) = X'(t)^\R{T} f''[X(t)] X'(t) + f'[X(t)] X''(t)</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// 2 y^2  = x^1 * f''( x^0 ) x^1 + 2 f'( x^0 ) x^2</span></span>
               f     <span style="color: #990000">=</span> ty<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               fp    <span style="color: #990000">=</span> <span style="color: #990000">-</span> f <span style="color: #990000">/</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               fpp   <span style="color: #990000">=</span> <span style="color: #990000">-</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> fp <span style="color: #990000">/</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               ty<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> tx<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> fpp <span style="color: #990000">*</span> tx<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">/</span> <span style="color: #993399">2.0</span> <span style="color: #990000">+</span> fp <span style="color: #990000">*</span> tx<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>
               ok    <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// reverse mode routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">reciprocal_reverse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                   id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    k <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    m <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>    tx <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>    ty <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>          px <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>    py
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// Do not need case k if not using f.Reverse(k+1, w).</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>

          <span style="color: #009900">double</span> f<span style="color: #990000">,</span> fp<span style="color: #990000">,</span> fpp<span style="color: #990000">,</span> fppp<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">switch</span></span><span style="color: #990000">(</span>k<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> <span style="color: #993399">0</span><span style="color: #990000">:</span>
               <span style="font-style: italic"><span style="color: #9A1900">// needed if first order reverse mode is used</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// reverse: F^0 ( tx ) = y^0 = f( x^0 )</span></span>
               f     <span style="color: #990000">=</span> ty<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               fp    <span style="color: #990000">=</span> <span style="color: #990000">-</span> f <span style="color: #990000">/</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               px<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> py<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> fp<span style="color: #990000">;;</span>
               ok    <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

               <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> <span style="color: #993399">1</span><span style="color: #990000">:</span>
               <span style="font-style: italic"><span style="color: #9A1900">// needed if second order reverse mode is used</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// reverse: F^1 ( tx ) = y^1 = f'( x^0 ) x^1</span></span>
               f      <span style="color: #990000">=</span> ty<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               fp     <span style="color: #990000">=</span> <span style="color: #990000">-</span> f <span style="color: #990000">/</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               fpp    <span style="color: #990000">=</span> <span style="color: #990000">-</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> fp <span style="color: #990000">/</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               px<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> py<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> fp<span style="color: #990000">;</span>
               px<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> py<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> fpp <span style="color: #990000">*</span> tx<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
               <span style="font-style: italic"><span style="color: #9A1900">// reverse: F^0 ( tx ) = y^0 = f( x^0 );</span></span>
               px<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+=</span> py<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> fp<span style="color: #990000">;</span>

               ok     <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>

               <span style="font-weight: bold"><span style="color: #0000FF">case</span></span> <span style="color: #993399">2</span><span style="color: #990000">:</span>
               <span style="font-style: italic"><span style="color: #9A1900">// needed if third order reverse mode is used</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// reverse: F^2 ( tx ) = y^2 =</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">//            = x^1 * f''( x^0 ) x^1 / 2 + f'( x^0 ) x^2</span></span>
               f      <span style="color: #990000">=</span> ty<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               fp     <span style="color: #990000">=</span> <span style="color: #990000">-</span> f <span style="color: #990000">/</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               fpp    <span style="color: #990000">=</span> <span style="color: #990000">-</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> fp <span style="color: #990000">/</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               fppp   <span style="color: #990000">=</span> <span style="color: #990000">-</span> <span style="color: #993399">3.0</span> <span style="color: #990000">*</span> fpp <span style="color: #990000">/</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               px<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> py<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> fp<span style="color: #990000">;</span>
               px<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> py<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> fpp <span style="color: #990000">*</span> tx<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
               px<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> py<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> tx<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> fppp <span style="color: #990000">*</span> tx<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">/</span> <span style="color: #993399">2.0</span> <span style="color: #990000">+</span> fpp <span style="color: #990000">*</span> tx<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>
               <span style="font-style: italic"><span style="color: #9A1900">// reverse: F^1 ( tx ) = y^1 = f'( x^0 ) x^1</span></span>
               px<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">+=</span> py<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> fp<span style="color: #990000">;</span>
               px<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+=</span> py<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> fpp <span style="color: #990000">*</span> tx<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
               <span style="font-style: italic"><span style="color: #9A1900">// reverse: F^0 ( tx ) = y^0 = f( x^0 );</span></span>
               px<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+=</span> py<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> fp<span style="color: #990000">;</span>

               ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">break</span></span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// forward Jacobian sparsity routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">reciprocal_for_jac_sparse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                               id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                m <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     r <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>           s <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// Can just return false if not using f.ForSparseJac</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for S(x) = f'(x) * R is same as sparsity for R</span></span>
          s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// reverse Jacobian sparsity routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">reciprocal_rev_jac_sparse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                               id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                m <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>           r <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     s <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// Can just return false if not using RevSparseJac.</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for R(x) = S * f'(x) is same as sparsity for S</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> q <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> q <span style="color: #990000">&lt;</span> p<span style="color: #990000">;</span> q<span style="color: #990000">++)</span>
               r<span style="color: #990000">[</span>q<span style="color: #990000">]</span> <span style="color: #990000">=</span> s<span style="color: #990000">[</span>q<span style="color: #990000">];</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// reverse Hessian sparsity routine called by CppAD</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">reciprocal_rev_hes_sparse</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                               id <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                n <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                m <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                                p <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     r <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   s <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>                   t <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     u <span style="color: #990000">,</span>
                vector<span style="color: #990000">&lt;</span> std<span style="color: #990000">::</span>set<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;&amp;</span>     v <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// Can just return false if not use RevSparseHes.</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> id <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">1</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for T(x) = S(x) * f'(x) is same as sparsity for S</span></span>
          t<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// V(x) = [ f'(x)^T * g''(y) * f'(x) + g'(y) * f''(x) ] * R</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// U(x) = g''(y) * f'(x) * R</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// S(x) = g'(y)</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// back propagate the sparsity for U because derivative of</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// reciprocal may be non-zero</span></span>
          v<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> u<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// convert forward Jacobian sparsity to Hessian sparsity</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// because second derivative of reciprocal may be non-zero</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
               v<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">set_union</span></span><span style="color: #990000">(</span>v<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">);</span>


          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ---------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Declare the AD&lt;double&gt; routine reciprocal(id, ax, ay)</span></span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_USER_ATOMIC</span></span><span style="color: #990000">(</span>
          reciprocal                 <span style="color: #990000">,</span>
          CppAD<span style="color: #990000">::</span>vector              <span style="color: #990000">,</span>
          <span style="color: #009900">double</span>                     <span style="color: #990000">,</span>
          reciprocal_forward         <span style="color: #990000">,</span>
          reciprocal_reverse         <span style="color: #990000">,</span>
          reciprocal_for_jac_sparse  <span style="color: #990000">,</span>
          reciprocal_rev_jac_sparse  <span style="color: #990000">,</span>
          reciprocal_rev_hes_sparse
     <span style="color: #990000">)</span>
<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// End empty namespace</span></span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">old_reciprocal</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> eps <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> CppAD<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Create the function f(x)</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
     <span style="color: #008080">size_t</span> n  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #009900">double</span>  x0 <span style="color: #990000">=</span> <span style="color: #993399">0.5</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">ax</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>     <span style="color: #990000">=</span> x0<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and start tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// range space vector</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">ay</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// call user function and store reciprocal(x) in au[0]</span></span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">au</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     <span style="color: #008080">size_t</span> id <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>           <span style="font-style: italic"><span style="color: #9A1900">// not used</span></span>
     <span style="font-weight: bold"><span style="color: #000000">reciprocal</span></span><span style="color: #990000">(</span>id<span style="color: #990000">,</span> ax<span style="color: #990000">,</span> au<span style="color: #990000">);</span>     <span style="font-style: italic"><span style="color: #9A1900">// u = 1 / x</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// call user function and store reciprocal(u) in ay[0]</span></span>
     <span style="font-weight: bold"><span style="color: #000000">reciprocal</span></span><span style="color: #990000">(</span>id<span style="color: #990000">,</span> au<span style="color: #990000">,</span> ay<span style="color: #990000">);</span>     <span style="font-style: italic"><span style="color: #9A1900">// y = 1 / u = x</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// create f: x -&gt; y and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> f<span style="color: #990000">;</span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span> <span style="color: #990000">(</span>ax<span style="color: #990000">,</span> ay<span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// f(x) = x</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Check forward mode results</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// check function value</span></span>
     <span style="color: #009900">double</span> check <span style="color: #990000">=</span> x0<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">Value</span></span><span style="color: #990000">(</span>ay<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">])</span> <span style="color: #990000">,</span> check<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check zero order forward mode</span></span>
     <span style="color: #008080">size_t</span> q<span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">x_q</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">y_q</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     q      <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     x_q<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x0<span style="color: #990000">;</span>
     y_q    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span>q<span style="color: #990000">,</span> x_q<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>y_q<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> check<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check first order forward mode</span></span>
     q      <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     x_q<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     y_q    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span>q<span style="color: #990000">,</span> x_q<span style="color: #990000">);</span>
     check  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>y_q<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> check<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check second order forward mode</span></span>
     q      <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     x_q<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     y_q    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span>q<span style="color: #990000">,</span> x_q<span style="color: #990000">);</span>
     check  <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>y_q<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> check<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Check reverse mode results</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// third order reverse mode</span></span>
     q     <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">w</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">dw</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> q<span style="color: #990000">);</span>
     w<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     dw    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Reverse</span></span><span style="color: #990000">(</span>q<span style="color: #990000">,</span> w<span style="color: #990000">);</span>
     check <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dw<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> check<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     check <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dw<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> check<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>dw<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> check<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// forward mode sparstiy pattern</span></span>
     <span style="color: #008080">size_t</span> p <span style="color: #990000">=</span> n<span style="color: #990000">;</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">r1</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> p<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">s1</span></span><span style="color: #990000">(</span>m <span style="color: #990000">*</span> p<span style="color: #990000">);</span>
     r1<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>          <span style="font-style: italic"><span style="color: #9A1900">// compute sparsity pattern for x[0]</span></span>
     s1    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">ForSparseJac</span></span><span style="color: #990000">(</span>p<span style="color: #990000">,</span> r1<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> s1<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// f[0] depends on x[0]</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// reverse mode sparstiy pattern</span></span>
     q <span style="color: #990000">=</span> m<span style="color: #990000">;</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">s2</span></span><span style="color: #990000">(</span>q <span style="color: #990000">*</span> m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">r2</span></span><span style="color: #990000">(</span>q <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
     s2<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>          <span style="font-style: italic"><span style="color: #9A1900">// compute sparsity pattern for f[0]</span></span>
     r2    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseJac</span></span><span style="color: #990000">(</span>q<span style="color: #990000">,</span> s2<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> r2<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// f[0] depends on x[0]</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Hessian sparsity (using previous ForSparseJac call)</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">s3</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">h</span></span><span style="color: #990000">(</span>p <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
     s3<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>        <span style="font-style: italic"><span style="color: #9A1900">// compute sparsity pattern for f[0]</span></span>
     h     <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseHes</span></span><span style="color: #990000">(</span>p<span style="color: #990000">,</span> s3<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> h<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// second partial of f[0] w.r.t. x[0] may be non-zero</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Free all temporary work space associated with old_atomic objects.</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (If there are future calls to user atomic functions, they will</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// create new temporary work space.)</span></span>
     CppAD<span style="color: #990000">::</span>user_atomic<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: example/deprecated/old_reciprocal.cpp

</body>
</html>
