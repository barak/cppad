<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>A Simple OpenMP AD: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="A Simple OpenMP AD: Example and Test"/>
<meta name="keywords" id="keywords" content=" simple openmp ad: example test Ad purpose source code "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_simple_ad_openmp.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="a11c_pthread.cpp.xml" target="_top">Prev</a>
</td><td><a href="simple_ad_bthread.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>simple_ad_openmp.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
<option>simple_ad_openmp.cpp</option>
<option>simple_ad_bthread.cpp</option>
<option>simple_ad_pthread.cpp</option>
<option>team_example.cpp</option>
<option>harmonic.cpp</option>
<option>multi_newton.cpp</option>
<option>team_thread.hpp</option>
</select>
</td>
<td>simple_ad_openmp.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Source Code</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>A Simple OpenMP AD: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This example demonstrates how CppAD can be used in a
OpenMP multi-threading environment.

<br/>
<br/>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>

<code><font color="blue">
<br/>
<pre style='display:inline'> 
# include &lt;cppad/cppad.hpp&gt;
# include &lt;omp.h&gt;
# define NUMBER_THREADS  4

namespace {
	// structure with problem specific information
	typedef struct {
		// function argument (worker input)
		double          x;
		// This structure would also have return information in it,
		// but this example only returns the ok flag
	} problem_specific;
	// =====================================================================
	// General purpose code you can copy to your application
	// =====================================================================
	using CppAD::thread_alloc;
	// ------------------------------------------------------------------
	// used to inform CppAD when we are in parallel execution mode
	bool in_parallel(void)
	{	return omp_in_parallel() != 0; }
	// ------------------------------------------------------------------
	// used to inform CppAD of the current thread number
	size_t thread_number(void)
	{	return static_cast&lt;size_t&gt;( omp_get_thread_num() ); }
	// ------------------------------------------------------------------
	// structure with information for one thread
	typedef struct {
		// false if an error occurs, true otherwise (worker output)
		bool               ok;
	} thread_one_t;
	// vector with information for all threads
	thread_one_t thread_all_[NUMBER_THREADS];
	// ------------------------------------------------------------------
	// function that calls all the workers
	bool worker(problem_specific* info);
	bool run_all_workers(size_t num_threads, problem_specific* info_all[])
	{	bool ok = true;

		// initialize thread_all_
		int thread_num, int_num_threads = int(num_threads);
		for(thread_num = 0; thread_num &lt; int_num_threads; thread_num++)
		{	// initialize as false to make sure gets called for all threads
			thread_all_[thread_num].ok         = false;
		}

		// turn off dynamic thread adjustment
		omp_set_dynamic(0);

		// set the number of OpenMP threads
		omp_set_num_threads( int_num_threads );

		// setup for using CppAD::<a href="ad.xml" target="_top">AD</a>&lt;double&gt; in parallel
		thread_alloc::parallel_setup(
			num_threads, in_parallel, thread_number
		);
		thread_alloc::hold_memory(true);
		CppAD::parallel_ad&lt;double&gt;();

		// execute worker in parallel
# pragma omp parallel for
	for(thread_num = 0; thread_num &lt; int_num_threads; thread_num++)
		thread_all_[thread_num].ok = worker(info_all[thread_num]);
// end omp parallel for

		// set the number of OpenMP threads to one
		omp_set_num_threads(1);

		// now inform CppAD that there is only one thread
		thread_alloc::parallel_setup(1, CPPAD_NULL, CPPAD_NULL);
		thread_alloc::hold_memory(false);
		CppAD::parallel_ad&lt;double&gt;();

		// check to ok flag returned by during calls to work by other threads
		for(thread_num = 1; thread_num &lt; int_num_threads; thread_num++)
			ok &amp;= thread_all_[thread_num].ok;

		return ok;
	}
	// =====================================================================
	// End of General purpose code
	// =====================================================================
	// function that does the work for one thread
	bool worker(problem_specific* info)
	{	using CppAD::NearEqual;
		using CppAD::AD;
		bool ok = true;

		// CppAD::vector uses the CppAD fast multi-threading allocator
		CppAD::vector&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt; ax(1), ay(1);
		ax[0] = info-&gt;x;
		<a href="independent.xml" target="_top">Independent</a>(ax);
		ay[0] = sqrt( ax[0] * ax[0] );
		CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f(ax, ay);

		// Check function value corresponds to the identity
		double eps = 10. * CppAD::numeric_limits&lt;double&gt;::epsilon();
		ok        &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(ay[0], ax[0], eps, eps);

		// Check derivative value corresponds to the identity.
		CppAD::vector&lt;double&gt; d_x(1), d_y(1);
		d_x[0] = 1.;
		d_y    = f.<a href="forward.xml" target="_top">Forward</a>(1, d_x);
		ok    &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(d_x[0], 1., eps, eps);

		return ok;
	}
}
bool simple_ad(void)
{	bool ok = true;
	size_t num_threads = NUMBER_THREADS;

	// Check that no memory is in use or avialable at start
	// (using thread_alloc in sequential mode)
	size_t thread_num;
	for(thread_num = 0; thread_num &lt; num_threads; thread_num++)
	{	ok &amp;= thread_alloc::inuse(thread_num) == 0;
		ok &amp;= thread_alloc::available(thread_num) == 0;
	}

	// initialize info_all
	problem_specific *info, *info_all[NUMBER_THREADS];
	for(thread_num = 0; thread_num &lt; num_threads; thread_num++)
	{	// problem specific information
		size_t min_bytes(sizeof(info)), cap_bytes;
		void*  v_ptr = thread_alloc::get_memory(min_bytes, cap_bytes);
		info         = static_cast&lt;problem_specific*&gt;(v_ptr);
		info-&gt;x      = double(thread_num) + 1.;
		info_all[thread_num] = info;
	}

	ok &amp;= run_all_workers(num_threads, info_all);

	// go down so that free memory for other threads before memory for master
	thread_num = num_threads;
	while(thread_num--)
	{	// delete problem specific information
		void* v_ptr = static_cast&lt;void*&gt;( info_all[thread_num] );
		thread_alloc::return_memory( v_ptr );
		// check that there is no longer any memory inuse by this thread
		ok &amp;= thread_alloc::inuse(thread_num) == 0;
		// return all memory being held for future use by this thread
		thread_alloc::free_available(thread_num);
	}

	return ok;
}
</pre>

</font></code>


<hr/>Input File: multi_thread/openmp/simple_ad_openmp.cpp

</body>
</html>
