<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Preferred Sparsity Patterns: Row and Column Indices: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Preferred Sparsity Patterns: Row and Column Indices: Example and Test"/>
<meta name="keywords" id="keywords" content=" preferred sparsity patterns: row column indices: example test purpose "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_rc_sparsity.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="dependency.cpp.xml" target="_top">Prev</a>
</td><td><a href="subgraph_sparsity.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>sparsity_pattern</option>
<option>rc_sparsity.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADFun-&gt;</option>
<option>record_adfun</option>
<option>drivers</option>
<option>Forward</option>
<option>Reverse</option>
<option>sparsity_pattern</option>
<option>sparse_derivative</option>
<option>optimize</option>
<option>abs_normal</option>
<option>FunCheck</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>sparsity_pattern-&gt;</option>
<option>for_jac_sparsity</option>
<option>ForSparseJac</option>
<option>rev_jac_sparsity</option>
<option>RevSparseJac</option>
<option>rev_hes_sparsity</option>
<option>RevSparseHes</option>
<option>for_hes_sparsity</option>
<option>ForSparseHes</option>
<option>dependency.cpp</option>
<option>rc_sparsity.cpp</option>
<option>subgraph_sparsity</option>
</select>
</td>
<td>rc_sparsity.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Preferred Sparsity Patterns: Row and Column Indices: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This example show how to use row and column index sparsity patterns
<a href="sparse_rc.xml" target="_top"><span style='white-space: nowrap'>sparse_rc</span></a>
 to compute sparse Jacobians and Hessians.
This became the preferred way to represent sparsity on
<a href="whats_new_17.xml#02-09" target="_top"><span style='white-space: nowrap'>2017-02-09</span></a>
.

<code><font color="blue">
<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>sparse_rc<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>sparse_rcv<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">bool</span><span style="color: #990000">)</span>                b_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>size_t<span style="color: #990000">)</span>              s_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span>              d_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #990000">)</span> a_vector<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="color: #009900">double</span> eps99 <span style="color: #990000">=</span> <span style="color: #993399">99.0</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>
     <span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// function f(x) that we are computing sparse results for</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------------------</span></span>
     <span style="color: #008080">a_vector</span> <span style="font-weight: bold"><span style="color: #000000">fun</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> a_vector<span style="color: #990000">&amp;</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> n  <span style="color: #990000">=</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">a_vector</span> <span style="font-weight: bold"><span style="color: #000000">ret</span></span><span style="color: #990000">(</span>n <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #990000">(</span>i <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">%</span> n<span style="color: #990000">;</span>
               ret<span style="color: #990000">[</span>i<span style="color: #990000">]</span>     <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          ret<span style="color: #990000">[</span>n<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ret<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Jacobian</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------------------</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">check_jac</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> d_vector<span style="color: #990000">&amp;</span>                       x      <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> sparse_rcv<span style="color: #990000">&lt;</span>s_vector<span style="color: #990000">,</span> d_vector<span style="color: #990000">&gt;&amp;</span> subset <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          ok <span style="color: #990000">&amp;=</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">nnz</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">*</span> n<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> s_vector<span style="color: #990000">&amp;</span> <span style="font-weight: bold"><span style="color: #000000">row</span></span><span style="color: #990000">(</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">row</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> s_vector<span style="color: #990000">&amp;</span> <span style="font-weight: bold"><span style="color: #000000">col</span></span><span style="color: #990000">(</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">col</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> d_vector<span style="color: #990000">&amp;</span> <span style="font-weight: bold"><span style="color: #000000">val</span></span><span style="color: #990000">(</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">val</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="color: #008080">s_vector</span> row_major <span style="color: #990000">=</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">row_major</span></span><span style="color: #990000">();</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #990000">(</span>i <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">%</span> n<span style="color: #990000">;</span>
               <span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">2</span> <span style="color: #990000">*</span> i<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               ok <span style="color: #990000">&amp;=</span> row<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">]</span>   <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> row<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span>k<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="color: #008080">size_t</span> ck  <span style="color: #990000">=</span> col<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">];</span>
               <span style="color: #008080">size_t</span> ckp <span style="color: #990000">=</span> col<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span>k<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">];</span>
               <span style="color: #009900">double</span> vk  <span style="color: #990000">=</span> val<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">];</span>
               <span style="color: #009900">double</span> vkp <span style="color: #990000">=</span> val<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span>k<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">];</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// put diagonal element first</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> j <span style="color: #990000">&lt;</span> i <span style="color: #990000">)</span>
               <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">swap</span></span><span style="color: #990000">(</span>ck<span style="color: #990000">,</span> ckp<span style="color: #990000">);</span>
                    std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">swap</span></span><span style="color: #990000">(</span>vk<span style="color: #990000">,</span> vkp<span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
               <span style="font-style: italic"><span style="color: #9A1900">// diagonal element</span></span>
               ok <span style="color: #990000">&amp;=</span> ck <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span> vk<span style="color: #990000">,</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>j<span style="color: #990000">],</span> eps99<span style="color: #990000">,</span> eps99 <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// off diagonal element</span></span>
               ok <span style="color: #990000">&amp;=</span> ckp <span style="color: #990000">==</span> j<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span> vkp<span style="color: #990000">,</span> x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>i<span style="color: #990000">],</span> eps99<span style="color: #990000">,</span> eps99 <span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// Use forward mode for Jacobian and sparsity pattern</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">forward_jac</span></span><span style="color: #990000">(</span>CppAD<span style="color: #990000">::</span>ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> f<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Domain</span></span><span style="color: #990000">();</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// sparsity pattern for identity matrix</span></span>
          <span style="color: #008080">sparse_rc&lt;s_vector&gt;</span> <span style="font-weight: bold"><span style="color: #000000">pattern_in</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> n<span style="color: #990000">,</span> n<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               pattern_in<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">set</span></span><span style="color: #990000">(</span>k<span style="color: #990000">,</span> k<span style="color: #990000">,</span> k<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// sparsity pattern for Jacobian</span></span>
          <span style="color: #009900">bool</span> transpose     <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #009900">bool</span> dependency    <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #009900">bool</span> internal_bool <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">sparse_rc&lt;s_vector&gt;</span> pattern_out<span style="color: #990000">;</span>
          f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">for_jac_sparsity</span></span><span style="color: #990000">(</span>
               pattern_in<span style="color: #990000">,</span> transpose<span style="color: #990000">,</span> dependency<span style="color: #990000">,</span> internal_bool<span style="color: #990000">,</span> pattern_out
          <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// compute entire Jacobian</span></span>
          <span style="color: #008080">size_t</span>                         group_max <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          std<span style="color: #990000">::</span><span style="color: #008080">string</span>                    coloring  <span style="color: #990000">=</span> <span style="color: #FF0000">"cppad"</span><span style="color: #990000">;</span>
          <span style="color: #008080">sparse_rcv&lt;s_vector, d_vector&gt;</span> <span style="font-weight: bold"><span style="color: #000000">subset</span></span><span style="color: #990000">(</span> pattern_out <span style="color: #990000">);</span>
          CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_jac_work</span>         work<span style="color: #990000">;</span>
          <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>j <span style="color: #990000">+</span> <span style="color: #993399">2</span><span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> n_sweep <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">sparse_jac_for</span></span><span style="color: #990000">(</span>
               group_max<span style="color: #990000">,</span> x<span style="color: #990000">,</span> subset<span style="color: #990000">,</span> pattern_out<span style="color: #990000">,</span> coloring<span style="color: #990000">,</span> work
          <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// check Jacobian</span></span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">check_jac</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> subset<span style="color: #990000">);</span>
          ok <span style="color: #990000">&amp;=</span> n_sweep <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// Use reverse mode for Jacobian and sparsity pattern</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">reverse_jac</span></span><span style="color: #990000">(</span>CppAD<span style="color: #990000">::</span>ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> f<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Domain</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Range</span></span><span style="color: #990000">();</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// sparsity pattern for identity matrix</span></span>
          <span style="color: #008080">sparse_rc&lt;s_vector&gt;</span> <span style="font-weight: bold"><span style="color: #000000">pattern_in</span></span><span style="color: #990000">(</span>m<span style="color: #990000">,</span> m<span style="color: #990000">,</span> m<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               pattern_in<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">set</span></span><span style="color: #990000">(</span>k<span style="color: #990000">,</span> k<span style="color: #990000">,</span> k<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// sparsity pattern for Jacobian</span></span>
          <span style="color: #009900">bool</span> transpose     <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #009900">bool</span> dependency    <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #009900">bool</span> internal_bool <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">sparse_rc&lt;s_vector&gt;</span> pattern_out<span style="color: #990000">;</span>
          f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">rev_jac_sparsity</span></span><span style="color: #990000">(</span>
               pattern_in<span style="color: #990000">,</span> transpose<span style="color: #990000">,</span> dependency<span style="color: #990000">,</span> internal_bool<span style="color: #990000">,</span> pattern_out
          <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// compute entire Jacobian</span></span>
          std<span style="color: #990000">::</span><span style="color: #008080">string</span>                    coloring  <span style="color: #990000">=</span> <span style="color: #FF0000">"cppad"</span><span style="color: #990000">;</span>
          <span style="color: #008080">sparse_rcv&lt;s_vector, d_vector&gt;</span> <span style="font-weight: bold"><span style="color: #000000">subset</span></span><span style="color: #990000">(</span> pattern_out <span style="color: #990000">);</span>
          CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_jac_work</span>         work<span style="color: #990000">;</span>
          <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>j <span style="color: #990000">+</span> <span style="color: #993399">2</span><span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> n_sweep <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">sparse_jac_rev</span></span><span style="color: #990000">(</span>
               x<span style="color: #990000">,</span> subset<span style="color: #990000">,</span> pattern_out<span style="color: #990000">,</span> coloring<span style="color: #990000">,</span> work
          <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// check Jacobian</span></span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">check_jac</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> subset<span style="color: #990000">);</span>
          ok <span style="color: #990000">&amp;=</span> n_sweep <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ------------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Hessian</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// ------------------------------------------------------------------------</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">check_hes</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                                i      <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> d_vector<span style="color: #990000">&amp;</span>                       x      <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> sparse_rcv<span style="color: #990000">&lt;</span>s_vector<span style="color: #990000">,</span> d_vector<span style="color: #990000">&gt;&amp;</span> subset <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #990000">(</span>i <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">%</span> n<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          ok <span style="color: #990000">&amp;=</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">nnz</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> s_vector<span style="color: #990000">&amp;</span> <span style="font-weight: bold"><span style="color: #000000">row</span></span><span style="color: #990000">(</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">row</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> s_vector<span style="color: #990000">&amp;</span> <span style="font-weight: bold"><span style="color: #000000">col</span></span><span style="color: #990000">(</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">col</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> d_vector<span style="color: #990000">&amp;</span> <span style="font-weight: bold"><span style="color: #000000">val</span></span><span style="color: #990000">(</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">val</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="color: #008080">s_vector</span> row_major <span style="color: #990000">=</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">row_major</span></span><span style="color: #990000">();</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="color: #009900">double</span> v0 <span style="color: #990000">=</span> val<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">];</span>
          <span style="color: #009900">double</span> v1 <span style="color: #990000">=</span> val<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">];</span>
          <span style="color: #009900">double</span> v2 <span style="color: #990000">=</span> val<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> j <span style="color: #990000">&lt;</span> i <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> row<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> j<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> col<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span> v0<span style="color: #990000">,</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>i<span style="color: #990000">],</span> eps99<span style="color: #990000">,</span> eps99 <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               ok <span style="color: #990000">&amp;=</span> row<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> col<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> j<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span> v1<span style="color: #990000">,</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>i<span style="color: #990000">],</span> eps99<span style="color: #990000">,</span> eps99 <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               ok <span style="color: #990000">&amp;=</span> row<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> col<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span> v2<span style="color: #990000">,</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>j<span style="color: #990000">],</span> eps99<span style="color: #990000">,</span> eps99 <span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
          <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> row<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> col<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span> v0<span style="color: #990000">,</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>j<span style="color: #990000">],</span> eps99<span style="color: #990000">,</span> eps99 <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               ok <span style="color: #990000">&amp;=</span> row<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> col<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> j<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span> v1<span style="color: #990000">,</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>i<span style="color: #990000">],</span> eps99<span style="color: #990000">,</span> eps99 <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               ok <span style="color: #990000">&amp;=</span> row<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> j<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> col<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span> v2<span style="color: #990000">,</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>i<span style="color: #990000">],</span> eps99<span style="color: #990000">,</span> eps99 <span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// Use forward mode for Hessian and sparsity pattern</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">forward_hes</span></span><span style="color: #990000">(</span>CppAD<span style="color: #990000">::</span>ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> f<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Domain</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Range</span></span><span style="color: #990000">();</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="color: #008080">b_vector</span> <span style="font-weight: bold"><span style="color: #000000">select_domain</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               select_domain<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">sparse_rc&lt;s_vector&gt;</span> pattern_out<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// select i-th component of range</span></span>
               <span style="color: #008080">b_vector</span> <span style="font-weight: bold"><span style="color: #000000">select_range</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
               <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">w</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     select_range<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> k <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
                    w<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> k <span style="color: #990000">==</span> i <span style="color: #990000">)</span>
                         w<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="color: #009900">bool</span> internal_bool <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
               f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">for_hes_sparsity</span></span><span style="color: #990000">(</span>
                    select_domain<span style="color: #990000">,</span> select_range<span style="color: #990000">,</span> internal_bool<span style="color: #990000">,</span> pattern_out
               <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// compute Hessian for i-th component function</span></span>
               std<span style="color: #990000">::</span><span style="color: #008080">string</span>                    coloring  <span style="color: #990000">=</span> <span style="color: #FF0000">"cppad.symmetric"</span><span style="color: #990000">;</span>
               <span style="color: #008080">sparse_rcv&lt;s_vector, d_vector&gt;</span> <span style="font-weight: bold"><span style="color: #000000">subset</span></span><span style="color: #990000">(</span> pattern_out <span style="color: #990000">);</span>
               CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_hes_work</span>         work<span style="color: #990000">;</span>
               <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>j <span style="color: #990000">+</span> <span style="color: #993399">2</span><span style="color: #990000">);</span>
               <span style="color: #008080">size_t</span> n_sweep <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">sparse_hes</span></span><span style="color: #990000">(</span>
                    x<span style="color: #990000">,</span> w<span style="color: #990000">,</span> subset<span style="color: #990000">,</span> pattern_out<span style="color: #990000">,</span> coloring<span style="color: #990000">,</span> work
               <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// check Hessian</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i <span style="color: #990000">==</span> n <span style="color: #990000">)</span>
                    ok <span style="color: #990000">&amp;=</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">nnz</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
               <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">check_hes</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> x<span style="color: #990000">,</span> subset<span style="color: #990000">);</span>
                    ok <span style="color: #990000">&amp;=</span> n_sweep <span style="color: #990000">==</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// Use reverse mode for Hessian and sparsity pattern</span></span>
     <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">reverse_hes</span></span><span style="color: #990000">(</span>CppAD<span style="color: #990000">::</span>ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> f<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Domain</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Range</span></span><span style="color: #990000">();</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// n by n identity matrix</span></span>
          <span style="color: #008080">sparse_rc&lt;s_vector&gt;</span> <span style="font-weight: bold"><span style="color: #000000">pattern_in</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> n<span style="color: #990000">,</span> n<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               pattern_in<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">set</span></span><span style="color: #990000">(</span>j<span style="color: #990000">,</span> j<span style="color: #990000">,</span> j<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="color: #009900">bool</span> transpose     <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #009900">bool</span> dependency    <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #009900">bool</span> internal_bool <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="color: #008080">sparse_rc&lt;s_vector&gt;</span> pattern_out<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">for_jac_sparsity</span></span><span style="color: #990000">(</span>
               pattern_in<span style="color: #990000">,</span> transpose<span style="color: #990000">,</span> dependency<span style="color: #990000">,</span> internal_bool<span style="color: #990000">,</span> pattern_out
          <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// select i-th component of range</span></span>
               <span style="color: #008080">b_vector</span> <span style="font-weight: bold"><span style="color: #000000">select_range</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
               <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">w</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     select_range<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> k <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
                    w<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> k <span style="color: #990000">==</span> i <span style="color: #990000">)</span>
                         w<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">rev_hes_sparsity</span></span><span style="color: #990000">(</span>
                    select_range<span style="color: #990000">,</span> transpose<span style="color: #990000">,</span> internal_bool<span style="color: #990000">,</span> pattern_out
               <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// compute Hessian for i-th component function</span></span>
               std<span style="color: #990000">::</span><span style="color: #008080">string</span>                    coloring  <span style="color: #990000">=</span> <span style="color: #FF0000">"cppad.symmetric"</span><span style="color: #990000">;</span>
               <span style="color: #008080">sparse_rcv&lt;s_vector, d_vector&gt;</span> <span style="font-weight: bold"><span style="color: #000000">subset</span></span><span style="color: #990000">(</span> pattern_out <span style="color: #990000">);</span>
               CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_hes_work</span>         work<span style="color: #990000">;</span>
               <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>j <span style="color: #990000">+</span> <span style="color: #993399">2</span><span style="color: #990000">);</span>
               <span style="color: #008080">size_t</span> n_sweep <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">sparse_hes</span></span><span style="color: #990000">(</span>
                    x<span style="color: #990000">,</span> w<span style="color: #990000">,</span> subset<span style="color: #990000">,</span> pattern_out<span style="color: #990000">,</span> coloring<span style="color: #990000">,</span> work
               <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// check Hessian</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i <span style="color: #990000">==</span> n <span style="color: #990000">)</span>
                    ok <span style="color: #990000">&amp;=</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">nnz</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
               <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">check_hes</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> x<span style="color: #990000">,</span> subset<span style="color: #990000">);</span>
                    ok <span style="color: #990000">&amp;=</span> n_sweep <span style="color: #990000">==</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>
<span style="font-style: italic"><span style="color: #9A1900">// driver for all of the cases above</span></span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rc_sparsity</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// record the funcion</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">20</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> n <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #008080">a_vector</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span>j<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>
     y <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">fun</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> y<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// run the example / tests</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">forward_jac</span></span><span style="color: #990000">(</span>f<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">reverse_jac</span></span><span style="color: #990000">(</span>f<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">forward_hes</span></span><span style="color: #990000">(</span>f<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">reverse_hes</span></span><span style="color: #990000">(</span>f<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: example/sparse/rc_sparsity.cpp

</body>
</html>
