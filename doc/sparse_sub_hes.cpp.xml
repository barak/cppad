<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Sparse Hessian on Subset of Variables: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Sparse Hessian on Subset of Variables: Example and Test"/>
<meta name="keywords" id="keywords" content=" sparse hessian on subset of variables: example and test purpose see also "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_sub_hes.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="sub_sparse_hes.cpp.xml" target="_top">Prev</a>
</td><td><a href="funcheck.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>Drivers</option>
<option>sparse_hessian</option>
<option>sparse_sub_hes.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>abort_recording</option>
<option>seq_property</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>optimize</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Drivers-&gt;</option>
<option>Jacobian</option>
<option>ForOne</option>
<option>RevOne</option>
<option>Hessian</option>
<option>ForTwo</option>
<option>RevTwo</option>
<option>sparse_jacobian</option>
<option>sparse_hessian</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>sparse_hessian-&gt;</option>
<option>sparse_hessian.cpp</option>
<option>sub_sparse_hes.cpp</option>
<option>sparse_sub_hes.cpp</option>
</select>
</td>
<td>sparse_sub_hes.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>See Also</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>Sparse Hessian on Subset of Variables: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This example uses a subset of the sparsity pattern,
to compute the Hessian for a subset of the variables,
without having to compute the sparsity pattern for the entire function.

<br/>
<br/>
<b><big><a name="See Also" id="See Also">See Also</a></big></b>

<br/>
<a href="sub_sparse_hes.cpp.xml" target="_top"><span style='white-space: nowrap'>sub_sparse_hes.cpp</span></a>


<code><font color="blue">
<pre style='display:inline'> 
# include &lt;cppad/cppad.hpp&gt;
bool sparse_sub_hes(void)
{	bool ok = true;
	using CppAD::AD;
	typedef CppAD::vector&lt; double &gt;                   d_vector;
	typedef CppAD::vector&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt;               a_vector;
	typedef CppAD::vector&lt;size_t&gt;                     i_vector;
	typedef CppAD::vector&lt; std::set&lt;size_t&gt; &gt;         s_vector;

	// domain space vector
	size_t n = 12;  // must be greater than or equal 3; see n_sweep below
	a_vector a_x(n);
	for(size_t j = 0; j &lt; n; j++)
		a_x[j] = <a href="ad.xml" target="_top">AD</a>&lt;double&gt; (0);

	// declare independent variables and starting recording
	CppAD::<a href="independent.xml" target="_top">Independent</a>(a_x);

	// range space vector
	size_t m = 1;
	a_vector a_y(m);
	a_y[0] = 0.0;
	for(size_t j = 1; j &lt; n; j++)
		a_y[0] += a_x[j-1] * a_x[j] * a_x[j];

	// create f: x -&gt; y and stop tape recording
	// (without executing zero order forward calculation)
	CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f;
	f.Dependent(a_x, a_y);

	// sparsity patteren for the sub-set of variables we are computing
	// the hessian w.r.t.
	size_t n_sub = 4;
	s_vector r(n);
	for(size_t j = 0; j &lt; n_sub; j++)
	{	assert(  r[j].empty() );
		r[j].insert(j);
	}

	// store forward sparsity for J(x) = F^{(1)} (x) * R
	f.ForSparseJac(n_sub, r);

	// compute sparsity pattern for H(x) = (S * F)^{(2)} ( x ) * R
	s_vector s(1);
	assert(  s[0].empty() );
	s[0].insert(0);
	bool transpose = true;
	s_vector h = f.RevSparseHes(n_sub, s, transpose);

	// check sparsity pattern
	for(size_t i = 0; i &lt; n; i++)
	{	std::set&lt;size_t&gt; check;
		assert( check.empty() );
		if( i &lt;= n_sub )
		{	if( i == 0 )
				check.insert(1);
			else
			{	check.insert(i-1);
				if( i &lt; n_sub )
					check.insert(i);
				if( i + 1 &lt; n_sub)
					check.insert(i+1);
			}
		}
		ok &amp;= h[i] == check;
	}

	// set the row and column indices that correspond to lower triangle
	i_vector row, col;
	for(size_t i = 0; i &lt; n_sub; i++)
	{	std::set&lt;size_t&gt;::iterator itr;
		for(itr = h[i].begin(); itr != h[i].end(); itr++)
		{	if( *itr &lt;= i )
			{	row.push_back( i );
				col.push_back( *itr );
			}
		}
	}

	// weighting for the Hessian
	d_vector w(1);
	w[0] = 1.0;

	// compute Hessian
	CppAD::sparse_hessian_work work;
	d_vector x(n), hes( row.size() );
	for(size_t j = 0; j &lt; n; j++)
		x[j] = double(j+1);
	f.SparseHessian(x, w, h, row, col, hes, work);

	// check the values in the sparse hessian
	for(size_t ell = 0; ell &lt; row.size(); ell++)
	{	size_t i = row[ell];
		size_t j = col[ell];
		if( i == j )
			ok &amp;= hes[ell] == 2.0 * x[i-1];
		else
		{	ok &amp;= j+1 == i;
			ok &amp;= hes[ell] == 2.0 * x[i];
		}
		ell++;
	}
	return ok;
}
</pre>

</font></code>


<hr/>Input File: example/sparse_sub_hes.cpp

</body>
</html>
