<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Sparse Hessian on Subset of Variables: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Sparse Hessian on Subset of Variables: Example and Test"/>
<meta name="keywords" id="keywords" content=" sparse hessian on subset variables: example test purpose see also "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_sub_hes.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="sub_sparse_hes.cpp.xml" target="_top">Prev</a>
</td><td><a href="funcheck.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>Drivers</option>
<option>sparse_hessian</option>
<option>sparse_sub_hes.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>abort_recording</option>
<option>seq_property</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>optimize</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Drivers-&gt;</option>
<option>Jacobian</option>
<option>ForOne</option>
<option>RevOne</option>
<option>Hessian</option>
<option>ForTwo</option>
<option>RevTwo</option>
<option>sparse_jacobian</option>
<option>sparse_hessian</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>sparse_hessian-&gt;</option>
<option>sparse_hessian.cpp</option>
<option>sub_sparse_hes.cpp</option>
<option>sparse_sub_hes.cpp</option>
</select>
</td>
<td>sparse_sub_hes.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>See Also</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Sparse Hessian on Subset of Variables: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This example uses a
<a href="sparse_hessian.xml#p.Column Subset" target="_top"><span style='white-space: nowrap'>column&#xA0;subset</span></a>
 of the sparsity pattern
to compute the Hessian for a subset of the variables.
The values in the rest of the sparsity pattern do not matter.

<br/>
<br/>
<b><big><a name="See Also" id="See Also">See Also</a></big></b>

<br/>
<a href="sub_sparse_hes.cpp.xml" target="_top"><span style='white-space: nowrap'>sub_sparse_hes.cpp</span></a>


<code><font color="blue">
<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// BEGIN_EMPTY_NAMESPACE</span></span>

<span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------------</span></span>
CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">record_function</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> n<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// must be greater than or equal 3; see n_sweep below</span></span>
     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">&gt;=</span> <span style="color: #993399">3</span> <span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span>     a_vector<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
     <span style="color: #008080">a_vector</span> <span style="font-weight: bold"><span style="color: #000000">a_x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          a_x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and starting recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// range space vector</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #008080">a_vector</span> <span style="font-weight: bold"><span style="color: #000000">a_y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     a_y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          a_y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+=</span> a_x<span style="color: #990000">[</span>j<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> a_x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">*</span> a_x<span style="color: #990000">[</span>j<span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// create f: x -&gt; y and stop tape recording</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (without executing zero order forward calculation)</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> f<span style="color: #990000">;</span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">,</span> a_y<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> f<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------------</span></span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">test_set</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span><span style="color: #990000">*</span> color_method<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; double &gt;</span>                   d_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;size_t&gt;</span>                     i_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; std::set&lt;size_t&gt; &gt;</span>         s_vector<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">12</span><span style="color: #990000">;</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> f <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">record_function</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// sparsity patteren for the sub-set of variables we are computing</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// the hessian w.r.t.</span></span>
     <span style="color: #008080">size_t</span> n_sub <span style="color: #990000">=</span> <span style="color: #993399">4</span><span style="color: #990000">;</span>
     <span style="color: #008080">s_vector</span> <span style="font-weight: bold"><span style="color: #000000">r</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n_sub<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span>  r<span style="color: #990000">[</span>j<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">empty</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          r<span style="color: #990000">[</span>j<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span>j<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// store forward sparsity for J(x) = F^{(1)} (x) * R</span></span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">ForSparseJac</span></span><span style="color: #990000">(</span>n_sub<span style="color: #990000">,</span> r<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compute sparsity pattern for H(x) = (S * F)^{(2)} ( x ) * R</span></span>
     <span style="color: #008080">s_vector</span> <span style="font-weight: bold"><span style="color: #000000">s</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span>  s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">empty</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="color: #009900">bool</span> transpose <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #008080">s_vector</span> h <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseHes</span></span><span style="color: #990000">(</span>n_sub<span style="color: #990000">,</span> s<span style="color: #990000">,</span> transpose<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// set the row and column indices that correspond to lower triangle</span></span>
     <span style="color: #008080">i_vector</span> row<span style="color: #990000">,</span> col<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n_sub<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// diagonal element</span></span>
               row<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
               col<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// lower diagonal element</span></span>
               row<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
               col<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">(</span>i<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// weighting for the Hessian</span></span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">w</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     w<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compute Hessian</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_hessian_work</span> work<span style="color: #990000">;</span>
     work<span style="color: #990000">.</span>color_method <span style="color: #990000">=</span> color_method<span style="color: #990000">;</span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">hes</span></span><span style="color: #990000">(</span> row<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>j<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">SparseHessian</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> w<span style="color: #990000">,</span> h<span style="color: #990000">,</span> row<span style="color: #990000">,</span> col<span style="color: #990000">,</span> hes<span style="color: #990000">,</span> work<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the values in the sparse hessian</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;</span> row<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span> ell<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> row<span style="color: #990000">[</span>ell<span style="color: #990000">];</span>
          <span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> col<span style="color: #990000">[</span>ell<span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i <span style="color: #990000">==</span> j <span style="color: #990000">)</span>
               ok <span style="color: #990000">&amp;=</span> hes<span style="color: #990000">[</span>ell<span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>i<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
          <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> j<span style="color: #990000">+</span><span style="color: #993399">1</span> <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> hes<span style="color: #990000">[</span>ell<span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          ell<span style="color: #990000">++;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------------</span></span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">test_bool</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span><span style="color: #990000">*</span> color_method<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt; double &gt;</span>    d_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;size_t&gt;</span>      i_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;bool&gt;</span>        s_vector<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">12</span><span style="color: #990000">;</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> f <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">record_function</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// sparsity patteren for the sub-set of variables we are computing</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// the hessian w.r.t.</span></span>
     <span style="color: #008080">size_t</span> n_sub <span style="color: #990000">=</span> <span style="color: #993399">4</span><span style="color: #990000">;</span>
     <span style="color: #008080">s_vector</span> <span style="font-weight: bold"><span style="color: #000000">r</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n_sub<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n_sub<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               r<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n_sub <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">(</span>i <span style="color: #990000">==</span> j<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// store forward sparsity for J(x) = F^{(1)} (x) * R</span></span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">ForSparseJac</span></span><span style="color: #990000">(</span>n_sub<span style="color: #990000">,</span> r<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compute sparsity pattern for H(x) = (S * F)^{(2)} ( x ) * R</span></span>
     <span style="color: #008080">s_vector</span> <span style="font-weight: bold"><span style="color: #000000">s</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #009900">bool</span> transpose <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #008080">s_vector</span> h <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">RevSparseHes</span></span><span style="color: #990000">(</span>n_sub<span style="color: #990000">,</span> s<span style="color: #990000">,</span> transpose<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// set the row and column indices that correspond to lower triangle</span></span>
     <span style="color: #008080">i_vector</span> row<span style="color: #990000">,</span> col<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n_sub<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// diagonal element</span></span>
               row<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
               col<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// lower diagonal element</span></span>
               row<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
               col<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">(</span>i<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// weighting for the Hessian</span></span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">w</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     w<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// extend sparsity pattern (values in extended columns do not matter)</span></span>
     <span style="color: #008080">s_vector</span> <span style="font-weight: bold"><span style="color: #000000">h_extended</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n_sub<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               h_extended<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> h<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n_sub <span style="color: #990000">+</span> j <span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> n_sub<span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               h_extended<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// compute Hessian</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_hessian_work</span> work<span style="color: #990000">;</span>
     work<span style="color: #990000">.</span>color_method <span style="color: #990000">=</span> color_method<span style="color: #990000">;</span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">hes</span></span><span style="color: #990000">(</span> row<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>j<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">SparseHessian</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> w<span style="color: #990000">,</span> h_extended<span style="color: #990000">,</span> row<span style="color: #990000">,</span> col<span style="color: #990000">,</span> hes<span style="color: #990000">,</span> work<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the values in the sparse hessian</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;</span> row<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span> ell<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> row<span style="color: #990000">[</span>ell<span style="color: #990000">];</span>
          <span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> col<span style="color: #990000">[</span>ell<span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i <span style="color: #990000">==</span> j <span style="color: #990000">)</span>
               ok <span style="color: #990000">&amp;=</span> hes<span style="color: #990000">[</span>ell<span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>i<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
          <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> j<span style="color: #990000">+</span><span style="color: #993399">1</span> <span style="color: #990000">==</span> i<span style="color: #990000">;</span>
               ok <span style="color: #990000">&amp;=</span> hes<span style="color: #990000">[</span>ell<span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          ell<span style="color: #990000">++;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// END_EMPTY_NAMESPACE</span></span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">sparse_sub_hes</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">test_set</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"cppad.symmetric"</span><span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">test_set</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"cppad.general"</span><span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">test_bool</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"cppad.symmetric"</span><span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">test_bool</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"cppad.general"</span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: example/sparse_sub_hes.cpp

</body>
</html>
