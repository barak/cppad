<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Atomic Forward Hessian Sparsity: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Atomic Forward Hessian Sparsity: Example and Test"/>
<meta name="keywords" id="keywords" content=" atomic forward hessian sparsity: example test purpose function start class definition constructor for_sparse_jac rev_sparse_jac for_sparse_hes use with x_1 both variable parameter "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_for_sparse_hes.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="atomic_for_sparse_hes.xml" target="_top">Prev</a>
</td><td><a href="atomic_rev_sparse_hes.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_base</option>
<option>atomic_for_sparse_hes</option>
<option>atomic_for_sparse_hes.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>atomic-&gt;</option>
<option>checkpoint</option>
<option>atomic_base</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>atomic_base-&gt;</option>
<option>atomic_ctor</option>
<option>atomic_option</option>
<option>atomic_afun</option>
<option>atomic_forward</option>
<option>atomic_reverse</option>
<option>atomic_for_sparse_jac</option>
<option>atomic_rev_sparse_jac</option>
<option>atomic_for_sparse_hes</option>
<option>atomic_rev_sparse_hes</option>
<option>atomic_base_clear</option>
<option>atomic_get_started.cpp</option>
<option>atomic_norm_sq.cpp</option>
<option>atomic_reciprocal.cpp</option>
<option>atomic_set_sparsity.cpp</option>
<option>atomic_tangent.cpp</option>
<option>atomic_eigen_mat_mul.cpp</option>
<option>atomic_eigen_mat_inv.cpp</option>
<option>atomic_eigen_cholesky.cpp</option>
<option>atomic_mat_mul.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>atomic_for_sparse_hes-&gt;</option>
<option>atomic_for_sparse_hes.cpp</option>
</select>
</td>
<td>atomic_for_sparse_hes.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>function</option>
<option>Start Class Definition</option>
<option>Constructor</option>
<option>forward</option>
<option>for_sparse_jac</option>
<option>rev_sparse_jac</option>
<option>for_sparse_hes</option>
<option>Use Atomic Function</option>
<option>Test with x_1 Both a Variable and a Parameter</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Atomic Forward Hessian Sparsity: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This example demonstrates calculation of the forward Hessian sparsity pattern
for an atomic operation.

<br/>
<br/>
<b><big><a name="function" id="function">function</a></big></b>
<br/>
For this example, the atomic function

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mn>3</mn>
</msup>
<mo stretchy="false">&#x02192;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mn>2</mn>
</msup>
</mrow></math>

 is defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<msub><mi mathvariant='italic'>x</mi>
<mn>2</mn>
</msub>
<mo stretchy="false">*</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>2</mn>
</msub>
</mtd></mtr><mtr><mtd columnalign="center" >
<msub><mi mathvariant='italic'>x</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">*</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>1</mn>
</msub>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
</mrow></math>

The Hessians of the component functions are

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msubsup><mi mathvariant='italic'>f</mi>
<mn>0</mn>
<mrow><mo stretchy="false">(</mo>
<mn>2</mn>
<mo stretchy="false">)</mo>
</mrow>
</msubsup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mn>0</mn>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd></mtr><mtr><mtd columnalign="center" >
<mn>0</mn>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd></mtr><mtr><mtd columnalign="center" >
<mn>0</mn>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd><mtd columnalign="center" >
<mn>2</mn>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
<mspace width='.3em'/>
<mo stretchy="false">,</mo>
<mspace width='.3em'/>
<msubsup><mi mathvariant='italic'>f</mi>
<mn>1</mn>
<mrow><mo stretchy="false">(</mo>
<mn>2</mn>
<mo stretchy="false">)</mo>
</mrow>
</msubsup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mrow><mo stretchy="true">(</mo><mrow><mtable rowalign="center" ><mtr><mtd columnalign="center" >
<mn>0</mn>
</mtd><mtd columnalign="center" >
<mn>1</mn>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd></mtr><mtr><mtd columnalign="center" >
<mn>1</mn>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd></mtr><mtr><mtd columnalign="center" >
<mn>0</mn>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd><mtd columnalign="center" >
<mn>0</mn>
</mtd></mtr></mtable>
</mrow><mo stretchy="true">)</mo></mrow>
</mrow></math>

<br/>
<b><big><a name="Start Class Definition" id="Start Class Definition">Start Class Definition</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>          <span style="font-style: italic"><span style="color: #9A1900">// isolate items below to this file</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// abbreviate as vector</span></span>
<span style="font-style: italic"><span style="color: #9A1900">//</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">atomic_for_sparse_hes</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #FF0000">{</span></tt></pre>
<br/>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
     <span style="font-style: italic"><span style="color: #9A1900">// constructor (could use const char* for name)</span></span>
     <span style="font-weight: bold"><span style="color: #000000">atomic_for_sparse_hes</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span>string<span style="color: #990000">&amp;</span> name<span style="color: #990000">)</span> <span style="color: #990000">:</span>
     <span style="font-style: italic"><span style="color: #9A1900">// this example only uses pack sparsity patterns</span></span>
     CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span>name<span style="color: #990000">,</span> pack_sparsity_enum<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>
<span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span></tt></pre>
<br/>
<b><big><a name="forward" id="forward">forward</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// forward mode routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">forward</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                    p <span style="color: #990000">,</span>
          <span style="color: #008080">size_t</span>                    q <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>      vx <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>            vy <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>    tx <span style="color: #990000">,</span>
          vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>          ty
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> <span style="color: #990000">(</span>q <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> <span style="color: #990000">(</span>q <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">3</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// return flag</span></span>
          <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> q <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> ok <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// check for defining variable information</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// This case must always be implemented</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     vy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> vx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               vy<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> vx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">||</span> vy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Order zero forward mode.</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// This case must always be implemented</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// f(x) = [ x_0 * x_0 ]</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//        [ x_0 * x_1 ]</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> p <span style="color: #990000">&lt;=</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> p <span style="color: #990000">&lt;=</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     ty<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> tx<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> tx<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>
               ty<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> tx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> tx<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="for_sparse_jac" id="for_sparse_jac">for_sparse_jac</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// forward Jacobian sparsity routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">for_sparse_jac</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                     q <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vectorBool<span style="color: #990000">&amp;</span>   r <span style="color: #990000">,</span>
          CppAD<span style="color: #990000">::</span>vectorBool<span style="color: #990000">&amp;</span>         s <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>      x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// This function needed because we are using ForSparseHes</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// with afun.option( CppAD::atomic_base&lt;double&gt;::pack_sparsity_enum )</span></span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> q<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> q<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">3</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>


          <span style="font-style: italic"><span style="color: #9A1900">// f'(x) = [   0,   0, 2 x_2 ]</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//         [ x_1, x_0,     0 ]</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for first row of S(x) = f'(x) * R</span></span>
          <span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               s<span style="color: #990000">[</span> i <span style="color: #990000">*</span> q <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> r<span style="color: #990000">[</span> <span style="color: #993399">2</span> <span style="color: #990000">*</span> q <span style="color: #990000">+</span> j <span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for second row of S(x) = f'(x) * R</span></span>
          i <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               s<span style="color: #990000">[</span> i <span style="color: #990000">*</span> q <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> r<span style="color: #990000">[</span> <span style="color: #993399">0</span> <span style="color: #990000">*</span> q <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">|</span> r<span style="color: #990000">[</span> <span style="color: #993399">1</span> <span style="color: #990000">*</span> q <span style="color: #990000">+</span> j<span style="color: #990000">];</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="rev_sparse_jac" id="rev_sparse_jac">rev_sparse_jac</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// reverse Jacobian sparsity routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">rev_sparse_jac</span></span><span style="color: #990000">(</span>
          <span style="color: #008080">size_t</span>                     q  <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vectorBool<span style="color: #990000">&amp;</span>   rt <span style="color: #990000">,</span>
          CppAD<span style="color: #990000">::</span>vectorBool<span style="color: #990000">&amp;</span>         st <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>      x  <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// This function needed because we are using ForSparseHes</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// with afun.option( CppAD::atomic_base&lt;double&gt;::pack_sparsity_enum )</span></span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> rt<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> q<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> st<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">/</span> q<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">3</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">//           [     0,  x_1 ]</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// f'(x)^T = [     0,  x_0 ]</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//           [ 2 x_2,    0 ]</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for first row of S(x)^T = f'(x)^T * R^T</span></span>
          <span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               st<span style="color: #990000">[</span> i <span style="color: #990000">*</span> q <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> rt<span style="color: #990000">[</span> <span style="color: #993399">1</span> <span style="color: #990000">*</span> q <span style="color: #990000">+</span> j <span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for second row of S(x)^T = f'(x)^T * R^T</span></span>
          i <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               st<span style="color: #990000">[</span> i <span style="color: #990000">*</span> q <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> rt<span style="color: #990000">[</span> <span style="color: #993399">1</span> <span style="color: #990000">*</span> q <span style="color: #990000">+</span> j <span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// sparsity for third row of S(x)^T = f'(x)^T * R^T</span></span>
          i <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               st<span style="color: #990000">[</span> i <span style="color: #990000">*</span> q <span style="color: #990000">+</span> j <span style="color: #990000">]</span> <span style="color: #990000">=</span> rt<span style="color: #990000">[</span> <span style="color: #993399">0</span> <span style="color: #990000">*</span> q <span style="color: #990000">+</span> j <span style="color: #990000">];</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="for_sparse_hes" id="for_sparse_hes">for_sparse_hes</a></big></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// forward Hessian sparsity routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">for_sparse_hes</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>   vx<span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>   r <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>   s <span style="color: #990000">,</span>
          CppAD<span style="color: #990000">::</span>vectorBool<span style="color: #990000">&amp;</span>    h <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> x <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// This function needed because we are using RevSparseHes</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// with afun.option( CppAD::atomic_base&lt;double&gt;::pack_sparsity_enum )</span></span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> r<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #000080"># ifndef</span></span> NDEBUG
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> s<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> n <span style="color: #990000">==</span> <span style="color: #993399">3</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> m <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> h<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">*</span> n <span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">//            [ 0 , 0 , 0 ]                  [ 0 , 1 , 0 ]</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// f_0''(x) = [ 0 , 0 , 0 ]  f_1^{(2)} (x) = [ 1 , 0 , 0 ]</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//            [ 0 , 0 , 2 ]                  [ 0 , 0 , 0 ]</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// initial entire matrix as false</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n <span style="color: #990000">*</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               h<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// component (2, 2)</span></span>
          h<span style="color: #990000">[</span> <span style="color: #993399">2</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">2</span> <span style="color: #990000">]</span> <span style="color: #990000">=</span> s<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">&amp;</span> r<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// components (1, 0) and (0, 1)</span></span>
          h<span style="color: #990000">[</span> <span style="color: #993399">1</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">0</span> <span style="color: #990000">]</span> <span style="color: #990000">=</span> s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">&amp;</span> r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">&amp;</span> r<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          h<span style="color: #990000">[</span> <span style="color: #993399">0</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">1</span> <span style="color: #990000">]</span> <span style="color: #990000">=</span> s<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">&amp;</span> r<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">&amp;</span> r<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// End of atomic_for_sparse_hes class</span></span>
</tt></pre>
<b><big><a name="Use Atomic Function" id="Use Atomic Function">Use Atomic Function</a></big></b>

<pre><tt><span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">use_atomic_for_sparse_hes</span></span><span style="color: #990000">(</span><span style="color: #009900">bool</span> x_1_variable<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> eps <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> CppAD<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Create the atomic for_sparse_hes object</span></span>
     <span style="color: #008080">atomic_for_sparse_hes</span> <span style="font-weight: bold"><span style="color: #000000">afun</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"atomic_for_sparse_hes"</span><span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Create the function f(u)</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
     <span style="color: #008080">size_t</span> n  <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
     <span style="color: #009900">double</span> x_0 <span style="color: #990000">=</span> <span style="color: #993399">1.00</span><span style="color: #990000">;</span>
     <span style="color: #009900">double</span> x_1 <span style="color: #990000">=</span> <span style="color: #993399">2.00</span><span style="color: #990000">;</span>
     <span style="color: #009900">double</span> x_2 <span style="color: #990000">=</span> <span style="color: #993399">3.00</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">au</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     au<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x_0<span style="color: #990000">;</span>
     au<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x_1<span style="color: #990000">;</span>
     au<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x_2<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and start tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>au<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// range space vector</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">ay</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// call user function</span></span>
     <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">ax</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> au<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
     ax<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> au<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">];</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> x_1_variable <span style="color: #990000">)</span>
          ax<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> au<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
          ax<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x_1<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">afun</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">,</span> ay<span style="color: #990000">);</span>          <span style="font-style: italic"><span style="color: #9A1900">// y = [ x_2 * x_2 ,  x_0 * x_1 ]^T</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// create f: u -&gt; y and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> f<span style="color: #990000">;</span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span> <span style="color: #990000">(</span>au<span style="color: #990000">,</span> ay<span style="color: #990000">);</span>  <span style="font-style: italic"><span style="color: #9A1900">// f(u) = y</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// check function value</span></span>
     <span style="color: #009900">double</span> check <span style="color: #990000">=</span> x_2 <span style="color: #990000">*</span> x_2<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">Value</span></span><span style="color: #990000">(</span>ay<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">])</span> <span style="color: #990000">,</span> check<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     check <span style="color: #990000">=</span> x_0 <span style="color: #990000">*</span> x_1<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">Value</span></span><span style="color: #990000">(</span>ay<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">])</span> <span style="color: #990000">,</span> check<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check zero order forward mode</span></span>
     <span style="color: #008080">size_t</span> q<span style="color: #990000">;</span>
     <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">xq</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">yq</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     q     <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     xq<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x_0<span style="color: #990000">;</span>
     xq<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x_1<span style="color: #990000">;</span>
     xq<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x_2<span style="color: #990000">;</span>
     yq    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span>q<span style="color: #990000">,</span> xq<span style="color: #990000">);</span>
     check <span style="color: #990000">=</span> x_2 <span style="color: #990000">*</span> x_2<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>yq<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> check<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     check <span style="color: #990000">=</span> x_0 <span style="color: #990000">*</span> x_1<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>yq<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">,</span> check<span style="color: #990000">,</span>  eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// forward sparse Hessian</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">r</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">s</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">h</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          r<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          s<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     h <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">ForSparseHes</span></span><span style="color: #990000">(</span>r<span style="color: #990000">,</span> s<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check result</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vectorBool</span> <span style="font-weight: bold"><span style="color: #000000">check_h</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n <span style="color: #990000">*</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          check_h<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     check_h<span style="color: #990000">[</span> <span style="color: #993399">2</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">2</span> <span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> x_1_variable <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     check_h<span style="color: #990000">[</span><span style="color: #993399">0</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          check_h<span style="color: #990000">[</span><span style="color: #993399">1</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> <span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n <span style="color: #990000">*</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          ok <span style="color: #990000">&amp;=</span> h<span style="color: #990000">[</span> i <span style="color: #990000">]</span> <span style="color: #990000">==</span> check_h<span style="color: #990000">[</span> i <span style="color: #990000">];</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>  <span style="font-style: italic"><span style="color: #9A1900">// End empty namespace</span></span></tt></pre>
<br/>
<b><big><a name="Test with x_1 Both a Variable and a Parameter" id="Test with x_1 Both a Variable and a Parameter">Test with x_1 Both a Variable and a Parameter</a></big></b>

<pre><tt><span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">for_sparse_hes</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// test with x_1 a variable</span></span>
     ok     <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">use_atomic_for_sparse_hes</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">// test with x_1 a parameter</span></span>
     ok     <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">use_atomic_for_sparse_hes</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: example/atomic/for_sparse_hes.cpp

</body>
</html>
