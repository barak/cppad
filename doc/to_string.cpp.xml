<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>to_string: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="to_string: Example and Test"/>
<meta name="keywords" id="keywords" content=" to_string: example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_to_string.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="to_string.xml" target="_top">Prev</a>
</td><td><a href="ipopt_solve.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>to_string</option>
<option>to_string.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>utility-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>time_test</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>CppAD_vector</option>
<option>thread_alloc</option>
<option>index_sort</option>
<option>to_string</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>to_string-&gt;</option>
<option>to_string.cpp</option>
</select>
</td>
<td>to_string.cpp</td>
<td>Headings</td>
</tr></table><br/>


<center><b><big><big>to_string: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

// Examples with fundamental types
# include &lt;cppad/utility/to_string.hpp&gt;
namespace {
	template &lt;class Integer&gt;
	Integer string2int(const std::string&amp; s)
	{	Integer result = 0;
		size_t index   = 0;
		if( s[0] == '-' )
			++index;
		while( index &lt; s.size() )
			result = 10 * result + Integer( s[index++] - '0');
		if( s[0] == '-' )
			return - result;
		return result;
	}
	template &lt;class Integer&gt;
	bool integer(void)
	{	bool ok = true;
		//
		Integer max    = std::numeric_limits&lt;Integer&gt;::max();
		std::string s  = CppAD::to_string(max);
		Integer check  = string2int&lt;Integer&gt;(s);
		ok            &amp;= max == check;
		//
		Integer min       = std::numeric_limits&lt;Integer&gt;::min();
		s              = CppAD::to_string(min);
		check          = string2int&lt;Integer&gt;(s);
		ok            &amp;= min == check;
		//
		return ok;
	}
	template &lt;class Float&gt;
	bool floating(void)
	{	bool  ok  = true;
		Float eps = std::numeric_limits&lt;Float&gt;::epsilon();
		Float pi  = 4.0 * std::atan(1.);
		//
		std::string s = CppAD::to_string( pi );
		Float check    = std::atof( s.c_str() );
		ok           &amp;= std::fabs( check - pi ) &lt;= 2.0 * eps;
		//
		return ok;
	}
}

// Examples with AD types
# include &lt;cppad/cppad.hpp&gt;
namespace {
	template &lt;class Base&gt;
	bool ad_floating(void)
	{	bool  ok  = true;
		Base eps = std::numeric_limits&lt;Base&gt;::epsilon();
		Base pi  = 4.0 * std::atan(1.);
		//
		std::string s = CppAD::to_string( CppAD::<a href="ad.xml" target="_top">AD</a>&lt;Base&gt;( pi ) );
		Base check    = std::atof( s.c_str() );
		ok           &amp;= std::fabs( check - pi ) &lt;= 2.0 * eps;
		//
		return ok;
	}
}

// Test driver
bool to_string(void)
{	bool ok = true;

	ok &amp;= integer&lt;unsigned short&gt;();
	ok &amp;= integer&lt;signed int&gt;();
	ok &amp;= integer&lt;unsigned long&gt;();
# if CPPAD_USE_CPLUSPLUS_2011
	ok &amp;= integer&lt;signed long long&gt;();
# endif
	//
	ok &amp;= floating&lt;float&gt;();
	ok &amp;= floating&lt;double&gt;();
	ok &amp;= floating&lt;long double&gt;();
	//
	ok &amp;= ad_floating&lt;float&gt;();
	ok &amp;= ad_floating&lt;double&gt;();
	//
	return ok;
}

</pre>

</font></code>


<hr/>Input File: example/to_string.cpp

</body>
</html>
