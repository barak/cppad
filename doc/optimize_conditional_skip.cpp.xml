<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Example Optimization and Conditional Expressions</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Example Optimization and Conditional Expressions"/>
<meta name="keywords" id="keywords" content=" example optimization conditional expressions see also "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_optimize_conditional_skip.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="optimize_print_for.cpp.xml" target="_top">Prev</a>
</td><td><a href="optimize_nest_conditional.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>optimize</option>
<option>optimize_conditional_skip.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADFun-&gt;</option>
<option>record_adfun</option>
<option>drivers</option>
<option>Forward</option>
<option>Reverse</option>
<option>sparsity_pattern</option>
<option>sparse_derivative</option>
<option>optimize</option>
<option>abs_normal</option>
<option>FunCheck</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>optimize-&gt;</option>
<option>optimize_forward_active.cpp</option>
<option>optimize_reverse_active.cpp</option>
<option>optimize_compare_op.cpp</option>
<option>optimize_print_for.cpp</option>
<option>optimize_conditional_skip.cpp</option>
<option>optimize_nest_conditional.cpp</option>
<option>optimize_cumulative_sum.cpp</option>
</select>
</td>
<td>optimize_conditional_skip.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>See Also</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Example Optimization and Conditional Expressions</big></big></b></center>
<br/>
<b><big><a name="See Also" id="See Also">See Also</a></big></b>

<br/>
<a href="cond_exp.cpp.xml" target="_top"><span style='white-space: nowrap'>cond_exp.cpp</span></a>


<code><font color="blue">
<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">tape_size</span> <span style="color: #FF0000">{</span> <span style="color: #008080">size_t</span> n_var<span style="color: #990000">;</span> <span style="color: #008080">size_t</span> n_op<span style="color: #990000">;</span> <span style="color: #FF0000">}</span><span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Vector</span><span style="color: #990000">&gt;</span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">fun</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> std<span style="color: #990000">::</span>string<span style="color: #990000">&amp;</span> options <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span> x<span style="color: #990000">,</span> Vector<span style="color: #990000">&amp;</span> y<span style="color: #990000">,</span> tape_size<span style="color: #990000">&amp;</span> before<span style="color: #990000">,</span> tape_size<span style="color: #990000">&amp;</span> after
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">typename</span></span> <span style="color: #008080">Vector</span><span style="color: #990000">::</span><span style="color: #008080">value_type</span> scalar<span style="color: #990000">;</span>


          <span style="font-style: italic"><span style="color: #9A1900">// phantom variable with index 0 and independent variables</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// begin operator, independent variable operators and end operator</span></span>
          before<span style="color: #990000">.</span>n_var <span style="color: #990000">=</span> <span style="color: #993399">1</span> <span style="color: #990000">+</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span> before<span style="color: #990000">.</span>n_op  <span style="color: #990000">=</span> <span style="color: #993399">2</span> <span style="color: #990000">+</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          after<span style="color: #990000">.</span>n_var  <span style="color: #990000">=</span> <span style="color: #993399">1</span> <span style="color: #990000">+</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span> after<span style="color: #990000">.</span>n_op   <span style="color: #990000">=</span> <span style="color: #993399">2</span> <span style="color: #990000">+</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Create a variable that is is only used as left operand</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// in the comparision operation</span></span>
          <span style="color: #008080">scalar</span> left <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span> <span style="color: #990000">/</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          before<span style="color: #990000">.</span>n_var <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> before<span style="color: #990000">.</span>n_op <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          after<span style="color: #990000">.</span>n_var  <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> after<span style="color: #990000">.</span>n_op  <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// right operand in comparison operation</span></span>
          <span style="color: #008080">scalar</span> right  <span style="color: #990000">=</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          before<span style="color: #990000">.</span>n_var <span style="color: #990000">+=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> before<span style="color: #990000">.</span>n_op  <span style="color: #990000">+=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          after<span style="color: #990000">.</span>n_var  <span style="color: #990000">+=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> after<span style="color: #990000">.</span>n_op   <span style="color: #990000">+=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Note that the left and right operand in the CondExpLt comparison</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// are determined at this point. Hence the conditional skip operator</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// will be inserted here so that the operations mentioned below can</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// also be skipped during zero order foward mode.</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> options<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">find</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"no_conditional_skip"</span><span style="color: #990000">)</span> <span style="color: #990000">==</span> std<span style="color: #990000">::</span>string<span style="color: #990000">::</span>npos <span style="color: #990000">)</span>
               after<span style="color: #990000">.</span>n_op <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// for conditional skip operation</span></span>

          <span style="font-style: italic"><span style="color: #9A1900">// Create a variable that is only used when comparison result is true</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (can be skipped when the comparison result is false)</span></span>
          <span style="color: #008080">scalar</span> if_true <span style="color: #990000">=</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> <span style="color: #993399">5.0</span><span style="color: #990000">;</span>
          before<span style="color: #990000">.</span>n_var <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> before<span style="color: #990000">.</span>n_op <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          after<span style="color: #990000">.</span>n_var  <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> after<span style="color: #990000">.</span>n_op  <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Create two variables only used when the comparison result is false</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (can be skipped when the comparison result is true)</span></span>
          <span style="color: #008080">scalar</span> temp      <span style="color: #990000">=</span> <span style="color: #993399">5.0</span> <span style="color: #990000">+</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          <span style="color: #008080">scalar</span> if_false  <span style="color: #990000">=</span> temp <span style="color: #990000">*</span> <span style="color: #993399">3.0</span><span style="color: #990000">;</span>
          before<span style="color: #990000">.</span>n_var <span style="color: #990000">+=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span> before<span style="color: #990000">.</span>n_op <span style="color: #990000">+=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
          after<span style="color: #990000">.</span>n_var  <span style="color: #990000">+=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span> after<span style="color: #990000">.</span>n_op  <span style="color: #990000">+=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// conditional comparision is 1 / x[0] &lt; x[0]</span></span>
          <span style="color: #008080">scalar</span> value <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">CondExpLt</span></span><span style="color: #990000">(</span>left<span style="color: #990000">,</span> right<span style="color: #990000">,</span> if_true<span style="color: #990000">,</span> if_false<span style="color: #990000">);</span>
          before<span style="color: #990000">.</span>n_var <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> before<span style="color: #990000">.</span>n_op <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          after<span style="color: #990000">.</span>n_var  <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> after<span style="color: #990000">.</span>n_op  <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// results for this operation sequence</span></span>
          y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> value<span style="color: #990000">;</span>
          before<span style="color: #990000">.</span>n_var <span style="color: #990000">+=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> before<span style="color: #990000">.</span>n_op  <span style="color: #990000">+=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          after<span style="color: #990000">.</span>n_var  <span style="color: #990000">+=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> after<span style="color: #990000">.</span>n_op   <span style="color: #990000">+=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">conditional_skip</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> eps10 <span style="color: #990000">=</span> <span style="color: #993399">10.0</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
     <span style="color: #008080">size_t</span> n  <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">ax</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.5</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// range space vector</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">ay</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> <span style="color: #993399">2</span><span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// optimization options</span></span>
          std<span style="color: #990000">::</span><span style="color: #008080">string</span> options <span style="color: #990000">=</span> <span style="color: #FF0000">""</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> k <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
               options <span style="color: #990000">=</span> <span style="color: #FF0000">"no_conditional_skip"</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and start tape recording</span></span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// compute function computation</span></span>
          <span style="color: #008080">tape_size</span> before<span style="color: #990000">,</span> after<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">fun</span></span><span style="color: #990000">(</span>options<span style="color: #990000">,</span> ax<span style="color: #990000">,</span> ay<span style="color: #990000">,</span> before<span style="color: #990000">,</span> after<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// create f: x -&gt; y and stop tape recording</span></span>
          CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">,</span> ay<span style="color: #990000">);</span>
          ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size_var</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> before<span style="color: #990000">.</span>n_var<span style="color: #990000">;</span>
          ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size_op</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> before<span style="color: #990000">.</span>n_op<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Optimize the operation sequence</span></span>
          f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">optimize</span></span><span style="color: #990000">(</span>options<span style="color: #990000">);</span>
          ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size_var</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> after<span style="color: #990000">.</span>n_var<span style="color: #990000">;</span>
          ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size_op</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> after<span style="color: #990000">.</span>n_op<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Check case where result of the comparison is true (x[0] &gt; 1.0).</span></span>
          <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">check</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
          x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.75</span><span style="color: #990000">;</span>
          y    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">fun</span></span><span style="color: #990000">(</span>options<span style="color: #990000">,</span> x<span style="color: #990000">,</span> check<span style="color: #990000">,</span> before<span style="color: #990000">,</span> after<span style="color: #990000">);</span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> check<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> eps10<span style="color: #990000">,</span> eps10<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> options <span style="color: #990000">==</span> <span style="color: #FF0000">""</span> <span style="color: #990000">)</span>
               ok  <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">number_skip</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
               ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">number_skip</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// Check case where result of the comparision is false (x[0] &lt;= 1.0)</span></span>
          x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.5</span><span style="color: #990000">;</span>
          y    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">fun</span></span><span style="color: #990000">(</span>options<span style="color: #990000">,</span> x<span style="color: #990000">,</span> check<span style="color: #990000">,</span> before<span style="color: #990000">,</span> after<span style="color: #990000">);</span>
          ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> check<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> eps10<span style="color: #990000">,</span> eps10<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> options <span style="color: #990000">==</span> <span style="color: #FF0000">""</span> <span style="color: #990000">)</span>
               ok  <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">number_skip</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
               ok <span style="color: #990000">&amp;=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">number_skip</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: example/optimize/conditional_skip.cpp

</body>
</html>
