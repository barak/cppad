<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>AD Boolean Functions: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="AD Boolean Functions: Example and Test"/>
<meta name="keywords" id="keywords" content=" ad boolean functions: example test bool "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_bool_fun.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="boolfun.xml" target="_top">Prev</a>
</td><td><a href="parvar.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>BoolValued</option>
<option>BoolFun</option>
<option>bool_fun.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>ad_ctor</option>
<option>ad_assign</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>BoolValued-&gt;</option>
<option>Compare</option>
<option>NearEqualExt</option>
<option>BoolFun</option>
<option>ParVar</option>
<option>EqualOpSeq</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>BoolFun-&gt;</option>
<option>bool_fun.cpp</option>
</select>
</td>
<td>bool_fun.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>AD Boolean Functions: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;complex&gt;</span>


<span style="font-style: italic"><span style="color: #9A1900">// define abbreviation for double precision complex</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> std<span style="color: #990000">::</span><span style="color: #008080">complex&lt;double&gt;</span> Complex<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-style: italic"><span style="color: #9A1900">// a unary bool function with Complex argument</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">IsReal</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">Complex</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">imag</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span> <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// a binary bool function with Complex arguments</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">AbsGeq</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">Complex</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">Complex</span> <span style="color: #990000">&amp;</span>y<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">double</span> axsq <span style="color: #990000">=</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">real</span></span><span style="color: #990000">()</span> <span style="color: #990000">*</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">real</span></span><span style="color: #990000">()</span> <span style="color: #990000">+</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">imag</span></span><span style="color: #990000">()</span> <span style="color: #990000">*</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">imag</span></span><span style="color: #990000">();</span>
          <span style="color: #009900">double</span> aysq <span style="color: #990000">=</span> y<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">real</span></span><span style="color: #990000">()</span> <span style="color: #990000">*</span> y<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">real</span></span><span style="color: #990000">()</span> <span style="color: #990000">+</span> y<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">imag</span></span><span style="color: #990000">()</span> <span style="color: #990000">*</span> y<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">imag</span></span><span style="color: #990000">();</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> axsq <span style="color: #990000">&gt;=</span> aysq<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Create version of IsReal with AD&lt;Complex&gt; argument</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// inside of namespace and outside of any other function.</span></span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_BOOL_UNARY</span></span><span style="color: #990000">(</span>Complex<span style="color: #990000">,</span> IsReal<span style="color: #990000">)</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Create version of AbsGeq with AD&lt;Complex&gt; arguments</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// inside of namespace and outside of any other function.</span></span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_BOOL_BINARY</span></span><span style="color: #990000">(</span>Complex<span style="color: #990000">,</span> AbsGeq<span style="color: #990000">)</span>

<span style="color: #FF0000">}</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">BoolFun</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;Complex&gt;</span> x <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">Complex</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">.,</span>  <span style="color: #993399">0</span><span style="color: #990000">.);</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;Complex&gt;</span> y <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">Complex</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">.,</span>  <span style="color: #993399">1</span><span style="color: #990000">.);</span>

     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">IsReal</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">!</span> <span style="font-weight: bold"><span style="color: #000000">AbsGeq</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> y<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: example/general/bool_fun.cpp

</body>
</html>
