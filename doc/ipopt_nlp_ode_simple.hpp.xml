<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>ODE Fitting Using Simple Representation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="ODE Fitting Using Simple Representation"/>
<meta name="keywords" id="keywords" content=" ode fitting using simple representation cppad_ipopt_nlp example source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ipopt_nlp_ode_simple.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="ipopt_nlp_ode_simple.xml" target="_top">Prev</a>
</td><td><a href="ipopt_nlp_ode_fast.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>cppad_ipopt_nlp</option>
<option>ipopt_nlp_ode</option>
<option>ipopt_nlp_ode_simple</option>
<option>ipopt_nlp_ode_simple.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cppad_ipopt_nlp-&gt;</option>
<option>ipopt_nlp_get_started.cpp</option>
<option>ipopt_nlp_ode</option>
<option>ipopt_ode_speed.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ipopt_nlp_ode-&gt;</option>
<option>ipopt_nlp_ode_problem</option>
<option>ipopt_nlp_ode_simple</option>
<option>ipopt_nlp_ode_fast</option>
<option>ipopt_nlp_ode_run.hpp</option>
<option>ipopt_nlp_ode_check.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ipopt_nlp_ode_simple-&gt;</option>
<option>ipopt_nlp_ode_simple.hpp</option>
</select>
</td>
<td>ipopt_nlp_ode_simple.hpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>ODE Fitting Using Simple Representation</big></big></b></center>
<code><font color="blue"><pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"ode_problem.hpp"</span>

<span style="font-style: italic"><span style="color: #9A1900">// define in the empty namespace</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> <span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> cppad_ipopt<span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">FG_simple</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> cppad_ipopt_fg_info
     <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span>
          <span style="color: #009900">bool</span>       retape_<span style="color: #990000">;</span>
          <span style="color: #008080">SizeVector</span> N_<span style="color: #990000">;</span>
          <span style="color: #008080">SizeVector</span> S_<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
          <span style="font-style: italic"><span style="color: #9A1900">// derived class part of constructor</span></span>
          <span style="font-weight: bold"><span style="color: #000000">FG_simple</span></span><span style="color: #990000">(</span><span style="color: #009900">bool</span> retape_in<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> SizeVector<span style="color: #990000">&amp;</span> N<span style="color: #990000">)</span>
          <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #000000">retape_</span></span> <span style="color: #990000">(</span>retape_in<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">N_</span></span><span style="color: #990000">(</span>N<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> N_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
               S_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span> N<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
               S_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> N_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span> i<span style="color: #990000">++)</span>
                    S_<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> S_<span style="color: #990000">[</span>i<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> N_<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// Evaluation of the objective f(x), and constraints g(x)</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// using an Algorithmic Differentiation (AD) class.</span></span>
          <span style="color: #008080">ADVector</span> <span style="font-weight: bold"><span style="color: #000000">eval_r</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> not_used<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> ADVector<span style="color: #990000">&amp;</span>  x<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">count_eval_r</span></span><span style="color: #990000">();</span>

               <span style="font-style: italic"><span style="color: #9A1900">// temporary indices</span></span>
               <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// # of components of x corresponding to values for y</span></span>
               <span style="color: #008080">size_t</span> ny_inx <span style="color: #990000">=</span> <span style="color: #990000">(</span>S_<span style="color: #990000">[</span>Nz<span style="color: #990000">]</span> <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> Ny<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// # of constraints (range dimension of g)</span></span>
               <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> ny_inx<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// # of components in x (domain dimension for f and g)</span></span>
               <span style="font-weight: bold"><span style="color: #000000">assert</span></span> <span style="color: #990000">(</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> ny_inx <span style="color: #990000">+</span> Na <span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// vector for return value</span></span>
               <span style="color: #008080">ADVector</span> <span style="font-weight: bold"><span style="color: #000000">fg</span></span><span style="color: #990000">(</span>m <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// vector of parameters</span></span>
               <span style="color: #008080">ADVector</span> <span style="font-weight: bold"><span style="color: #000000">a</span></span><span style="color: #990000">(</span>Na<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> Na<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                    a<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>ny_inx <span style="color: #990000">+</span> j<span style="color: #990000">];</span>
               <span style="font-style: italic"><span style="color: #9A1900">// vector for value of y(t)</span></span>
               <span style="color: #008080">ADVector</span> <span style="font-weight: bold"><span style="color: #000000">y</span></span><span style="color: #990000">(</span>Ny<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// objective function -------------------------------</span></span>
               fg<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> Nz<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> Ny<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
                         y<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>Ny<span style="color: #990000">*</span>S_<span style="color: #990000">[</span>k<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> j<span style="color: #990000">];</span>
                    fg<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+=</span> eval_H<span style="color: #990000">&lt;</span>ADNumber<span style="color: #990000">&gt;(</span>k<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">,</span> y<span style="color: #990000">,</span> a<span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
               <span style="font-style: italic"><span style="color: #9A1900">// initial condition ---------------------------------</span></span>
               <span style="color: #008080">ADVector</span> F <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">eval_F</span></span><span style="color: #990000">(</span>a<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> Ny<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     y<span style="color: #990000">[</span>j<span style="color: #990000">]</span>    <span style="color: #990000">=</span> x<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
                    fg<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">+</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> y<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">-</span> F<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
               <span style="color: #FF0000">}</span>
               <span style="font-style: italic"><span style="color: #9A1900">// trapezoidal approximation --------------------------</span></span>
               <span style="color: #008080">ADVector</span> <span style="font-weight: bold"><span style="color: #000000">ym</span></span><span style="color: #990000">(</span>Ny<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">G</span></span><span style="color: #990000">(</span>Ny<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">Gm</span></span><span style="color: #990000">(</span>Ny<span style="color: #990000">);</span>
               G <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">eval_G</span></span><span style="color: #990000">(</span>y<span style="color: #990000">,</span> a<span style="color: #990000">);</span>
               <span style="color: #008080">ADNumber</span> dy<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> Nz<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// interval between data points</span></span>
                    <span style="color: #008080">Number</span> T  <span style="color: #990000">=</span> s<span style="color: #990000">[</span>k<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">-</span> s<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
                    <span style="font-style: italic"><span style="color: #9A1900">// integration step size</span></span>
                    <span style="color: #008080">Number</span> dt <span style="color: #990000">=</span> T <span style="color: #990000">/</span> <span style="font-weight: bold"><span style="color: #000000">Number</span></span><span style="color: #990000">(</span> N_<span style="color: #990000">[</span>k<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> N_<span style="color: #990000">[</span>k<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">];</span> j<span style="color: #990000">++)</span>
                    <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> Index <span style="color: #990000">=</span> <span style="color: #990000">(</span>j <span style="color: #990000">+</span> S_<span style="color: #990000">[</span>k<span style="color: #990000">])</span> <span style="color: #990000">*</span> Ny<span style="color: #990000">;</span>
                         <span style="font-style: italic"><span style="color: #9A1900">// y(t) at end of last step</span></span>
                         ym <span style="color: #990000">=</span> y<span style="color: #990000">;</span>
                         <span style="font-style: italic"><span style="color: #9A1900">// G(y, a) at end of last step</span></span>
                         Gm <span style="color: #990000">=</span> G<span style="color: #990000">;</span>
                         <span style="font-style: italic"><span style="color: #9A1900">// value of y(t) at end of this step</span></span>
                         <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> Ny<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                              y<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>Ny <span style="color: #990000">+</span> Index <span style="color: #990000">+</span> i<span style="color: #990000">];</span>
                         <span style="font-style: italic"><span style="color: #9A1900">// G(y, a) at end of this step</span></span>
                         G <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">eval_G</span></span><span style="color: #990000">(</span>y<span style="color: #990000">,</span> a<span style="color: #990000">);</span>
                         <span style="font-style: italic"><span style="color: #9A1900">// trapezoidal approximation residual</span></span>
                         <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> Ny<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                         <span style="color: #FF0000">{</span>     dy <span style="color: #990000">=</span> <span style="color: #990000">(</span>G<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">+</span> Gm<span style="color: #990000">[</span>i<span style="color: #990000">])</span> <span style="color: #990000">*</span> dt <span style="color: #990000">/</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
                              fg<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">+</span>Ny<span style="color: #990000">+</span>Index<span style="color: #990000">+</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span>
                                   y<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">-</span> ym<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">-</span> dy<span style="color: #990000">;</span>
                         <span style="color: #FF0000">}</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> fg<span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// The operations sequence for r_eval does not depend on u,</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// hence retape = false should work and be faster.</span></span>
          <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">retape</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> retape_<span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span><span style="color: #990000">;</span>

<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: cppad_ipopt/example/ode_simple.hpp

</body>
</html>
