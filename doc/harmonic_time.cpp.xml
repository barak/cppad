<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Timing Test of Multi-Threaded Summation of 1/i</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Timing Test of Multi-Threaded Summation of 1/i"/>
<meta name="keywords" id="keywords" content=" timing test multi-threaded summation 1/i harmonic_time multi_thread speed syntax purpose ok time_out test_time num_threads mega_sum source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_harmonic_time.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="harmonic.cpp.xml" target="_top">Prev</a>
</td><td><a href="harmonic_work.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>harmonic.cpp</option>
<option>harmonic_time.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
<option>simple_ad_openmp.cpp</option>
<option>simple_ad_bthread.cpp</option>
<option>simple_ad_pthread.cpp</option>
<option>team_example.cpp</option>
<option>harmonic.cpp</option>
<option>multi_newton.cpp</option>
<option>team_thread.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>harmonic.cpp-&gt;</option>
<option>harmonic_time.cpp</option>
<option>harmonic_work.cpp</option>
</select>
</td>
<td>harmonic_time.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>ok</option>
<option>time_out</option>
<option>test_time</option>
<option>num_threads</option>
<option>mega_sum</option>
<option>Source</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Timing Test of Multi-Threaded Summation of 1/i</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;harmonic_time(</span></font><i><font color="black"><span style='white-space: nowrap'>time_out</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>mega_sum</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
Runs a correctness and timing test for a multi-threaded
computation of the summation that defines the harmonic series

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mn>1</mn>
<mo stretchy="false">+</mo>
<mn>1</mn>
<mo stretchy="false">/</mo>
<mn>2</mn>
<mo stretchy="false">+</mo>
<mn>1</mn>
<mo stretchy="false">/</mo>
<mn>3</mn>
<mo stretchy="false">+</mo>
<mo stretchy="false">.</mo>
<mo stretchy="false">.</mo>
<mo stretchy="false">.</mo>
<mo stretchy="false">+</mo>
<mn>1</mn>
<mo stretchy="false">/</mo>
<mi mathvariant='italic'>n</mi>
</mrow></math>

This routine must be called in sequential execution mode,
even though <a href="ta_in_parallel.xml" target="_top"><span style='white-space: nowrap'>in_parallel</span></a>
 may return true.

<br/>
<br/>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br/>
This return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
If it is true,
<code><font color="blue">harmonic_time</font></code> passed the correctness test.
Otherwise it is false.

<br/>
<br/>
<b><big><a name="time_out" id="time_out">time_out</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&amp;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>time_out</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
The input value of the argument does not matter.
Upon return it is the number of wall clock seconds required for
to compute the
<a href="harmonic_time.cpp.xml#Purpose" target="_top"><span style='white-space: nowrap'>summation</span></a>
.

<br/>
<br/>
<b><big><a name="test_time" id="test_time">test_time</a></big></b>
<br/>
Is the minimum amount of wall clock time that the test should take.
The number of repeats for the test will be increased until this time
is reached.
The reported 
<code><i><font color="black"><span style='white-space: nowrap'>time_out</span></font></i></code>
 is the total wall clock time divided by the
number of repeats.

<br/>
<br/>
<b><big><a name="num_threads" id="num_threads">num_threads</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
It specifies the number of threads that are available for this test.
If it is zero, the test is run without the multi-threading environment and

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1&#xA0;==&#xA0;CppAD::thread_alloc::num_threads()<br/>
</span></font></code>
when <code><font color="blue">harmonic_time</font></code> is called.
If it is non-zero, the test is run with the multi-threading and

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;CppAD::thread_alloc::num_threads()<br/>
</span></font></code>
when <code><font color="blue">harmonic_time</font></code> is called.

<br/>
<br/>
<b><big><a name="mega_sum" id="mega_sum">mega_sum</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&amp;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>mega_sum</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
and is greater than zero.
The value 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 in the
<a href="harmonic_time.cpp.xml#Purpose" target="_top"><span style='white-space: nowrap'>summation</span></a>
.
is equal to 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msup><mn>10</mn>
<mn>6</mn>
</msup>
</mrow></math>

 times 
<code><i><font color="black"><span style='white-space: nowrap'>mega_sum</span></font></i></code>
.

<br/>
<br/>
<b><big><a name="Source" id="Source">Source</a></big></b>

<code><font color="blue">
<pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;omp.h&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cstring&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;limits&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;vector&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;iostream&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cstdlib&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;algorithm&gt;</span>

<span style="font-style: italic"><span style="color: #9A1900">// Note there is no mention of parallel mode in the documentation for</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// speed_test (so it is safe to use without special consideration).</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/time_test.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"harmonic.hpp"</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// empty namespace</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// value of num_threads in previous call to harmonic_time.</span></span>
     <span style="color: #008080">size_t</span> num_threads_<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// value of mega_sum in previous call to harmonic_time.</span></span>
     <span style="color: #008080">size_t</span> mega_sum_<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// value of sum resulting from most recent call to test_once</span></span>
     <span style="color: #009900">double</span> sum_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>

     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">test_once</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> mega_sum_ <span style="color: #990000">&lt;</span> <span style="color: #993399">1</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"harmonic_time: mega_sum &lt; 1"</span> <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span>endl<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #000000">exit</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="color: #008080">size_t</span> num_sum <span style="color: #990000">=</span> mega_sum_ <span style="color: #990000">*</span> <span style="color: #993399">1000000</span><span style="color: #990000">;</span>
          <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">harmonic</span></span><span style="color: #990000">(</span>sum_<span style="color: #990000">,</span> num_sum<span style="color: #990000">,</span> num_threads_<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> ok <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"harmonic: error"</span> <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span>endl<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #000000">exit</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">test_repeat</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> repeat<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> repeat<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="font-weight: bold"><span style="color: #000000">test_once</span></span><span style="color: #990000">();</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// end empty namespace</span></span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">harmonic_time</span></span><span style="color: #990000">(</span>
     <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> time_out<span style="color: #990000">,</span> <span style="color: #009900">double</span> test_time<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> num_threads<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> mega_sum<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> std<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// arguments passed to harmonic_time</span></span>
     num_threads_ <span style="color: #990000">=</span> num_threads<span style="color: #990000">;</span>
     mega_sum_    <span style="color: #990000">=</span> mega_sum<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// convert zero to actual number of threads</span></span>
     num_threads  <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">(</span>num_threads_<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">));</span>

     <span style="font-style: italic"><span style="color: #9A1900">// expect number of threads to already be set up</span></span>
     ok <span style="color: #990000">&amp;=</span> num_threads <span style="color: #990000">==</span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">num_threads</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// run the test case and set the time return value</span></span>
     time_out <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">time_test</span></span><span style="color: #990000">(</span>test_repeat<span style="color: #990000">,</span> test_time<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Correctness check</span></span>
     <span style="color: #009900">double</span> eps   <span style="color: #990000">=</span> mega_sum_ <span style="color: #990000">*</span> <span style="color: #993399">1e3</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>
     <span style="color: #008080">size_t</span> i     <span style="color: #990000">=</span> mega_sum_ <span style="color: #990000">*</span> <span style="color: #993399">1000000</span><span style="color: #990000">;</span>
     <span style="color: #009900">double</span> check <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>i<span style="color: #990000">)</span>
          check <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span> <span style="color: #990000">/</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>i<span style="color: #990000">--);</span>
     ok <span style="color: #990000">&amp;=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>sum_ <span style="color: #990000">-</span> check<span style="color: #990000">)</span> <span style="color: #990000">&lt;=</span> eps<span style="color: #990000">;</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: multi_thread/harmonic_time.cpp

</body>
</html>
