<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Fadbad Speed: Gradient of Determinant Using Lu Factorization</title>
<meta name="description" id="description" content="Fadbad Speed: Gradient of Determinant Using Lu Factorization"/>
<meta name="keywords" id="keywords" content=" link_det_lu fadbad speed lu matrix factor "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_fadbad_det_lu.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="fadbad_det_minor.cpp.xml" target="_top">Prev</a>
</td><td><a href="fadbad_mat_mul.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_fadbad</option>
<option>fadbad_det_lu.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>library</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_fadbad-&gt;</option>
<option>fadbad_det_minor.cpp</option>
<option>fadbad_det_lu.cpp</option>
<option>fadbad_mat_mul.cpp</option>
<option>fadbad_ode.cpp</option>
<option>fadbad_poly.cpp</option>
<option>fadbad_sparse_hessian.cpp</option>
<option>fadbad_sparse_jacobian.cpp</option>
</select>
</td>
<td>fadbad_det_lu.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Specifications</option>
<option>Implementation</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>Fadbad Speed: Gradient of Determinant Using Lu Factorization</big></big></b></center>
<br/>
<b><big><a name="Specifications" id="Specifications">Specifications</a></big></b>
<br/>
See <a href="link_det_lu.xml" target="_top"><span style='white-space: nowrap'>link_det_lu</span></a>
.

<br/>
<br/>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>

<code><font color='blue'><pre style='display:inline'> 
# include &lt;FADBAD++/badiff.h&gt;
# include &lt;cppad/speed/det_by_lu.hpp&gt;
# include &lt;cppad/speed/uniform_01.hpp&gt;
# include &lt;cppad/vector.hpp&gt;

// list of possible options
extern bool global_memory, global_onetape, global_atomic, global_optimize;
extern bool global_boolsparsity;

bool link_det_lu(
	size_t                     size     , 
	size_t                     repeat   , 
	CppAD::vector&lt;double&gt;     &amp;matrix   ,
	CppAD::vector&lt;double&gt;     &amp;gradient )
{
	// speed test global option values
	if( global_onetape || global_atomic || global_boolsparsity )
		return false;
	if( global_memory || global_optimize )
		return false;
	// -----------------------------------------------------
	// setup
	//
	// object for computing determinant
	typedef fadbad::B&lt;double&gt;       ADScalar; 
	typedef CppAD::vector&lt;ADScalar&gt; ADVector; 
	CppAD::det_by_lu&lt;ADScalar&gt;      Det(size);

	size_t i;                // temporary index
	size_t m = 1;            // number of dependent variables
	size_t n = size * size;  // number of independent variables
	ADScalar   detA;         // AD value of the determinant
	ADVector   A(n);         // AD version of matrix 
	
	// ------------------------------------------------------
	while(repeat--)
       {	// get the next matrix
		CppAD::uniform_01(n, matrix);

		// set independent variable values
		for(i = 0; i &lt; n; i++)
			A[i] = matrix[i];

		// compute the determinant
		detA = Det(A);

		// create function object f : A -&gt; detA
		detA.diff(0, m);  // index 0 of m dependent variables

		// evaluate and return gradient using reverse mode
		for(i =0; i &lt; n; i++)
			gradient[i] = A[i].d(0); // partial detA w.r.t A[i]
	}
	// ---------------------------------------------------------
	return true;
}
</pre></font></code>


<hr/>Input File: speed/fadbad/det_lu.cpp

</body>
</html>
