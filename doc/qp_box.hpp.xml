<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>qp_box Source Code</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="qp_box Source Code"/>
<meta name="keywords" id="keywords" content=" qp_box source code "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_qp_box.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="qp_box.cpp.xml" target="_top">Prev</a>
</td><td><a href="abs_min_quad.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>abs_normal</option>
<option>qp_box</option>
<option>qp_box.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>record_adfun</option>
<option>drivers</option>
<option>Forward</option>
<option>Reverse</option>
<option>sparsity_pattern</option>
<option>sparse_derivative</option>
<option>optimize</option>
<option>abs_normal</option>
<option>FunCheck</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>abs_normal-&gt;</option>
<option>abs_normal_fun</option>
<option>abs_print_mat</option>
<option>abs_eval</option>
<option>simplex_method</option>
<option>lp_box</option>
<option>abs_min_linear</option>
<option>min_nso_linear</option>
<option>qp_interior</option>
<option>qp_box</option>
<option>abs_min_quad</option>
<option>min_nso_quad</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>qp_box-&gt;</option>
<option>qp_box.cpp</option>
<option>qp_box.hpp</option>
</select>
</td>
<td>qp_box.hpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>qp_box Source Code</big></big></b></center>
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// BEGIN_CPPAD_NAMESPACE</span></span>

<span style="font-style: italic"><span style="color: #9A1900">// BEGIN PROTOTYPE</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Vector</span><span style="color: #990000">&gt;</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">qp_box</span></span><span style="color: #990000">(</span>
     <span style="color: #008080">size_t</span>        level   <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span> a       <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span> b       <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span> c       <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span> C       <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span> g       <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span> G       <span style="color: #990000">,</span>
     <span style="color: #009900">double</span>        epsilon <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>        maxitr  <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> Vector<span style="color: #990000">&amp;</span> xin     <span style="color: #990000">,</span>
     Vector<span style="color: #990000">&amp;</span>       xout    <span style="color: #990000">)</span>
<span style="font-style: italic"><span style="color: #9A1900">// END PROTOTYPE</span></span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">double</span> inf <span style="color: #990000">=</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">infinity</span></span><span style="color: #990000">();</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> a<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> c<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>level <span style="color: #990000">&lt;=</span> <span style="color: #993399">2</span><span style="color: #990000">,</span> <span style="color: #FF0000">"qp_interior: level is greater than 2"</span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>b<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> n<span style="color: #990000">,</span> <span style="color: #FF0000">"qp_box: size of b is not n"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>C<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> m <span style="color: #990000">*</span> n<span style="color: #990000">,</span> <span style="color: #FF0000">"qp_box: size of C is not m * n"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>g<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> n<span style="color: #990000">,</span> <span style="color: #FF0000">"qp_box: size of g is not n"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>G<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> n <span style="color: #990000">*</span> n<span style="color: #990000">,</span> <span style="color: #FF0000">"qp_box: size of G is not n * n"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> level <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span>cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"start qp_box</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span><span style="color: #990000">;</span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_print_mat</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"a"</span><span style="color: #990000">,</span> n<span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span> a<span style="color: #990000">);</span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_print_mat</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"b"</span><span style="color: #990000">,</span> n<span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span> b<span style="color: #990000">);</span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_print_mat</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"c"</span><span style="color: #990000">,</span> m<span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span> c<span style="color: #990000">);</span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_print_mat</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"C"</span><span style="color: #990000">,</span> m<span style="color: #990000">,</span> n<span style="color: #990000">,</span> C<span style="color: #990000">);</span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_print_mat</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"g"</span><span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span> n<span style="color: #990000">,</span> g<span style="color: #990000">);</span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_print_mat</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"G"</span><span style="color: #990000">,</span> n<span style="color: #990000">,</span> n<span style="color: #990000">,</span> G<span style="color: #990000">);</span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_print_mat</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"xin"</span><span style="color: #990000">,</span> n<span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span> xin<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// count number of lower and upper limits</span></span>
     <span style="color: #008080">size_t</span> n_limit <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>G<span style="color: #990000">[</span>j <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">&gt;=</span> <span style="color: #993399">0.0</span><span style="color: #990000">,</span> <span style="color: #FF0000">"qp_box: G_{j,j} &lt; 0.0"</span><span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">-</span>inf <span style="color: #990000">&lt;</span> a<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">)</span>
               <span style="color: #990000">++</span>n_limit<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> b<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">&lt;</span> inf <span style="color: #990000">)</span>
               <span style="color: #990000">++</span>n_limit<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// C_int and c_int define the extended constraints</span></span>
     <span style="color: #008080">Vector</span> <span style="font-weight: bold"><span style="color: #000000">C_int</span></span><span style="color: #990000">((</span>m <span style="color: #990000">+</span> n_limit<span style="color: #990000">)</span> <span style="color: #990000">*</span> n <span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">c_int</span></span><span style="color: #990000">(</span>m <span style="color: #990000">+</span> n_limit<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>C_int<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">());</span> i<span style="color: #990000">++)</span>
          C_int<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// put C * x + c &lt;= 0 in C_int, c_int</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     c_int<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> c<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               C_int<span style="color: #990000">[</span>i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> C<span style="color: #990000">[</span>i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// put I * x - b &lt;= 0 in C_int, c_int</span></span>
     <span style="color: #008080">size_t</span> i_limit <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> b<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">&lt;</span> inf <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     c_int<span style="color: #990000">[</span>m <span style="color: #990000">+</span> i_limit<span style="color: #990000">]</span>            <span style="color: #990000">=</span> <span style="color: #990000">-</span> b<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          C_int<span style="color: #990000">[(</span>m <span style="color: #990000">+</span> i_limit<span style="color: #990000">)</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">]</span>  <span style="color: #990000">=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
          <span style="color: #990000">++</span>i_limit<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// put a - I * x &lt;= 0 in C_int, c_int</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">-</span>inf <span style="color: #990000">&lt;</span> a<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     c_int<span style="color: #990000">[</span>m <span style="color: #990000">+</span> i_limit<span style="color: #990000">]</span>           <span style="color: #990000">=</span> a<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          C_int<span style="color: #990000">[(</span>m <span style="color: #990000">+</span> i_limit<span style="color: #990000">)</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #990000">-</span><span style="color: #993399">1.0</span><span style="color: #990000">;</span>
          <span style="color: #990000">++</span>i_limit<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="color: #008080">Vector</span> <span style="font-weight: bold"><span style="color: #000000">yout</span></span><span style="color: #990000">(</span>m <span style="color: #990000">+</span> n_limit<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">sout</span></span><span style="color: #990000">(</span>m <span style="color: #990000">+</span> n_limit<span style="color: #990000">);</span>
     <span style="color: #008080">size_t</span> level_int <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> level <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">)</span>
          level_int <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">qp_interior</span></span><span style="color: #990000">(</span> level_int<span style="color: #990000">,</span>
          c_int<span style="color: #990000">,</span> C_int<span style="color: #990000">,</span> g<span style="color: #990000">,</span> G<span style="color: #990000">,</span> epsilon<span style="color: #990000">,</span> maxitr<span style="color: #990000">,</span> xin<span style="color: #990000">,</span> xout<span style="color: #990000">,</span> yout<span style="color: #990000">,</span> sout
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> level <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> level <span style="color: #990000">&lt;</span> <span style="color: #993399">2</span> <span style="color: #990000">)</span>
               CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_print_mat</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"xout"</span><span style="color: #990000">,</span> n<span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span> xout<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> ok <span style="color: #990000">)</span>
               std<span style="color: #990000">::</span>cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"end q_box: ok = true</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
               std<span style="color: #990000">::</span>cout <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"end q_box: ok = false</span><span style="color: #CC33CC">\n</span><span style="color: #FF0000">"</span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// END_CPPAD_NAMESPACE</span></span></tt></pre>

<hr/>Input File: example/abs_normal/qp_box.omh

</body>
</html>
