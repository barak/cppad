<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Adolc Speed: Matrix Multiplication</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Adolc Speed: Matrix Multiplication"/>
<meta name="keywords" id="keywords" content=" adolc speed: matrix multiplication link_mat_mul speed multiply specifications implementation "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_adolc_mat_mul.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="adolc_det_lu.cpp.xml" target="_top">Prev</a>
</td><td><a href="adolc_ode.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_adolc</option>
<option>adolc_mat_mul.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_adolc-&gt;</option>
<option>adolc_det_minor.cpp</option>
<option>adolc_det_lu.cpp</option>
<option>adolc_mat_mul.cpp</option>
<option>adolc_ode.cpp</option>
<option>adolc_poly.cpp</option>
<option>adolc_sparse_hessian.cpp</option>
<option>adolc_sparse_jacobian.cpp</option>
<option>adolc_alloc_mat</option>
</select>
</td>
<td>adolc_mat_mul.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Specifications</option>
<option>Implementation</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Adolc Speed: Matrix Multiplication</big></big></b></center>
<br/>
<b><big><a name="Specifications" id="Specifications">Specifications</a></big></b>
<br/>
See <a href="link_mat_mul.xml" target="_top"><span style='white-space: nowrap'>link_mat_mul</span></a>
.

<br/>
<br/>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>


<pre><tt><span style="font-style: italic"><span style="color: #9A1900">// suppress conversion warnings before other includes</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/wno_conversion.hpp&gt;</span>
<span style="font-style: italic"><span style="color: #9A1900">//</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;adolc/adolc.h&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/vector.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/speed/mat_sum_sq.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/speed/uniform_01.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/vector.hpp&gt;</span>

<span style="font-style: italic"><span style="color: #9A1900">// list of possible options</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;map&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> std<span style="color: #990000">::</span><span style="color: #008080">map&lt;std::string, bool&gt;</span> global_option<span style="color: #990000">;</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">link_mat_mul</span></span><span style="color: #990000">(</span>
     <span style="color: #008080">size_t</span>                           size     <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>                           repeat   <span style="color: #990000">,</span>
     CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>           x        <span style="color: #990000">,</span>
     CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>           z        <span style="color: #990000">,</span>
     CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>           dz       <span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>
     <span style="font-style: italic"><span style="color: #9A1900">// speed test global option values</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"memory"</span><span style="color: #990000">]</span> <span style="color: #990000">||</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"atomic"</span><span style="color: #990000">]</span> <span style="color: #990000">||</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"optimize"</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// setup</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="color: #008080">adouble</span>    ADScalar<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> ADScalar<span style="color: #990000">*</span>  ADVector<span style="color: #990000">;</span>

     <span style="color: #009900">int</span> tag  <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>         <span style="font-style: italic"><span style="color: #9A1900">// tape identifier</span></span>
     <span style="color: #009900">int</span> m    <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>         <span style="font-style: italic"><span style="color: #9A1900">// number of dependent variables</span></span>
     <span style="color: #009900">int</span> n    <span style="color: #990000">=</span> size<span style="color: #990000">*</span>size<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// number of independent variables</span></span>
     <span style="color: #009900">double</span> f<span style="color: #990000">;</span>             <span style="font-style: italic"><span style="color: #9A1900">// function value</span></span>
     <span style="color: #009900">int</span> j<span style="color: #990000">;</span>                <span style="font-style: italic"><span style="color: #9A1900">// temporary index</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// set up for thread_alloc memory allocator (fast and checks for leaks)</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// the allocator</span></span>
     <span style="color: #008080">size_t</span> capacity<span style="color: #990000">;</span>           <span style="font-style: italic"><span style="color: #9A1900">// capacity of an allocation</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// AD domain space vector</span></span>
     <span style="color: #008080">ADVector</span> X <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span>create_array<span style="color: #990000">&lt;</span>ADScalar<span style="color: #990000">&gt;(</span><span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> capacity<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Product matrix</span></span>
     <span style="color: #008080">ADVector</span> Y <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span>create_array<span style="color: #990000">&lt;</span>ADScalar<span style="color: #990000">&gt;(</span><span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> capacity<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// AD range space vector</span></span>
     <span style="color: #008080">ADVector</span> Z <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span>create_array<span style="color: #990000">&lt;</span>ADScalar<span style="color: #990000">&gt;(</span><span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> capacity<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// vector with matrix value</span></span>
     <span style="color: #009900">double</span><span style="color: #990000">*</span> mat <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span>create_array<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span><span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> capacity<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// vector of reverse mode weights</span></span>
     <span style="color: #009900">double</span><span style="color: #990000">*</span> u  <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span>create_array<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span><span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> capacity<span style="color: #990000">);</span>
     u<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// gradient</span></span>
     <span style="color: #009900">double</span><span style="color: #990000">*</span> grad <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span>create_array<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span><span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> capacity<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"onetape"</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>repeat<span style="color: #990000">--)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// choose a matrix</span></span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">uniform_01</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> mat<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables</span></span>
          <span style="color: #009900">int</span> keep <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// keep forward mode results</span></span>
          <span style="font-weight: bold"><span style="color: #000000">trace_on</span></span><span style="color: #990000">(</span>tag<span style="color: #990000">,</span> keep<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               X<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">&lt;&lt;=</span> mat<span style="color: #990000">[</span>j<span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// do computations</span></span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">mat_sum_sq</span></span><span style="color: #990000">(</span>size<span style="color: #990000">,</span> X<span style="color: #990000">,</span> Y<span style="color: #990000">,</span> Z<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// create function object f : X -&gt; Z</span></span>
          Z<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">&gt;&gt;=</span> f<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">trace_off</span></span><span style="color: #990000">();</span>

          <span style="font-style: italic"><span style="color: #9A1900">// evaluate and return gradient using reverse mode</span></span>
          <span style="font-weight: bold"><span style="color: #000000">fos_reverse</span></span><span style="color: #990000">(</span>tag<span style="color: #990000">,</span> m<span style="color: #990000">,</span> n<span style="color: #990000">,</span> u<span style="color: #990000">,</span> grad<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// choose a matrix</span></span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">uniform_01</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> mat<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables</span></span>
          <span style="color: #009900">int</span> keep <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// do not keep forward mode results</span></span>
          <span style="font-weight: bold"><span style="color: #000000">trace_on</span></span><span style="color: #990000">(</span>tag<span style="color: #990000">,</span> keep<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               X<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">&lt;&lt;=</span> mat<span style="color: #990000">[</span>j<span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// do computations</span></span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">mat_sum_sq</span></span><span style="color: #990000">(</span>size<span style="color: #990000">,</span> X<span style="color: #990000">,</span> Y<span style="color: #990000">,</span> Z<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// create function object f : X -&gt; Z</span></span>
          Z<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">&gt;&gt;=</span> f<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">trace_off</span></span><span style="color: #990000">();</span>

          <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>repeat<span style="color: #990000">--)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// choose a matrix</span></span>
               CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">uniform_01</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> mat<span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// evaluate the determinant at the new matrix value</span></span>
               keep <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// keep this forward mode result</span></span>
               <span style="font-weight: bold"><span style="color: #000000">zos_forward</span></span><span style="color: #990000">(</span>tag<span style="color: #990000">,</span> m<span style="color: #990000">,</span> n<span style="color: #990000">,</span> keep<span style="color: #990000">,</span> mat<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>f<span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// evaluate and return gradient using reverse mode</span></span>
               <span style="font-weight: bold"><span style="color: #000000">fos_reverse</span></span><span style="color: #990000">(</span>tag<span style="color: #990000">,</span> m<span style="color: #990000">,</span> n<span style="color: #990000">,</span> u<span style="color: #990000">,</span> grad<span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// return function, matrix, and gradient</span></span>
     z<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> f<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     x<span style="color: #990000">[</span>j<span style="color: #990000">]</span>  <span style="color: #990000">=</span> mat<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          dz<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> grad<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// tear down</span></span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">delete_array</span></span><span style="color: #990000">(</span>X<span style="color: #990000">);</span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">delete_array</span></span><span style="color: #990000">(</span>Y<span style="color: #990000">);</span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">delete_array</span></span><span style="color: #990000">(</span>Z<span style="color: #990000">);</span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">delete_array</span></span><span style="color: #990000">(</span>mat<span style="color: #990000">);</span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">delete_array</span></span><span style="color: #990000">(</span>u<span style="color: #990000">);</span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">delete_array</span></span><span style="color: #990000">(</span>grad<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

</tt></pre>

<hr/>Input File: speed/adolc/mat_mul.cpp

</body>
</html>
