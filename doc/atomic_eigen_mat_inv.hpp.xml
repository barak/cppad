<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Atomic Eigen Matrix Inversion Class</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Atomic Eigen Matrix Inversion Class"/>
<meta name="keywords" id="keywords" content=" atomic eigen matrix inversion class purpose dimensions theory forward product three matrices reverse start definition public types constructor op private variables end "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_eigen_mat_inv.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="atomic_eigen_mat_inv.cpp.xml" target="_top">Prev</a>
</td><td><a href="atomic_eigen_cholesky.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_base</option>
<option>atomic_eigen_mat_inv.cpp</option>
<option>atomic_eigen_mat_inv.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>atomic-&gt;</option>
<option>checkpoint</option>
<option>atomic_base</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>atomic_base-&gt;</option>
<option>atomic_ctor</option>
<option>atomic_option</option>
<option>atomic_afun</option>
<option>atomic_forward</option>
<option>atomic_reverse</option>
<option>atomic_for_sparse_jac</option>
<option>atomic_rev_sparse_jac</option>
<option>atomic_for_sparse_hes</option>
<option>atomic_rev_sparse_hes</option>
<option>atomic_base_clear</option>
<option>atomic_get_started.cpp</option>
<option>atomic_norm_sq.cpp</option>
<option>atomic_reciprocal.cpp</option>
<option>atomic_set_sparsity.cpp</option>
<option>atomic_tangent.cpp</option>
<option>atomic_eigen_mat_mul.cpp</option>
<option>atomic_eigen_mat_inv.cpp</option>
<option>atomic_eigen_cholesky.cpp</option>
<option>atomic_mat_mul.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>atomic_eigen_mat_inv.cpp-&gt;</option>
<option>atomic_eigen_mat_inv.hpp</option>
</select>
</td>
<td>atomic_eigen_mat_inv.hpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Matrix Dimensions</option>
<option>Theory</option>
<option>---..Forward</option>
<option>---..Product of Three Matrices</option>
<option>---..Reverse</option>
<option>Start Class Definition</option>
<option>Public</option>
<option>---..Types</option>
<option>---..Constructor</option>
<option>---..op</option>
<option>Private</option>
<option>---..Variables</option>
<option>---..forward</option>
<option>---..reverse</option>
<option>End Class Definition</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Atomic Eigen Matrix Inversion Class</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
Construct an atomic operation that computes the matrix inverse

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
<mo stretchy="false">=</mo>
<msup><mi mathvariant='italic'>A</mi>
<mrow><mn>-1</mn>
</mrow>
</msup>
</mrow></math>


for any positive integer 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>p</mi>
</mrow></math>


and invertible matrix 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>A</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mrow><mi mathvariant='italic'>p</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>p</mi>
</mrow>
</msup>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="Matrix Dimensions" id="Matrix Dimensions">Matrix Dimensions</a></big></b>
<br/>
This example puts the matrix dimension 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>p</mi>
</mrow></math>


in the atomic function arguments,
instead of the <a href="atomic_ctor.xml" target="_top"><span style='white-space: nowrap'>constructor</span></a>
,
so it can be different for different calls to the atomic function.

<br/>
<br/>
<b><big><a name="Theory" id="Theory">Theory</a></big></b>


<br/>
<br/>
<b><a name="Theory.Forward" id="Theory.Forward">Forward</a></b>
<br/>
The zero order forward mode Taylor coefficient is give by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>R</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">=</mo>
<msubsup><mi mathvariant='italic'>A</mi>
<mn>0</mn>
<mrow><mn>-1</mn>
</mrow>
</msubsup>
</mrow></math>

For 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>k</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">&#x02026;</mo>
</mrow></math>

,
the <code><i>k</i></code>-th order Taylor coefficient of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>A</mi>
<mi mathvariant='italic'>R</mi>
</mrow></math>

 is given by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mn>0</mn>
<mo stretchy="false">=</mo>
<munderover><mo displaystyle='true' largeop='true'>&#x02211;</mo>
<mrow><mo stretchy="false">&#x02113;</mo>
<mo stretchy="false">=</mo>
<mn>0</mn>
</mrow>
<mi mathvariant='italic'>k</mi>
</munderover>
<msub><mi mathvariant='italic'>A</mi>
<mo stretchy="false">&#x02113;</mo>
</msub>
<msub><mi mathvariant='italic'>R</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">-</mo>
<mo stretchy="false">&#x02113;</mo>
</mrow>
</msub>
</mrow></math>

Solving for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>R</mi>
<mi mathvariant='italic'>k</mi>
</msub>
</mrow></math>

 in terms of the coefficients
for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>A</mi>
</mrow></math>

 and the lower order coefficients for 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
</mrow></math>

 we have

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>R</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">=</mo>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>R</mi>
<mn>0</mn>
</msub>
<mrow><mo stretchy="true">(</mo><mrow><munderover><mo displaystyle='true' largeop='true'>&#x02211;</mo>
<mrow><mo stretchy="false">&#x02113;</mo>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow>
<mi mathvariant='italic'>k</mi>
</munderover>
<msub><mi mathvariant='italic'>A</mi>
<mo stretchy="false">&#x02113;</mo>
</msub>
<msub><mi mathvariant='italic'>R</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">-</mo>
<mo stretchy="false">&#x02113;</mo>
</mrow>
</msub>
</mrow><mo stretchy="true">)</mo></mrow>
</mrow></math>

Furthermore, once we have 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>R</mi>
<mi mathvariant='italic'>k</mi>
</msub>
</mrow></math>

 we can compute the sum using

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>A</mi>
<mn>0</mn>
</msub>
<msub><mi mathvariant='italic'>R</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">=</mo>
<mo stretchy="false">-</mo>
<mrow><mo stretchy="true">(</mo><mrow><munderover><mo displaystyle='true' largeop='true'>&#x02211;</mo>
<mrow><mo stretchy="false">&#x02113;</mo>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow>
<mi mathvariant='italic'>k</mi>
</munderover>
<msub><mi mathvariant='italic'>A</mi>
<mo stretchy="false">&#x02113;</mo>
</msub>
<msub><mi mathvariant='italic'>R</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">-</mo>
<mo stretchy="false">&#x02113;</mo>
</mrow>
</msub>
</mrow><mo stretchy="true">)</mo></mrow>
</mrow></math>

<br/>
<b><a name="Theory.Product of Three Matrices" id="Theory.Product of Three Matrices">Product of Three Matrices</a></b>
<br/>
Suppose 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mover accent='false'><mrow><mi mathvariant='italic'>E</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
</mrow></math>

 is the derivative of the
scalar value function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>E</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 with respect to 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>E</mi>
</mrow></math>

; i.e.,

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>E</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>j</mi>
</mrow>
</msub>
<mo stretchy="false">=</mo>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>s</mi>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<msub><mi mathvariant='italic'>E</mi>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>j</mi>
</mrow>
</msub>
</mrow>
</mfrac>
</mrow></math>

Also suppose that 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>t</mi>
</mrow></math>

 is a scalar valued argument and

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>E</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>B</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>C</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
</mrow></math>

It follows that

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>E</mi>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>B</mi>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>C</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>B</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>C</mi>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>B</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>C</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
</mrow></math>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>s</mi>
<mo stretchy="false">&#x02218;</mo>
<mi mathvariant='italic'>E</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>tr</mi>
</mstyle></mrow>
<mo stretchy="false">[</mo>
<msup><mover accent='false'><mrow><mi mathvariant='italic'>E</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mi mathvariant='italic'>E</mi>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
</mrow></math>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mo stretchy="false">=</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>tr</mi>
</mstyle></mrow>
<mo stretchy="false">[</mo>
<msup><mover accent='false'><mrow><mi mathvariant='italic'>E</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mi mathvariant='italic'>B</mi>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>C</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mo stretchy="false">+</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>tr</mi>
</mstyle></mrow>
<mo stretchy="false">[</mo>
<msup><mover accent='false'><mrow><mi mathvariant='italic'>E</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mi mathvariant='italic'>B</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>C</mi>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mo stretchy="false">+</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>tr</mi>
</mstyle></mrow>
<mo stretchy="false">[</mo>
<msup><mover accent='false'><mrow><mi mathvariant='italic'>E</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mi mathvariant='italic'>B</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>C</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
</mrow></math>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mo stretchy="false">=</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>tr</mi>
</mstyle></mrow>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>B</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<msup><mover accent='false'><mrow><mi mathvariant='italic'>E</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mi mathvariant='italic'>B</mi>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mo stretchy="false">+</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>tr</mi>
</mstyle></mrow>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<msup><mover accent='false'><mrow><mi mathvariant='italic'>E</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mi mathvariant='italic'>B</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>C</mi>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mo stretchy="false">+</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>tr</mi>
</mstyle></mrow>
<mo stretchy="false">[</mo>
<msup><mover accent='false'><mrow><mi mathvariant='italic'>E</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mi mathvariant='italic'>B</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>C</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mi mathvariant='italic'>D</mi>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
</mrow></math>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mover accent='false'><mrow><mi mathvariant='italic'>B</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mo stretchy="false">=</mo>
<mover accent='false'><mrow><mi mathvariant='italic'>E</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>C</mi>
<mi mathvariant='italic'>D</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mspace width='.3em'/>
<mo stretchy="false">,</mo>
<mspace width='.3em'/>
<mover accent='false'><mrow><mi mathvariant='italic'>C</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mo stretchy="false">=</mo>
<msup><mi mathvariant='italic'>B</mi>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mover accent='false'><mrow><mi mathvariant='italic'>E</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<msup><mi mathvariant='italic'>D</mi>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mspace width='.3em'/>
<mo stretchy="false">,</mo>
<mspace width='.3em'/>
<mover accent='false'><mrow><mi mathvariant='italic'>D</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mo stretchy="false">=</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>B</mi>
<mi mathvariant='italic'>C</mi>
<msup><mo stretchy="false">)</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mover accent='false'><mrow><mi mathvariant='italic'>E</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
</mrow></math>

<br/>
<b><a name="Theory.Reverse" id="Theory.Reverse">Reverse</a></b>
<br/>
For 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>k</mi>
<mo stretchy="false">&gt;</mo>
<mn>0</mn>
</mrow></math>

, reverse mode
eliminates 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>R</mi>
<mi mathvariant='italic'>k</mi>
</msub>
</mrow></math>

 and expresses the function values

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>s</mi>
</mrow></math>

 in terms of the coefficients of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>A</mi>
</mrow></math>


and the lower order coefficients of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>R</mi>
</mrow></math>

.
The effect on 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>R</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mn>0</mn>
</msub>
</mrow></math>


(of eliminating 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>R</mi>
<mi mathvariant='italic'>k</mi>
</msub>
</mrow></math>

) is

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>R</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mn>0</mn>
</msub>
<mo stretchy="false">=</mo>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>R</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mn>0</mn>
</msub>
<mo stretchy="false">-</mo>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>R</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mi mathvariant='italic'>k</mi>
</msub>
<msup><mrow><mo stretchy="true">(</mo><mrow><munderover><mo displaystyle='true' largeop='true'>&#x02211;</mo>
<mrow><mo stretchy="false">&#x02113;</mo>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow>
<mi mathvariant='italic'>k</mi>
</munderover>
<msub><mi mathvariant='italic'>A</mi>
<mo stretchy="false">&#x02113;</mo>
</msub>
<msub><mi mathvariant='italic'>R</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">-</mo>
<mo stretchy="false">&#x02113;</mo>
</mrow>
</msub>
</mrow><mo stretchy="true">)</mo></mrow>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<mo stretchy="false">=</mo>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>R</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mn>0</mn>
</msub>
<mo stretchy="false">+</mo>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>R</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mi mathvariant='italic'>k</mi>
</msub>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>A</mi>
<mn>0</mn>
</msub>
<msub><mi mathvariant='italic'>R</mi>
<mi mathvariant='italic'>k</mi>
</msub>
<msup><mo stretchy="false">)</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
</mrow></math>

For 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">&#x02113;</mo>
<mo stretchy="false">=</mo>
<mn>1</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">&#x02026;</mo>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>k</mi>
</mrow></math>

,
the effect on 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>R</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">-</mo>
<mo stretchy="false">&#x02113;</mo>
</mrow>
</msub>
</mrow></math>

 and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>A</mi>
<mo stretchy="false">&#x02113;</mo>
</msub>
</mrow></math>


(of eliminating 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>R</mi>
<mi mathvariant='italic'>k</mi>
</msub>
</mrow></math>

) is

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>A</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mo stretchy="false">&#x02113;</mo>
</msub>
<mo stretchy="false">=</mo>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>A</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mo stretchy="false">&#x02113;</mo>
</msub>
<mo stretchy="false">-</mo>
<msubsup><mi mathvariant='italic'>R</mi>
<mn>0</mn>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msubsup>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>R</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mi mathvariant='italic'>k</mi>
</msub>
<msubsup><mi mathvariant='italic'>R</mi>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">-</mo>
<mo stretchy="false">&#x02113;</mo>
</mrow>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msubsup>
</mrow></math>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>R</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">-</mo>
<mo stretchy="false">&#x02113;</mo>
</mrow>
</msub>
<mo stretchy="false">=</mo>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>R</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mrow><mi mathvariant='italic'>k</mi>
<mo stretchy="false">-</mo>
<mo stretchy="false">&#x02113;</mo>
</mrow>
</msub>
<mo stretchy="false">-</mo>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>R</mi>
<mn>0</mn>
</msub>
<msub><mi mathvariant='italic'>A</mi>
<mo stretchy="false">&#x02113;</mo>
</msub>
<msup><mo stretchy="false">)</mo>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msup>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>R</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mi mathvariant='italic'>k</mi>
</msub>
</mrow></math>

We note that

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>R</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<msub><mi mathvariant='italic'>A</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<msub><mi mathvariant='italic'>R</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<msub><mi mathvariant='italic'>A</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mn>0</mn>
</mrow></math>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>R</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mo stretchy="false">-</mo>
<msub><mi mathvariant='italic'>R</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<msub><mi mathvariant='italic'>A</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">'</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
<msub><mi mathvariant='italic'>R</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>t</mi>
<mo stretchy="false">)</mo>
</mrow></math>

The reverse mode formula that eliminates 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>R</mi>
<mn>0</mn>
</msub>
</mrow></math>

 is

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>A</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mn>0</mn>
</msub>
<mo stretchy="false">=</mo>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>A</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mn>0</mn>
</msub>
<mo stretchy="false">-</mo>
<msubsup><mi mathvariant='italic'>R</mi>
<mn>0</mn>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msubsup>
<msub><mover accent='false'><mrow><mi mathvariant='italic'>R</mi>
</mrow>
<mo stretchy='false'>&#x000AF;</mo></mover>
<mn>0</mn>
</msub>
<msubsup><mi mathvariant='italic'>R</mi>
<mn>0</mn>
<mrow><mstyle mathvariant='normal'><mi mathvariant='normal'>T</mi>
</mstyle></mrow>
</msubsup>
</mrow></math>

<br/>
<b><big><a name="Start Class Definition" id="Start Class Definition">Start Class Definition</a></big></b>

<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;Eigen/Core&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;Eigen/LU&gt;</span>


</tt></pre>
<b><big><a name="Public" id="Public">Public</a></big></b>


<br/>
<br/>
<b><a name="Public.Types" id="Public.Types">Types</a></b>

<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// BEGIN_EMPTY_NAMESPACE</span></span>

<span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Base</span><span style="color: #990000">&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">atomic_eigen_mat_inv</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;</span> <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
     <span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// type of elements during calculation of derivatives</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="color: #008080">Base</span>              scalar<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// type of elements during taping</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;scalar&gt;</span> ad_scalar<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// type of matrix during calculation of derivatives</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> Eigen<span style="color: #990000">::</span>Matrix<span style="color: #990000">&lt;</span>
          scalar<span style="color: #990000">,</span> Eigen<span style="color: #990000">::</span>Dynamic<span style="color: #990000">,</span> Eigen<span style="color: #990000">::</span>Dynamic<span style="color: #990000">,</span> Eigen<span style="color: #990000">::</span>RowMajor<span style="color: #990000">&gt;</span>     matrix<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// type of matrix during taping</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> Eigen<span style="color: #990000">::</span>Matrix<span style="color: #990000">&lt;</span>
          ad_scalar<span style="color: #990000">,</span> Eigen<span style="color: #990000">::</span>Dynamic<span style="color: #990000">,</span> Eigen<span style="color: #990000">::</span>Dynamic<span style="color: #990000">,</span> Eigen<span style="color: #990000">::</span>RowMajor <span style="color: #990000">&gt;</span> ad_matrix<span style="color: #990000">;</span></tt></pre>
<br/>
<b><a name="Public.Constructor" id="Public.Constructor">Constructor</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// constructor</span></span>
     <span style="font-weight: bold"><span style="color: #000000">atomic_eigen_mat_inv</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span> <span style="color: #990000">:</span> CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;(</span>
          <span style="color: #FF0000">"atom_eigen_mat_inv"</span>                             <span style="color: #990000">,</span>
          CppAD<span style="color: #990000">::</span>atomic_base<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;::</span>set_sparsity_enum
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><a name="Public.op" id="Public.op">op</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// use atomic operation to invert an AD matrix</span></span>
     <span style="color: #008080">ad_matrix</span> <span style="font-weight: bold"><span style="color: #000000">op</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> ad_matrix<span style="color: #990000">&amp;</span> arg<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> nr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> arg<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">rows</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> ny <span style="color: #990000">=</span> nr <span style="color: #990000">*</span> nr<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nx <span style="color: #990000">=</span> <span style="color: #993399">1</span> <span style="color: #990000">+</span> ny<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nr <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> arg<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">cols</span></span><span style="color: #990000">()</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// packed version of arg</span></span>
          <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>ad_scalar<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">packed_arg</span></span><span style="color: #990000">(</span>nx<span style="color: #990000">);</span>
          packed_arg<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">ad_scalar</span></span><span style="color: #990000">(</span> nr <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> ny<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               packed_arg<span style="color: #990000">[</span><span style="color: #993399">1</span> <span style="color: #990000">+</span> i<span style="color: #990000">]</span> <span style="color: #990000">=</span> arg<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">data</span></span><span style="color: #990000">()[</span>i<span style="color: #990000">];</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// packed version of result = arg^{-1}.</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// This is an atomic_base function call that CppAD uses to</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// store the atomic operation on the tape.</span></span>
          <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>ad_scalar<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">packed_result</span></span><span style="color: #990000">(</span>ny<span style="color: #990000">);</span>
          <span style="color: #990000">(*</span><span style="font-weight: bold"><span style="color: #0000FF">this</span></span><span style="color: #990000">)(</span>packed_arg<span style="color: #990000">,</span> packed_result<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// unpack result matrix</span></span>
          <span style="color: #008080">ad_matrix</span> <span style="font-weight: bold"><span style="color: #000000">result</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> ny<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               result<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">data</span></span><span style="color: #990000">()[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> packed_result<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> result<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="Private" id="Private">Private</a></big></b>


<br/>
<br/>
<b><a name="Private.Variables" id="Private.Variables">Variables</a></b>

<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span>
     <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// one forward mode vector of matrices for argument and result</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;matrix&gt;</span> f_arg_<span style="color: #990000">,</span> f_result_<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// one reverse mode vector of matrices for argument and result</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;matrix&gt;</span> r_arg_<span style="color: #990000">,</span> r_result_<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------</span></span></tt></pre>
<br/>
<b><a name="Private.forward" id="Private.forward">forward</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// forward mode routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">forward</span></span><span style="color: #990000">(</span>
          <span style="font-style: italic"><span style="color: #9A1900">// lowest order Taylor coefficient we are evaluating</span></span>
          <span style="color: #008080">size_t</span>                          p <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// highest order Taylor coefficient we are evaluating</span></span>
          <span style="color: #008080">size_t</span>                          q <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// which components of x are variables</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>      vx <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// which components of y are variables</span></span>
          CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">bool</span><span style="color: #990000">&gt;&amp;</span>            vy <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// tx [ j * (q+1) + k ] is x_j^k</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span>scalar<span style="color: #990000">&gt;&amp;</span>    tx <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// ty [ i * (q+1) + k ] is y_i^k</span></span>
          CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span>scalar<span style="color: #990000">&gt;&amp;</span>          ty
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> n_order <span style="color: #990000">=</span> q <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nr      <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span> <span style="color: #993399">0</span> <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> <span style="color: #993399">0</span> <span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> ny      <span style="color: #990000">=</span> nr <span style="color: #990000">*</span> nr<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nx      <span style="color: #990000">=</span> <span style="color: #993399">1</span> <span style="color: #990000">+</span> ny<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> nx <span style="color: #990000">==</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">||</span> ny <span style="color: #990000">==</span> vy<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx <span style="color: #990000">*</span> n_order <span style="color: #990000">==</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> ny <span style="color: #990000">*</span> n_order <span style="color: #990000">==</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// make sure f_arg_ and f_result_ are large enough</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> f_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> f_result_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> f_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&lt;</span> n_order <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     f_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>n_order<span style="color: #990000">);</span>
               f_result_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>n_order<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     f_arg_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
                    f_result_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// unpack tx into f_arg_</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// unpack arg values for this order</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> ny<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                    f_arg_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">data</span></span><span style="color: #990000">()[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> tx<span style="color: #990000">[</span> <span style="color: #990000">(</span><span style="color: #993399">1</span> <span style="color: #990000">+</span> i<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> k <span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// result for each order</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (we could avoid recalculting f_result_[k] for k=0,...,p-1)</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          f_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> f_arg_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">inverse</span></span><span style="color: #990000">();</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// initialize sum</span></span>
               <span style="color: #008080">matrix</span> f_sum <span style="color: #990000">=</span> matrix<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Zero</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// compute sum</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;=</span> k<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
                    f_sum <span style="color: #990000">-=</span> f_arg_<span style="color: #990000">[</span>ell<span style="color: #990000">]</span> <span style="color: #990000">*</span> f_result_<span style="color: #990000">[</span>k<span style="color: #990000">-</span>ell<span style="color: #990000">];</span>
               <span style="font-style: italic"><span style="color: #9A1900">// result_[k] = arg_[0]^{-1} * sum_</span></span>
               f_result_<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> f_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> f_sum<span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// pack result_ into ty</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> ny<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                    ty<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> k <span style="color: #990000">]</span> <span style="color: #990000">=</span> f_result_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">data</span></span><span style="color: #990000">()[</span>i<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// check if we are computing vy</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> vx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// ------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// This is a very dumb algorithm that over estimates which</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// elements of the inverse are variables (which is not efficient).</span></span>
          <span style="color: #009900">bool</span> var <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> ny<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               var <span style="color: #990000">|=</span> vx<span style="color: #990000">[</span><span style="color: #993399">1</span> <span style="color: #990000">+</span> i<span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> ny<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               vy<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> var<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><a name="Private.reverse" id="Private.reverse">reverse</a></b>

<pre><tt>     <span style="font-style: italic"><span style="color: #9A1900">// reverse mode routine called by CppAD</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">virtual</span></span> <span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">reverse</span></span><span style="color: #990000">(</span>
          <span style="font-style: italic"><span style="color: #9A1900">// highest order Taylor coefficient that we are computing derivative of</span></span>
          <span style="color: #008080">size_t</span>                     q <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// forward mode Taylor coefficients for x variables</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>     tx <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// forward mode Taylor coefficients for y variables</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>     ty <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// upon return, derivative of G[ F[ {x_j^k} ] ] w.r.t {x_j^k}</span></span>
          CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>           px <span style="color: #990000">,</span>
          <span style="font-style: italic"><span style="color: #9A1900">// derivative of G[ {y_i^k} ] w.r.t. {y_i^k}</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>     py
     <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> n_order <span style="color: #990000">=</span> q <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nr      <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> tx<span style="color: #990000">[</span> <span style="color: #993399">0</span> <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> <span style="color: #993399">0</span> <span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="color: #990000">);</span>
          <span style="color: #008080">size_t</span> ny      <span style="color: #990000">=</span> nr <span style="color: #990000">*</span> nr<span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> nx      <span style="color: #990000">=</span> <span style="color: #993399">1</span> <span style="color: #990000">+</span> ny<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> nx <span style="color: #990000">*</span> n_order <span style="color: #990000">==</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> ny <span style="color: #990000">*</span> n_order <span style="color: #990000">==</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> px<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>    <span style="color: #990000">==</span> tx<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> py<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span>    <span style="color: #990000">==</span> ty<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// make sure f_arg_ is large enough</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> f_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> f_result_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// must have previous run forward with order &gt;= n_order</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> f_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;=</span> n_order <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// make sure r_arg_, r_result_ are large enough</span></span>
          <span style="font-weight: bold"><span style="color: #000000">assert</span></span><span style="color: #990000">(</span> r_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> r_result_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> r_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">&lt;</span> n_order <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     r_arg_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>n_order<span style="color: #990000">);</span>
               r_result_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>n_order<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     r_arg_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
                    r_result_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// unpack tx into f_arg_</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// unpack arg values for this order</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> ny<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                    f_arg_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">data</span></span><span style="color: #990000">()[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> tx<span style="color: #990000">[</span> <span style="color: #990000">(</span><span style="color: #993399">1</span> <span style="color: #990000">+</span> i<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> k <span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// unpack py into r_result_</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> ny<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                    r_result_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">data</span></span><span style="color: #990000">()[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> py<span style="color: #990000">[</span> i <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> k <span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// initialize r_arg_ as zero</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               r_arg_<span style="color: #990000">[</span>k<span style="color: #990000">]</span>   <span style="color: #990000">=</span> matrix<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Zero</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nr<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// matrix reverse mode calculation</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k1 <span style="color: #990000">=</span> n_order<span style="color: #990000">;</span> k1 <span style="color: #990000">&gt;</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> k1<span style="color: #990000">--)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> k1 <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// bar{R}_0 = bar{R}_0 + bar{R}_k (A_0 R_k)^T</span></span>
               r_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+=</span>
               r_result_<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> f_result_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">()</span> <span style="color: #990000">*</span> f_arg_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">();</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> ell <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> ell <span style="color: #990000">&lt;=</span> k<span style="color: #990000">;</span> ell<span style="color: #990000">++)</span>
               <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// bar{A}_l = bar{A}_l - R_0^T bar{R}_k R_{k-l}^T</span></span>
                    r_arg_<span style="color: #990000">[</span>ell<span style="color: #990000">]</span> <span style="color: #990000">-=</span> f_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">()</span>
                         <span style="color: #990000">*</span> r_result_<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> f_result_<span style="color: #990000">[</span>k<span style="color: #990000">-</span>ell<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">();</span>
                    <span style="font-style: italic"><span style="color: #9A1900">// bar{R}_{k-l} = bar{R}_{k-1} - (R_0 A_l)^T bar{R}_k</span></span>
                    r_result_<span style="color: #990000">[</span>k<span style="color: #990000">-</span>ell<span style="color: #990000">]</span> <span style="color: #990000">-=</span> f_arg_<span style="color: #990000">[</span>ell<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">()</span>
                         <span style="color: #990000">*</span> f_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">()</span> <span style="color: #990000">*</span> r_result_<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          r_arg_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">-=</span>
          f_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">()</span> <span style="color: #990000">*</span> r_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> f_result_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">transpose</span></span><span style="color: #990000">();</span>
          <span style="font-style: italic"><span style="color: #9A1900">// -------------------------------------------------------------------</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// pack r_arg into px</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> n_order<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> ny<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                    px<span style="color: #990000">[</span> <span style="color: #990000">(</span><span style="color: #993399">1</span> <span style="color: #990000">+</span> i<span style="color: #990000">)</span> <span style="color: #990000">*</span> n_order <span style="color: #990000">+</span> k <span style="color: #990000">]</span> <span style="color: #990000">=</span> r_arg_<span style="color: #990000">[</span>k<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">data</span></span><span style="color: #990000">()[</span>i<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="End Class Definition" id="End Class Definition">End Class Definition</a></big></b>

<pre style='display:inline'><tt>
<span style="color: #FF0000">}</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// End of atomic_eigen_mat_inv class</span></span>

<span style="color: #FF0000">}</span>  <span style="font-style: italic"><span style="color: #9A1900">// END_EMPTY_NAMESPACE</span></span>
</tt></pre>

<hr/>Input File: cppad/example/eigen_mat_inv.hpp

</body>
</html>
