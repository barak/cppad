<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Source: sparse_hes_fun</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Source: sparse_hes_fun"/>
<meta name="keywords" id="keywords" content=" source: sparse_hes_fun source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_hes_fun.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="sparse_hes_fun.cpp.xml" target="_top">Prev</a>
</td><td><a href="uniform_01.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_utility</option>
<option>sparse_hes_fun</option>
<option>sparse_hes_fun.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed_utility-&gt;</option>
<option>det_by_lu</option>
<option>det_of_minor</option>
<option>det_by_minor</option>
<option>det_33</option>
<option>det_grad_33</option>
<option>mat_sum_sq</option>
<option>ode_evaluate</option>
<option>sparse_jac_fun</option>
<option>sparse_hes_fun</option>
<option>uniform_01</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>sparse_hes_fun-&gt;</option>
<option>sparse_hes_fun.cpp</option>
<option>sparse_hes_fun.hpp</option>
</select>
</td>
<td>sparse_hes_fun.hpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>Source: sparse_hes_fun</big></big></b></center>
<code><font color="blue"># ifndef CPPAD_SPARSE_HES_FUN_HPP
<code><span style='white-space: nowrap'><br/>
</span></code># define CPPAD_SPARSE_HES_FUN_HPP

<pre style='display:inline'> 
# include &lt;cppad/local/cppad_assert.hpp&gt;
# include &lt;cppad/utility/check_numeric_type.hpp&gt;
# include &lt;cppad/utility/vector.hpp&gt;

// following needed by gcc under fedora 17 so that exp(double) is defined
# include &lt;cppad/base_require.hpp&gt;

namespace CppAD {
	template &lt;class Float, class FloatVector&gt;
	void sparse_hes_fun(
		size_t                       n    ,
		const FloatVector&amp;           x    ,
		const CppAD::vector&lt;size_t&gt;&amp; row  ,
		const CppAD::vector&lt;size_t&gt;&amp; col  ,
		size_t                       p    ,
		FloatVector&amp;                fp    )
	{
		// check numeric type specifications
		CheckNumericType&lt;Float&gt;();

		// check value of p
		CPPAD_ASSERT_KNOWN(
			p == 0 || p == 2,
			&quot;sparse_hes_fun: p != 0 and p != 2&quot;
		);

		size_t K = row.size();
		size_t i, j, k;
		if( p == 0 )
			fp[0] = Float(0);
		else
		{	for(k = 0; k &lt; K; k++)
				fp[k] = Float(0);
		}

		// determine which diagonal entries are present in row[k], col[k]
		CppAD::vector&lt;size_t&gt; diagonal(n);
		for(i = 0; i &lt; n; i++)
			diagonal[i] = K;   // no diagonal entry for this row
		for(k = 0; k &lt; K; k++)
		{	if( row[k] == col[k] )
			{	CPPAD_ASSERT_UNKNOWN( diagonal[row[k]] == K );
				// index of the diagonal entry
				diagonal[ row[k] ] = k;
			}
		}

		// determine which entries must be multiplied by a factor of two
		CppAD::vector&lt;Float&gt; factor(K);
		for(k = 0; k &lt; K; k++)
		{	factor[k] = Float(1);
			for(size_t k1 = 0; k1 &lt; K; k1++)
			{	bool reflected = true;
				reflected &amp;= k != k1;
				reflected &amp;= row[k] != col[k];
				reflected &amp;= row[k] == col[k1];
				reflected &amp;= col[k] == row[k1];
				if( reflected )
					factor[k] = Float(2);
			}
		}

		Float t;
		for(k = 0; k &lt; K; k++)
		{	i    = row[k];
			j    = col[k];
			t    = exp( x[i] * x[j] );
			switch(p)
			{
				case 0:
				fp[0] += t;
				break;

				case 2:
				if( i == j )
				{	// dt_dxi = 2.0 * xi * t
					fp[k] += ( Float(2) + Float(4) * x[i] * x[i] ) * t;
				}
				else
				{	// dt_dxi = xj * t
					fp[k] += factor[k] * ( Float(1) + x[i] * x[j] ) * t;
					if( diagonal[i] != K )
					{	size_t ki = diagonal[i];
						fp[ki] += x[j] * x[j] * t;
					}
					if( diagonal[j] != K )
					{	size_t kj = diagonal[j];
						fp[kj] += x[i] * x[i] * t;
					}
				}
				break;
			}
		}

	}
}
</pre>


# endif
</font></code>


<hr/>Input File: omh/sparse_hes_fun.omh

</body>
</html>
