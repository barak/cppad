<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Take Down Multi-threaded Newton Method</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Take Down Multi-threaded Newton Method"/>
<meta name="keywords" id="keywords" content=" take down multi-threaded newton method syntax purpose thread xout source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_newton_takedown_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="multi_newton_worker.xml" target="_top">Prev</a>
</td><td><a href="multi_newton_run.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>multi_newton.cpp</option>
<option>multi_newton_takedown</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
<option>simple_ad_openmp.cpp</option>
<option>simple_ad_bthread.cpp</option>
<option>simple_ad_pthread.cpp</option>
<option>team_example.cpp</option>
<option>harmonic.cpp</option>
<option>multi_atomic.cpp</option>
<option>multi_newton.cpp</option>
<option>team_thread.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>multi_newton.cpp-&gt;</option>
<option>multi_newton_common</option>
<option>multi_newton_setup</option>
<option>multi_newton_worker</option>
<option>multi_newton_takedown</option>
<option>multi_newton_run</option>
<option>multi_newton_time</option>
</select>
</td>
<td>multi_newton_takedown</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Thread</option>
<option>xout</option>
<option>Source</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Take Down Multi-threaded Newton Method</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;harmonic_takedown(</span></font><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
This routine does the takedown for splitting the Newton method into
sub-intervals.

<br/>
<br/>
<b><big><a name="Thread" id="Thread">Thread</a></big></b>
<br/>
It is assumed that this function is called by thread zero,
and all the other threads have completed their work and are blocked (waiting).

<br/>
<br/>
<b><big><a name="xout" id="xout">xout</a></big></b>
<br/>
See <a href="multi_newton_run.xml#xout" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br/>
<br/>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">multi_newton_takedown</span></span><span style="color: #990000">(</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> xout<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// number of threads in the calculation</span></span>
     <span style="color: #008080">size_t</span> num_threads  <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">(</span>num_threads_<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">));</span>

     <span style="font-style: italic"><span style="color: #9A1900">// remove duplicates and points that are not solutions</span></span>
     xout<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="color: #009900">bool</span>   ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     ok       <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">thread_num</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// initialize as more that sub_length_ / 2 from any possible solution</span></span>
     <span style="color: #009900">double</span> xlast <span style="color: #990000">=</span> <span style="color: #990000">-</span> sub_length_<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> thread_num <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> thread_num <span style="color: #990000">&lt;</span> num_threads<span style="color: #990000">;</span> thread_num<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span> x <span style="color: #990000">=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>x<span style="color: #990000">;</span>

          <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// check for case where this point is lower limit for this</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// thread and upper limit for previous thread</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">-</span> xlast<span style="color: #990000">)</span> <span style="color: #990000">&gt;=</span> sub_length_ <span style="color: #990000">)</span>
               <span style="color: #FF0000">{</span>     xout<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">(</span> x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">);</span>
                    xlast <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
               <span style="color: #FF0000">}</span>
               <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
               <span style="color: #FF0000">{</span>     <span style="color: #009900">double</span> fcur<span style="color: #990000">,</span> flast<span style="color: #990000">,</span> df<span style="color: #990000">;</span>
                    <span style="font-weight: bold"><span style="color: #000000">fun_</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span>i<span style="color: #990000">],</span>   fcur<span style="color: #990000">,</span> df<span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #000000">fun_</span></span><span style="color: #990000">(</span>xlast<span style="color: #990000">,</span> flast<span style="color: #990000">,</span> df<span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>fcur<span style="color: #990000">)</span> <span style="color: #990000">&lt;</span> <span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span>flast<span style="color: #990000">)</span> <span style="color: #990000">)</span>
                    <span style="color: #FF0000">{</span>     xout<span style="color: #990000">[</span> xout<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
                         xlast                  <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// check that this thread was ok with the work it did</span></span>
          ok <span style="color: #990000">&amp;=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// go down so free memory for other threads before memory for master</span></span>
     <span style="color: #008080">size_t</span> thread_num <span style="color: #990000">=</span> num_threads<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>thread_num<span style="color: #990000">--)</span>
     <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080"># if</span></span> USE_THREAD_ALLOC_FOR_WORK_ALL
          <span style="font-style: italic"><span style="color: #9A1900">// call the destructor for vector destructor</span></span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>x<span style="color: #990000">.~</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;();</span>
          <span style="font-style: italic"><span style="color: #9A1900">// delete the raw memory allocation</span></span>
          <span style="color: #009900">void</span><span style="color: #990000">*</span> v_ptr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">void</span><span style="color: #990000">*&gt;(</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]</span> <span style="color: #990000">);</span>
          thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">return_memory</span></span><span style="color: #990000">(</span> v_ptr <span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000080"># else</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">delete</span></span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">];</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// Note that xout corresponds to memroy that is inuse by master</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (so we can only chech have freed all their memory).</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> thread_num <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// check that there is no longer any memory inuse by this thread</span></span>
               ok <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">inuse</span></span><span style="color: #990000">(</span>thread_num<span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// return all memory being held for future use by this thread</span></span>
               thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">free_available</span></span><span style="color: #990000">(</span>thread_num<span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// now we are done with the work_all_ vector so free its memory</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (because it is a static variable)</span></span>
     work_all_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: example/multi_thread/multi_newton.cpp

</body>
</html>
