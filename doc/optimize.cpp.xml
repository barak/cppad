<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>ADFun Operation Sequence Optimization: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="ADFun Operation Sequence Optimization: Example and Test"/>
<meta name="keywords" id="keywords" content=" adfun operation sequence optimization: example and test optimize "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_optimize.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="optimize.xml" target="_top">Prev</a>
</td><td><a href="check_for_nan.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>optimize</option>
<option>optimize.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>abort_recording</option>
<option>seq_property</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>optimize</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>optimize-&gt;</option>
<option>optimize.cpp</option>
</select>
</td>
<td>optimize.cpp</td>
<td>Headings</td>
</tr></table><br/>


<center><b><big><big>ADFun Operation Sequence Optimization: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 
# include &lt;cppad/cppad.hpp&gt;
namespace {
	template &lt;class VectorFloat&gt; void fun(
		const VectorFloat&amp; x, VectorFloat&amp; y, size_t&amp; n_var, size_t&amp; n_opt )
	{	typedef typename VectorFloat::value_type Float;

		// One for each independent variable and one phantom variable at
		// the beginning of operation sequence.
		n_var = 1 + x.size();

		// One operator for each independent variable and one to mark
		// beginning of operation sequence.
		n_opt = 1 + x.size();

		// Create a variable that is is only used in the comparision operation
		// (was optimized out until 2015-01-12).
		Float a = 1. / x[0];
		n_var += 1;
		n_opt += 1;

		// Create a variable that is used by the result
		Float b = x[0] * 5.;
		n_var += 1;
		n_opt += 1;

		// only one variable created for this comparison operation
		// but the value depends on which branch is taken.
		Float c;
		if( a &lt; x[0] )
			c = 2.0 * b;
		else
			c = 3.0 * b;
		n_var += 1;
		n_opt += 1;

		// Create a variable that is optimized out because it
		// will always have the same value as b
		Float d = 5. * x[0];
		n_var += 1;
		n_opt += 0;

		// Create three variables that will be converted to one
		// cumulative summation. Note that a is not connected to
		// the result y (in the operation sequence).
		y[0]   = 1.0 + b + c + d;
		n_var += 3;
		n_opt += 1;
	}
}

bool optimize(void)
{	bool ok = true;
	using CppAD::AD;

	// domain space vector
	size_t n  = 1;
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(AD&lt;double&gt;) ax(n);
	ax[0] = 0.5;

	// declare independent variables and start tape recording
	CppAD::<a href="independent.xml" target="_top">Independent</a>(ax);

	// range space vector
	size_t m = 1;
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(AD&lt;double&gt;) ay(m);
	size_t n_var, n_opt;
	fun(ax, ay, n_var, n_opt);

	// create f: x -&gt; y and stop tape recording
	CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f(ax, ay);
	ok &amp;= (f.size_var() == n_var);

	// Optimize the operation sequence
	f.optimize();
	ok &amp;= (f.size_var() == n_opt);

	// Check result for a zero order calculation for a different x,
	// where the result of the comparison is he same.
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(double) x(n), y(m), check(m);
	x[0] = 0.75;
	y    = f.<a href="forward.xml" target="_top">Forward</a>(0, x);
	ok  &amp;= f.CompareChange() == 0;
	fun(x, check, n_var, n_opt);
	ok  &amp;= (y[0] == check[0]);

	// Check case where result of the comparision is differnent
	x[0] = 2.0;
	y    = f.<a href="forward.xml" target="_top">Forward</a>(0, x);
	ok  &amp;= f.CompareChange() == 1;
	fun(x, check, n_var, n_opt);
	ok &amp;= (y[0] != check[0]);

	// re-tape at new x value, re-optimize, and re-evaluate forward
	ax[0] = x[0];
	CppAD::<a href="independent.xml" target="_top">Independent</a>(ax);
	fun(ax, ay, n_var, n_opt);
	f.Dependent(ax, ay);
	f.optimize();
	y   = f.<a href="forward.xml" target="_top">Forward</a>(0, x);
	ok &amp;= f.CompareChange() == 0;
	ok &amp;= (y[0] == check[0]);

	return ok;
}

</pre>

</font></code>


<hr/>Input File: example/optimize.cpp

</body>
</html>
