<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Computing Sparse Jacobian Using Reverse Mode: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Computing Sparse Jacobian Using Reverse Mode: Example and Test"/>
<meta name="keywords" id="keywords" content=" computing sparse jacobian using reverse mode: example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_jac_rev.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="sparse_jac_for.cpp.xml" target="_top">Prev</a>
</td><td><a href="sparse_jacobian.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>sparse_derivative</option>
<option>sparse_jac</option>
<option>sparse_jac_rev.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>record_adfun</option>
<option>drivers</option>
<option>Forward</option>
<option>Reverse</option>
<option>sparsity_pattern</option>
<option>sparse_derivative</option>
<option>optimize</option>
<option>abs_normal</option>
<option>FunCheck</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>sparse_derivative-&gt;</option>
<option>sparse_jac</option>
<option>sparse_jacobian</option>
<option>sparse_hes</option>
<option>sparse_hessian</option>
<option>subgraph_jac_rev</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>sparse_jac-&gt;</option>
<option>sparse_jac_for.cpp</option>
<option>sparse_jac_rev.cpp</option>
</select>
</td>
<td>sparse_jac_rev.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Computing Sparse Jacobian Using Reverse Mode: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">sparse_jac_rev</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>sparse_rc<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>sparse_rcv<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> a_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span>     d_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>size_t<span style="color: #990000">)</span>     s_vector<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">4</span><span style="color: #990000">;</span>
     <span style="color: #008080">a_vector</span>  <span style="font-weight: bold"><span style="color: #000000">a_x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          a_x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and starting recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
     <span style="color: #008080">a_vector</span>  <span style="font-weight: bold"><span style="color: #000000">a_y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     a_y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> a_x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> a_x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
     a_y<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> a_x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> a_x<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">];</span>
     a_y<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> a_x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> a_x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> a_x<span style="color: #990000">[</span><span style="color: #993399">2</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> a_x<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> a_x<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">]</span> <span style="color: #990000">/</span> <span style="color: #993399">2</span><span style="color: #990000">.;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// create f: x -&gt; y and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">,</span> a_y<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// new value for the independent variable vector</span></span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>j<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">/*</span></span>
<span style="font-style: italic"><span style="color: #9A1900">            [ 1 1 0 0  ]</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     J(x) = [ 0 0 1 1  ]</span></span>
<span style="font-style: italic"><span style="color: #9A1900">            [ 1 1 1 x_3]</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     */</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// row-major order values of J(x)</span></span>
     <span style="color: #008080">size_t</span> nnz <span style="color: #990000">=</span> <span style="color: #993399">8</span><span style="color: #990000">;</span>
     <span style="color: #008080">s_vector</span> <span style="font-weight: bold"><span style="color: #000000">check_row</span></span><span style="color: #990000">(</span>nnz<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">check_col</span></span><span style="color: #990000">(</span>nnz<span style="color: #990000">);</span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">check_val</span></span><span style="color: #990000">(</span>nnz<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> nnz<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// check_val</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> k <span style="color: #990000">&lt;</span> <span style="color: #993399">7</span> <span style="color: #990000">)</span>
               check_val<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
               check_val<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">];</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// check_row and check_col</span></span>
          check_col<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> k<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> k <span style="color: #990000">&lt;</span> <span style="color: #993399">2</span> <span style="color: #990000">)</span>
               check_row<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span> <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> k <span style="color: #990000">&lt;</span> <span style="color: #993399">4</span> <span style="color: #990000">)</span>
               check_row<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
          <span style="color: #FF0000">{</span>     check_row<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
               check_col<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> k <span style="color: #990000">-</span> <span style="color: #993399">4</span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// m by m identity matrix sparsity</span></span>
     <span style="color: #008080">sparse_rc&lt;s_vector&gt;</span> <span style="font-weight: bold"><span style="color: #000000">pattern_in</span></span><span style="color: #990000">(</span>m<span style="color: #990000">,</span> m<span style="color: #990000">,</span> m<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          pattern_in<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">set</span></span><span style="color: #990000">(</span>k<span style="color: #990000">,</span> k<span style="color: #990000">,</span> k<span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// sparsity for J(x)</span></span>
     <span style="color: #009900">bool</span> transpose     <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     <span style="color: #009900">bool</span> dependency    <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     <span style="color: #009900">bool</span> internal_bool <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #008080">sparse_rc&lt;s_vector&gt;</span> pattern_jac<span style="color: #990000">;</span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">rev_jac_sparsity</span></span><span style="color: #990000">(</span>
          pattern_in<span style="color: #990000">,</span> transpose<span style="color: #990000">,</span> dependency<span style="color: #990000">,</span> internal_bool<span style="color: #990000">,</span> pattern_jac
     <span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// compute entire reverse mode Jacobian</span></span>
     <span style="color: #008080">sparse_rcv&lt;s_vector, d_vector&gt;</span> <span style="font-weight: bold"><span style="color: #000000">subset</span></span><span style="color: #990000">(</span> pattern_jac <span style="color: #990000">);</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_jac_work</span> work<span style="color: #990000">;</span>
     std<span style="color: #990000">::</span><span style="color: #008080">string</span> coloring <span style="color: #990000">=</span> <span style="color: #FF0000">"cppad"</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> n_sweep <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">sparse_jac_rev</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> subset<span style="color: #990000">,</span> pattern_jac<span style="color: #990000">,</span> coloring<span style="color: #990000">,</span> work<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> n_sweep <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">s_vector</span> <span style="font-weight: bold"><span style="color: #000000">row</span></span><span style="color: #990000">(</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">row</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">s_vector</span> <span style="font-weight: bold"><span style="color: #000000">col</span></span><span style="color: #990000">(</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">col</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">val</span></span><span style="color: #990000">(</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">val</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     <span style="color: #008080">s_vector</span> row_major <span style="color: #990000">=</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">row_major</span></span><span style="color: #990000">();</span>
     ok  <span style="color: #990000">&amp;=</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">nnz</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> nnz<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> nnz<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> row<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> check_row<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
          ok <span style="color: #990000">&amp;=</span> col<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> check_col<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
          ok <span style="color: #990000">&amp;=</span> val<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> check_val<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// test using work stored by previous sparse_jac_rev</span></span>
     <span style="color: #008080">sparse_rc&lt;s_vector&gt;</span> pattern_not_used<span style="color: #990000">;</span>
     std<span style="color: #990000">::</span><span style="color: #008080">string</span>         coloring_not_used<span style="color: #990000">;</span>
     n_sweep <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">sparse_jac_rev</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> subset<span style="color: #990000">,</span> pattern_jac<span style="color: #990000">,</span> coloring<span style="color: #990000">,</span> work<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> n_sweep <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> nnz<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> row<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> check_row<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
          ok <span style="color: #990000">&amp;=</span> col<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> check_col<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
          ok <span style="color: #990000">&amp;=</span> val<span style="color: #990000">[</span> row_major<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">==</span> check_val<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// compute non-zero in col 3 only, nr = m, nc = n, nnz = 2</span></span>
     <span style="color: #008080">sparse_rc&lt;s_vector&gt;</span> <span style="font-weight: bold"><span style="color: #000000">pattern_col3</span></span><span style="color: #990000">(</span>m<span style="color: #990000">,</span> n<span style="color: #990000">,</span> <span style="color: #993399">2</span><span style="color: #990000">);</span>
     pattern_col3<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">set</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> <span style="color: #993399">1</span><span style="color: #990000">,</span> <span style="color: #993399">3</span><span style="color: #990000">);</span>    <span style="font-style: italic"><span style="color: #9A1900">// row[0] = 1, col[0] = 3</span></span>
     pattern_col3<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">set</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> <span style="color: #993399">2</span><span style="color: #990000">,</span> <span style="color: #993399">3</span><span style="color: #990000">);</span>    <span style="font-style: italic"><span style="color: #9A1900">// row[1] = 2, col[1] = 3</span></span>
     <span style="color: #008080">sparse_rcv&lt;s_vector, d_vector&gt;</span> <span style="font-weight: bold"><span style="color: #000000">subset_col3</span></span><span style="color: #990000">(</span> pattern_col3 <span style="color: #990000">);</span>
     work<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>
     n_sweep <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">sparse_jac_rev</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> subset_col3<span style="color: #990000">,</span> pattern_jac<span style="color: #990000">,</span> coloring<span style="color: #990000">,</span> work<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> n_sweep <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">s_vector</span> <span style="font-weight: bold"><span style="color: #000000">row_col3</span></span><span style="color: #990000">(</span> subset_col3<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">row</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">s_vector</span> <span style="font-weight: bold"><span style="color: #000000">col_col3</span></span><span style="color: #990000">(</span> subset_col3<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">col</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">val_col3</span></span><span style="color: #990000">(</span> subset_col3<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">val</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> subset_col3<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">nnz</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     ok <span style="color: #990000">&amp;=</span> row_col3<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> col_col3<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> val_col3<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     ok <span style="color: #990000">&amp;=</span> row_col3<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> col_col3<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> val_col3<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> x<span style="color: #990000">[</span><span style="color: #993399">3</span><span style="color: #990000">];</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: example/sparse/sparse_jac_rev.cpp

</body>
</html>
