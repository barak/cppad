<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Fast Multi-Threading Memory Allocator: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Fast Multi-Threading Memory Allocator: Example and Test"/>
<meta name="keywords" id="keywords" content=" fast multi-threading memory allocator: example test openmp allocation pthread boost multi-thread "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_thread_alloc.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="thread_alloc.xml" target="_top">Prev</a>
</td><td><a href="ta_parallel_setup.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>thread_alloc</option>
<option>thread_alloc.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>utility-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>time_test</option>
<option>test_boolofvoid</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>CppAD_vector</option>
<option>thread_alloc</option>
<option>index_sort</option>
<option>to_string</option>
<option>set_union</option>
<option>sparse_rc</option>
<option>sparse_rcv</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>thread_alloc-&gt;</option>
<option>thread_alloc.cpp</option>
<option>ta_parallel_setup</option>
<option>ta_num_threads</option>
<option>ta_in_parallel</option>
<option>ta_thread_num</option>
<option>ta_get_memory</option>
<option>ta_return_memory</option>
<option>ta_free_available</option>
<option>ta_hold_memory</option>
<option>ta_inuse</option>
<option>ta_available</option>
<option>ta_create_array</option>
<option>ta_delete_array</option>
<option>ta_free_all</option>
</select>
</td>
<td>thread_alloc.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Fast Multi-Threading Memory Allocator: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/thread_alloc.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;vector&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;limits&gt;</span>


<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// Begin empty namespace</span></span>



<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">raw_allocate</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> thread<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check that no memory is initilaly inuse</span></span>
     ok <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">free_all</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// amount of static memory used by thread zero</span></span>
     <span style="color: #008080">size_t</span> static_inuse <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// repeatedly allocate enough memory for at least two size_t values.</span></span>
     <span style="color: #008080">size_t</span> min_size_t <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> min_bytes  <span style="color: #990000">=</span> min_size_t <span style="color: #990000">*</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>size_t<span style="color: #990000">);</span>
     <span style="color: #008080">size_t</span> n_outter   <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> n_inner    <span style="color: #990000">=</span> <span style="color: #993399">5</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n_outter<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// Do not use CppAD::vector here because its use of thread_alloc</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// complicates the inuse and avaialble results.</span></span>
          std<span style="color: #990000">::</span><span style="color: #008080">vector&lt;void*&gt;</span> <span style="font-weight: bold"><span style="color: #000000">v_ptr</span></span><span style="color: #990000">(</span>n_inner<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// cap_bytes will be set by get_memory</span></span>
          <span style="color: #008080">size_t</span> cap_bytes <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// set here to avoid MSC warning</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n_inner<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// allocate enough memory for min_size_t size_t objects</span></span>
               v_ptr<span style="color: #990000">[</span>j<span style="color: #990000">]</span>    <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">get_memory</span></span><span style="color: #990000">(</span>min_bytes<span style="color: #990000">,</span> cap_bytes<span style="color: #990000">);</span>
               size_t<span style="color: #990000">*</span> ptr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span>size_t<span style="color: #990000">*&gt;(</span>v_ptr<span style="color: #990000">[</span>j<span style="color: #990000">]);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// determine the number of size_t values we have obtained</span></span>
               <span style="color: #008080">size_t</span>  cap_size_t <span style="color: #990000">=</span> cap_bytes <span style="color: #990000">/</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>size_t<span style="color: #990000">);</span>
               ok                <span style="color: #990000">&amp;=</span> min_size_t <span style="color: #990000">&lt;=</span> cap_size_t<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// use placement new to call the size_t copy constructor</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> cap_size_t<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">new</span></span><span style="color: #990000">(</span>ptr <span style="color: #990000">+</span> k<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>i <span style="color: #990000">+</span> j <span style="color: #990000">+</span> k<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">// check that the constructor worked</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> cap_size_t<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    ok <span style="color: #990000">&amp;=</span> ptr<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="color: #990000">(</span>i <span style="color: #990000">+</span> j <span style="color: #990000">+</span> k<span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-style: italic"><span style="color: #9A1900">// check that n_inner * cap_bytes are inuse and none are available</span></span>
          thread <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">thread_num</span></span><span style="color: #990000">();</span>
          ok <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">inuse</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">)</span> <span style="color: #990000">==</span> n_inner<span style="color: #990000">*</span>cap_bytes <span style="color: #990000">+</span> static_inuse<span style="color: #990000">;</span>
          ok <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">available</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// return the memrory to thread_alloc</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n_inner<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">return_memory</span></span><span style="color: #990000">(</span>v_ptr<span style="color: #990000">[</span>j<span style="color: #990000">]);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// check that now n_inner * cap_bytes are now available</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// and none are in use</span></span>
          ok <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">inuse</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">)</span> <span style="color: #990000">==</span> static_inuse<span style="color: #990000">;</span>
          ok <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">available</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">)</span> <span style="color: #990000">==</span> n_inner <span style="color: #990000">*</span> cap_bytes<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">free_available</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check that the tests have not held onto memory</span></span>
     ok <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">free_all</span></span><span style="color: #990000">();</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">my_char</span> <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
     <span style="color: #009900">char</span> ch_ <span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">my_char</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #000000">ch_</span></span><span style="color: #990000">(</span><span style="color: #FF0000">' '</span><span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #000000">my_char</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> my_char<span style="color: #990000">&amp;</span> my_ch<span style="color: #990000">)</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #000000">ch_</span></span><span style="color: #990000">(</span>my_ch<span style="color: #990000">.</span>ch_<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span><span style="color: #990000">;</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">type_allocate</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check initial memory values</span></span>
     <span style="color: #008080">size_t</span> thread <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">thread_num</span></span><span style="color: #990000">();</span>
     ok <span style="color: #990000">&amp;=</span> thread <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">free_all</span></span><span style="color: #990000">();</span>
     <span style="color: #008080">size_t</span> static_inuse <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// initial allocation of an array</span></span>
     <span style="color: #008080">size_t</span>  size_min  <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span>  size_one<span style="color: #990000">;</span>
     <span style="color: #008080">my_char</span> <span style="color: #990000">*</span>array_one  <span style="color: #990000">=</span>
          thread_alloc<span style="color: #990000">::</span>create_array<span style="color: #990000">&lt;</span>my_char<span style="color: #990000">&gt;(</span>size_min<span style="color: #990000">,</span> size_one<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the values and change them to null 'x'</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> size_one<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     ok <span style="color: #990000">&amp;=</span> array_one<span style="color: #990000">[</span>i<span style="color: #990000">].</span>ch_ <span style="color: #990000">==</span> <span style="color: #FF0000">' '</span><span style="color: #990000">;</span>
          array_one<span style="color: #990000">[</span>i<span style="color: #990000">].</span>ch_ <span style="color: #990000">=</span> <span style="color: #FF0000">'x'</span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// now create a longer array</span></span>
     <span style="color: #008080">size_t</span> size_two<span style="color: #990000">;</span>
     <span style="color: #008080">my_char</span> <span style="color: #990000">*</span>array_two <span style="color: #990000">=</span>
          thread_alloc<span style="color: #990000">::</span>create_array<span style="color: #990000">&lt;</span>my_char<span style="color: #990000">&gt;(</span><span style="color: #993399">2</span> <span style="color: #990000">*</span> size_min<span style="color: #990000">,</span> size_two<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the values in array one</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> size_one<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          ok <span style="color: #990000">&amp;=</span> array_one<span style="color: #990000">[</span>i<span style="color: #990000">].</span>ch_ <span style="color: #990000">==</span> <span style="color: #FF0000">'x'</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the values in array two</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> size_two<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          ok <span style="color: #990000">&amp;=</span> array_two<span style="color: #990000">[</span>i<span style="color: #990000">].</span>ch_ <span style="color: #990000">==</span> <span style="color: #FF0000">' '</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the amount of inuse and available memory</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (an extra size_t value is used for each memory block).</span></span>
     <span style="color: #008080">size_t</span> check <span style="color: #990000">=</span> static_inuse <span style="color: #990000">+</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>my_char<span style="color: #990000">)*(</span>size_one <span style="color: #990000">+</span> size_two<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">inuse</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">)</span> <span style="color: #990000">-</span> check <span style="color: #990000">&lt;</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>my_char<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">available</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// delete the arrays</span></span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">delete_array</span></span><span style="color: #990000">(</span>array_one<span style="color: #990000">);</span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">delete_array</span></span><span style="color: #990000">(</span>array_two<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">inuse</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">)</span> <span style="color: #990000">==</span> static_inuse<span style="color: #990000">;</span>
     check <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>my_char<span style="color: #990000">)*(</span>size_one <span style="color: #990000">+</span> size_two<span style="color: #990000">);</span>
     ok   <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">available</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">)</span> <span style="color: #990000">-</span> check <span style="color: #990000">&lt;</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>my_char<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// free the memory for use by this thread</span></span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">free_available</span></span><span style="color: #990000">(</span>thread<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check that the tests have not held onto memory</span></span>
     ok <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">free_all</span></span><span style="color: #990000">();</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// End empty namespace</span></span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">check_alignment</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// number of binary digits in a size_t value</span></span>
     <span style="color: #008080">size_t</span> n_digit <span style="color: #990000">=</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;::</span>digits<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// must be a multiple of 8</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>n_digit <span style="color: #990000">%</span> <span style="color: #993399">8</span><span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// number of bytes in a size_t value</span></span>
     <span style="color: #008080">size_t</span> n_byte  <span style="color: #990000">=</span> n_digit <span style="color: #990000">/</span> <span style="color: #993399">8</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check raw allocation -------------------------------------------------</span></span>
     <span style="color: #008080">size_t</span> min_bytes <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> cap_bytes<span style="color: #990000">;</span>
     <span style="color: #009900">void</span><span style="color: #990000">*</span> v_ptr <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">get_memory</span></span><span style="color: #990000">(</span>min_bytes<span style="color: #990000">,</span> cap_bytes<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// convert to a size_t value</span></span>
     <span style="color: #008080">size_t</span> v_size_t <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;(</span>v_ptr<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check that it is aligned</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>v_size_t <span style="color: #990000">%</span> n_byte<span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// return memory to available pool</span></span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">return_memory</span></span><span style="color: #990000">(</span>v_ptr<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check array allocation ----------------------------------------------</span></span>
     <span style="color: #008080">size_t</span> size_min <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> size_out<span style="color: #990000">;</span>
     <span style="color: #008080">my_char</span> <span style="color: #990000">*</span>array_ptr <span style="color: #990000">=</span>
          thread_alloc<span style="color: #990000">::</span>create_array<span style="color: #990000">&lt;</span>my_char<span style="color: #990000">&gt;(</span>size_min<span style="color: #990000">,</span> size_out<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// convert to a size_t value</span></span>
     <span style="color: #008080">size_t</span> array_size_t <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">reinterpret_cast</span></span><span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;(</span>array_ptr<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check that it is aligned</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>array_size_t <span style="color: #990000">%</span> n_byte<span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// return memory to avialable pool</span></span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">delete_array</span></span><span style="color: #990000">(</span>array_ptr<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>


<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">thread_alloc</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check that there is only on thread</span></span>
     ok  <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">num_threads</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// so thread number must be zero</span></span>
     ok  <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">thread_num</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// and we are in sequential execution mode</span></span>
     ok  <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">in_parallel</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Instruct thread_alloc to hold onto memory.  This makes memory</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// allocation faster (especially when there are multiple threads).</span></span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">hold_memory</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// run raw allocation tests</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">raw_allocate</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// run typed allocation tests</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">type_allocate</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check alignment</span></span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">check_alignment</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// return allocator to its default mode</span></span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">hold_memory</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

</tt></pre>
</font></code>
<hr/>Input File: example/utility/thread_alloc.cpp

</body>
</html>
