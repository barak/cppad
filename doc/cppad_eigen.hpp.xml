<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Enable Use of Eigen Linear Algebra Package with CppAD</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Enable Use of Eigen Linear Algebra Package with CppAD"/>
<meta name="keywords" id="keywords" content=" enable use eigen linear algebra package with cppad syntax purpose example include files numtraits namespace "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cppad_eigen.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="conj_grad.cpp.xml" target="_top">Prev</a>
</td><td><a href="eigen_plugin.hpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>cppad_eigen.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>testvector</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>General-&gt;</option>
<option>ad_fun.cpp</option>
<option>ad_in_c.cpp</option>
<option>conj_grad.cpp</option>
<option>cppad_eigen.hpp</option>
<option>hes_minor_det.cpp</option>
<option>hes_lu_det.cpp</option>
<option>interface2c.cpp</option>
<option>jac_minor_det.cpp</option>
<option>jac_lu_det.cpp</option>
<option>mul_level</option>
<option>ode_stiff.cpp</option>
<option>mul_level_ode.cpp</option>
<option>mul_level_adolc_ode.cpp</option>
<option>ode_taylor.cpp</option>
<option>stack_machine.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>cppad_eigen.hpp-&gt;</option>
<option>eigen_plugin.hpp</option>
<option>eigen_array.cpp</option>
<option>eigen_det.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Example</option>
<option>Include Files</option>
<option>Eigen NumTraits</option>
<option>CppAD Namespace</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Enable Use of Eigen Linear Algebra Package with CppAD</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><font color="blue"><span style='white-space: nowrap'>#&#xA0;include&#xA0;&lt;cppad/example/cppad_eigen.hpp&gt;</span></font></code>



<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
Enables the use of the
<a href="http://eigen.tuxfamily.org" target="_top"><span style='white-space: nowrap'>eigen</span></a>

linear algebra package with the type 
<code><i><font color="black"><span style='white-space: nowrap'>AD&lt;</span></font></i><font color="blue"><span style='white-space: nowrap'>Base</span></font><i><font color="black"><span style='white-space: nowrap'>&gt;</span></font></i></code>
.

<br/>
<br/>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br/>
The files <a href="eigen_array.cpp.xml" target="_top"><span style='white-space: nowrap'>eigen_array.cpp</span></a>
 and <a href="eigen_det.cpp.xml" target="_top"><span style='white-space: nowrap'>eigen_det.cpp</span></a>

contain an example and test of this include file.
It returns true if it succeeds and false otherwise.

<br/>
<br/>
<b><big><a name="Include Files" id="Include Files">Include Files</a></big></b>
<br/>
The file <code><font color="blue">cppad_eigen.hpp</font></code> includes both
<code><font color="blue">&lt;cppad/cppad.hpp&gt;</font></code> and <code><font color="blue">&lt;Eigen/Core&gt;</font></code>.
In addition,
The file <a href="eigen_plugin.hpp.xml" target="_top"><span style='white-space: nowrap'>eigen_plugin.hpp</span></a>

is used to define <code><font color="blue">value_type</font></code>
in the Eigen matrix class definition so its vectors are
<a href="simplevector.xml" target="_top"><span style='white-space: nowrap'>simple&#xA0;vectors</span></a>
.
<pre style='display:inline'><tt>
<span style="font-weight: bold"><span style="color: #000080"># define</span></span> EIGEN_MATRIXBASE_PLUGIN <span style="color: #990000">&lt;</span>cppad<span style="color: #990000">/</span>example<span style="color: #990000">/</span>eigen_plugin<span style="color: #990000">.</span>hpp<span style="color: #990000">&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;Eigen/Core&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
</tt></pre>
<br/>
<b><big><a name="Eigen NumTraits" id="Eigen NumTraits">Eigen NumTraits</a></big></b>
<br/>
Eigen needs the following definitions to work properly
with 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 scalars:
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> Eigen <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Base</span><span style="color: #990000">&gt;</span> <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">NumTraits</span><span style="color: #990000">&lt;</span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// type that corresponds to the real part of an AD&lt;Base&gt; value</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;Base&gt;</span>   Real<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// type for AD&lt;Base&gt; operations that result in non-integer values</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;Base&gt;</span>   NonInteger<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// type for nested value inside an AD&lt;Base&gt; expression tree</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;Base&gt;</span>   Nested<span style="color: #990000">;</span>

          <span style="font-weight: bold"><span style="color: #0000FF">enum</span></span> <span style="color: #FF0000">{</span>
               <span style="font-style: italic"><span style="color: #9A1900">// does not support complex Base types</span></span>
               IsComplex             <span style="color: #990000">=</span> <span style="color: #993399">0</span> <span style="color: #990000">,</span>
               <span style="font-style: italic"><span style="color: #9A1900">// does not support integer Base types</span></span>
               IsInteger             <span style="color: #990000">=</span> <span style="color: #993399">0</span> <span style="color: #990000">,</span>
               <span style="font-style: italic"><span style="color: #9A1900">// only support signed Base types</span></span>
               IsSigned              <span style="color: #990000">=</span> <span style="color: #993399">1</span> <span style="color: #990000">,</span>
               <span style="font-style: italic"><span style="color: #9A1900">// must initialize an AD&lt;Base&gt; object</span></span>
               RequireInitialization <span style="color: #990000">=</span> <span style="color: #993399">1</span> <span style="color: #990000">,</span>
               <span style="font-style: italic"><span style="color: #9A1900">// computational cost of the corresponding operations</span></span>
               ReadCost              <span style="color: #990000">=</span> <span style="color: #993399">1</span> <span style="color: #990000">,</span>
               AddCost               <span style="color: #990000">=</span> <span style="color: #993399">2</span> <span style="color: #990000">,</span>
               MulCost               <span style="color: #990000">=</span> <span style="color: #993399">2</span>
          <span style="color: #FF0000">}</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// machine epsilon with type of real part of x</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (use assumption that Base is not complex)</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;Base&gt;</span> <span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> CppAD<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span> <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// relaxed version of machine epsilon for comparison of different</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// operations that should result in the same value</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;Base&gt;</span> <span style="font-weight: bold"><span style="color: #000000">dummy_precision</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #993399">100</span><span style="color: #990000">.</span> <span style="color: #990000">*</span>
                    CppAD<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// minimum normalized positive value</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;Base&gt;</span> <span style="font-weight: bold"><span style="color: #000000">lowest</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> CppAD<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">min</span></span><span style="color: #990000">();</span> <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// maximum finite value</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;Base&gt;</span> <span style="font-weight: bold"><span style="color: #000000">highest</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> CppAD<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;</span> <span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">();</span> <span style="color: #FF0000">}</span>

     <span style="color: #FF0000">}</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
<br/>
<b><big><a name="CppAD Namespace" id="CppAD Namespace">CppAD Namespace</a></big></b>
<br/>
Eigen also needs the following definitions to work properly
with 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 scalars:
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>
          <span style="font-style: italic"><span style="color: #9A1900">// functions that return references</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Base</span><span style="color: #990000">&gt;</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> AD<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;&amp;</span> <span style="font-weight: bold"><span style="color: #000000">conj</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> AD<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;&amp;</span> x<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> x<span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Base</span><span style="color: #990000">&gt;</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> AD<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;&amp;</span> <span style="font-weight: bold"><span style="color: #000000">real</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> AD<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;&amp;</span> x<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> x<span style="color: #990000">;</span> <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// functions that return values (note abs is defined by cppad.hpp)</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Base</span><span style="color: #990000">&gt;</span> <span style="color: #008080">AD&lt;Base&gt;</span> <span style="font-weight: bold"><span style="color: #000000">imag</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> AD<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;&amp;</span> x<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;(</span><span style="color: #993399">0</span><span style="color: #990000">.);</span> <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Base</span><span style="color: #990000">&gt;</span> <span style="color: #008080">AD&lt;Base&gt;</span> <span style="font-weight: bold"><span style="color: #000000">abs2</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> AD<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;&amp;</span> x<span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> x <span style="color: #990000">*</span> x<span style="color: #990000">;</span> <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> Eigen <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> internal <span style="color: #FF0000">{</span>

          <span style="font-weight: bold"><span style="color: #0000FF">template</span></span><span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Base</span><span style="color: #990000">&gt;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">significant_decimals_default_impl</span><span style="color: #990000">&lt;</span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">&lt;</span>Base<span style="color: #990000">&gt;,</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">&gt;</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;Base&gt;</span> Scalar<span style="color: #990000">;</span>

               <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">typename</span></span> <span style="color: #008080">NumTraits</span><span style="color: #990000">&lt;</span>Scalar<span style="color: #990000">&gt;::</span><span style="color: #008080">Real</span> RealScalar<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #009900">int</span> <span style="font-weight: bold"><span style="color: #000000">run</span></span><span style="color: #990000">()</span>
               <span style="color: #FF0000">{</span>     <span style="color: #008080">Scalar</span> neg_log_eps <span style="color: #990000">=</span> <span style="color: #990000">-</span> <span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span>
                         NumTraits<span style="color: #990000">&lt;</span>RealScalar<span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">()</span>
                    <span style="color: #990000">);</span>
                    <span style="color: #009900">int</span> ceil_neg_log_eps <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">Integer</span></span><span style="color: #990000">(</span> neg_log_eps <span style="color: #990000">);</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="font-weight: bold"><span style="color: #000000">Scalar</span></span><span style="color: #990000">(</span>ceil_neg_log_eps<span style="color: #990000">)</span> <span style="color: #990000">&lt;</span> neg_log_eps <span style="color: #990000">)</span>
                         ceil_neg_log_eps<span style="color: #990000">++;</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ceil_neg_log_eps<span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: cppad/example/cppad_eigen.hpp

</body>
</html>
