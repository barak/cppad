<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Multi-threading Sum of 1/i Utility Routines</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Multi-threading Sum of 1/i Utility Routines"/>
<meta name="keywords" id="keywords" content=" multi-threading sum 1/i utility routines harmonic_work setup worker combine syntax purpose harmonic_setup num_sum num_threads harmonic_worker harmonic_combine source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_harmonic_work.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="harmonic_time.cpp.xml" target="_top">Prev</a>
</td><td><a href="multi_newton.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>harmonic.cpp</option>
<option>harmonic_work.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
<option>simple_ad_openmp.cpp</option>
<option>simple_ad_bthread.cpp</option>
<option>simple_ad_pthread.cpp</option>
<option>team_example.cpp</option>
<option>harmonic.cpp</option>
<option>multi_newton.cpp</option>
<option>team_thread.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>harmonic.cpp-&gt;</option>
<option>harmonic_time.cpp</option>
<option>harmonic_work.cpp</option>
</select>
</td>
<td>harmonic_work.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>harmonic_setup</option>
<option>---..num_sum</option>
<option>---..num_threads</option>
<option>harmonic_worker</option>
<option>harmonic_combine</option>
<option>Source</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Multi-threading Sum of 1/i Utility Routines</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;harmonic_setup(</span></font><i><font color="black"><span style='white-space: nowrap'>num_sum</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>harmonic_worker()<br/>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;harmonic_combine(</span></font><i><font color="black"><span style='white-space: nowrap'>sum</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
These routines aid in the multi-threading computation of
the summation that defines the harmonic series

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mn>1</mn>
<mo stretchy="false">+</mo>
<mn>1</mn>
<mo stretchy="false">/</mo>
<mn>2</mn>
<mo stretchy="false">+</mo>
<mn>1</mn>
<mo stretchy="false">/</mo>
<mn>3</mn>
<mo stretchy="false">+</mo>
<mo stretchy="false">.</mo>
<mo stretchy="false">.</mo>
<mo stretchy="false">.</mo>
<mo stretchy="false">+</mo>
<mn>1</mn>
<mo stretchy="false">/</mo>
<mi mathvariant='italic'>n</mi>
</mrow></math>

<br/>
<b><big><a name="harmonic_setup" id="harmonic_setup">harmonic_setup</a></big></b>
<br/>
Calling this function splits up the computation of the summation
into different parts for each thread.

<br/>
<br/>
<b><a name="harmonic_setup.num_sum" id="harmonic_setup.num_sum">num_sum</a></b>
<br/>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>num_sum</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sum</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
It specifies the value of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 in the summation.

<br/>
<br/>
<b><a name="harmonic_setup.num_threads" id="harmonic_setup.num_threads">num_threads</a></b>
<br/>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
It specifies the number of threads that will be used for the summation.
In the special case where 
<code><i><font color="black"><span style='white-space: nowrap'>num_thread</span></font></i></code>
 is zero,
the summation should be done by one thread, but without the overhead
of the multi_threading system.

<br/>
<br/>
<b><big><a name="harmonic_worker" id="harmonic_worker">harmonic_worker</a></big></b>
<br/>
Calling this function does the computation for one thread.
Following a call to <code><font color="blue">harmonic_setup</font></code>,
this function should be called by each of the 
<code><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i></code>
 threads.

<br/>
<br/>
<b><big><a name="harmonic_combine" id="harmonic_combine">harmonic_combine</a></big></b>
<br/>
After the 
<code><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i></code>
 threads have completed their
calls to <code><font color="blue">harmonic_worker</font></code>,
this function call will combine the results and return the final summation.

<br/>
<br/>
<b><big><a name="Source" id="Source">Source</a></big></b>

<code><font color="blue">
<pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"harmonic_work.hpp"</span>
<span style="font-weight: bold"><span style="color: #000080"># define</span></span> MAX_NUMBER_THREADS <span style="color: #993399">48</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// number of threads specified by previous call to harmonic_setup</span></span>
     <span style="color: #008080">size_t</span> num_threads_ <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// structure with information for one thread</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #FF0000">{</span>
          <span style="font-style: italic"><span style="color: #9A1900">// index to start summation at (worker input)</span></span>
          <span style="color: #008080">size_t</span> start<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// index to end summation at (worker input)</span></span>
          <span style="color: #008080">size_t</span> stop<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// summation for this thread (worker output)</span></span>
          <span style="color: #009900">double</span> sum<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// false if an error occurs, true otherwise (worker output)</span></span>
          <span style="color: #009900">bool</span>   ok<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span> work_one_t<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// vector with information for all threads</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// (use pointers instead of values to avoid false sharing)</span></span>
     work_one_t<span style="color: #990000">*</span> work_all_<span style="color: #990000">[</span>MAX_NUMBER_THREADS<span style="color: #990000">];</span>
<span style="color: #FF0000">}</span>
<span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------------------</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// do the work for one thread</span></span>
<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">harmonic_worker</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// sum =  1/(stop-1) + 1/(stop-2) + ... + 1/start</span></span>
     <span style="color: #008080">size_t</span> thread_num  <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">thread_num</span></span><span style="color: #990000">();</span>
     <span style="color: #008080">size_t</span> num_threads <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">(</span>num_threads_<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">));</span>
     <span style="color: #009900">bool</span>   ok          <span style="color: #990000">=</span> thread_num <span style="color: #990000">&lt;</span> num_threads<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> start       <span style="color: #990000">=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>start<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> stop        <span style="color: #990000">=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>stop<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> sum         <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>

     ok <span style="color: #990000">&amp;=</span> stop <span style="color: #990000">&gt;</span> start<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> stop<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span> i <span style="color: #990000">&gt;</span> start <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     i<span style="color: #990000">--;</span>
          sum <span style="color: #990000">+=</span> <span style="color: #993399">1</span><span style="color: #990000">.</span> <span style="color: #990000">/</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>

     work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>sum <span style="color: #990000">=</span> sum<span style="color: #990000">;</span>
     work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>ok  <span style="color: #990000">=</span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------------------</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// setup the work up for multiple threads</span></span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">harmonic_setup</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> num_sum<span style="color: #990000">,</span> <span style="color: #008080">size_t</span> num_threads<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// sum = 1/num_sum + 1/(num_sum-1) + ... + 1</span></span>
     num_threads_ <span style="color: #990000">=</span> num_threads<span style="color: #990000">;</span>
     num_threads  <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">(</span>num_threads_<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">));</span>
     <span style="color: #009900">bool</span> ok      <span style="color: #990000">=</span> num_threads <span style="color: #990000">==</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">num_threads</span></span><span style="color: #990000">();</span>
     ok          <span style="color: #990000">&amp;=</span> num_sum <span style="color: #990000">&gt;=</span> num_threads<span style="color: #990000">;</span>

     <span style="color: #008080">size_t</span> thread_num<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>thread_num <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> thread_num <span style="color: #990000">&lt;</span> num_threads<span style="color: #990000">;</span> thread_num<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// allocate separate memory for this thread to avoid false sharing</span></span>
          <span style="color: #008080">size_t</span> <span style="font-weight: bold"><span style="color: #000000">min_bytes</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>work_one_t<span style="color: #990000">)),</span> cap_bytes<span style="color: #990000">;</span>
          <span style="color: #009900">void</span><span style="color: #990000">*</span> v_ptr <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">get_memory</span></span><span style="color: #990000">(</span>min_bytes<span style="color: #990000">,</span> cap_bytes<span style="color: #990000">);</span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span>work_one_t<span style="color: #990000">*&gt;(</span>v_ptr<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// in case this thread's worker does not get called</span></span>
          work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// parameters that define the work for this and previous thread</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> thread_num <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
               work_all_<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]-&gt;</span>start <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> index  <span style="color: #990000">=</span> <span style="color: #990000">(</span>num_sum <span style="color: #990000">*</span> thread_num<span style="color: #990000">)</span> <span style="color: #990000">/</span> num_threads<span style="color: #990000">;</span>
               work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">]-&gt;</span>stop <span style="color: #990000">=</span> index<span style="color: #990000">;</span>
               work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>start  <span style="color: #990000">=</span> index<span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     work_all_<span style="color: #990000">[</span>num_threads<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">]-&gt;</span>stop <span style="color: #990000">=</span> num_sum <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------------------------</span></span>
<span style="font-style: italic"><span style="color: #9A1900">// get the result of the work</span></span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">harmonic_combine</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">&amp;</span> sum<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// sum = 1/num_sum + 1/(num_sum-1) + ... + 1</span></span>
     <span style="color: #009900">bool</span> ok            <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> num_threads <span style="color: #990000">=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">max</span></span><span style="color: #990000">(</span>num_threads_<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">));</span>
     sum                <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// go down so that free memory for other threads before memory for master</span></span>
     <span style="color: #008080">size_t</span> thread_num <span style="color: #990000">=</span> num_threads<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>thread_num<span style="color: #990000">--)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// check that this tread was ok with the work it did</span></span>
          ok  <span style="color: #990000">&amp;=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>ok<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// add this threads contribution to the sum</span></span>
          sum <span style="color: #990000">+=</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]-&gt;</span>sum<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// delete problem specific information</span></span>
          <span style="color: #009900">void</span><span style="color: #990000">*</span> v_ptr <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">static_cast</span></span><span style="color: #990000">&lt;</span><span style="color: #009900">void</span><span style="color: #990000">*&gt;(</span> work_all_<span style="color: #990000">[</span>thread_num<span style="color: #990000">]</span> <span style="color: #990000">);</span>
          thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">return_memory</span></span><span style="color: #990000">(</span> v_ptr <span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">// check that there is no longer any memory inuse by this thread</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (for general applications, the master might still be using memory)</span></span>
          ok <span style="color: #990000">&amp;=</span> thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">inuse</span></span><span style="color: #990000">(</span>thread_num<span style="color: #990000">)</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">// return all memory being held for future use by this thread</span></span>
          thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">free_available</span></span><span style="color: #990000">(</span>thread_num<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: multi_thread/harmonic_work.cpp

</body>
</html>
