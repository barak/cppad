<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Source: LuInvert</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Source: LuInvert"/>
<meta name="keywords" id="keywords" content=" source: luinvert source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_lu_invert.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="lu_invert.cpp.xml" target="_top">Prev</a>
</td><td><a href="rombergone.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>LuDetAndSolve</option>
<option>LuInvert</option>
<option>lu_invert.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>utility-&gt;</option>
<option>ErrorHandler</option>
<option>NearEqual</option>
<option>speed_test</option>
<option>SpeedTest</option>
<option>time_test</option>
<option>NumericType</option>
<option>CheckNumericType</option>
<option>SimpleVector</option>
<option>CheckSimpleVector</option>
<option>nan</option>
<option>pow_int</option>
<option>Poly</option>
<option>LuDetAndSolve</option>
<option>RombergOne</option>
<option>RombergMul</option>
<option>Runge45</option>
<option>Rosen34</option>
<option>OdeErrControl</option>
<option>OdeGear</option>
<option>OdeGearControl</option>
<option>CppAD_vector</option>
<option>thread_alloc</option>
<option>index_sort</option>
<option>to_string</option>
<option>set_union</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>LuDetAndSolve-&gt;</option>
<option>LuSolve</option>
<option>LuFactor</option>
<option>LuInvert</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>LuInvert-&gt;</option>
<option>lu_invert.cpp</option>
<option>lu_invert.hpp</option>
</select>
</td>
<td>lu_invert.hpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Source: LuInvert</big></big></b></center>
<code><font color="blue"># ifndef CPPAD_LU_INVERT_HPP
<code><span style='white-space: nowrap'><br/>
</span></code># define CPPAD_LU_INVERT_HPP

<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/core/cppad_assert.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/check_simple_vector.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/check_numeric_type.hpp&gt;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// BEGIN CppAD namespace</span></span>

<span style="font-style: italic"><span style="color: #9A1900">// LuInvert</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">typename</span></span> <span style="color: #008080">SizeVector</span><span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">typename</span></span> <span style="color: #008080">FloatVector</span><span style="color: #990000">&gt;</span>
<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">LuInvert</span></span><span style="color: #990000">(</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">SizeVector</span>  <span style="color: #990000">&amp;</span>ip<span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">SizeVector</span>  <span style="color: #990000">&amp;</span>jp<span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">FloatVector</span> <span style="color: #990000">&amp;</span>LU<span style="color: #990000">,</span>
     <span style="color: #008080">FloatVector</span>       <span style="color: #990000">&amp;</span>B <span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> k<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// column index in X</span></span>
     <span style="color: #008080">size_t</span> p<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// index along diagonal in LU</span></span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// row index in LU and X</span></span>

     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #0000FF">typename</span></span> <span style="color: #008080">FloatVector</span><span style="color: #990000">::</span><span style="color: #008080">value_type</span> Float<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check numeric type specifications</span></span>
     CheckNumericType<span style="color: #990000">&lt;</span>Float<span style="color: #990000">&gt;();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check simple vector class specifications</span></span>
     CheckSimpleVector<span style="color: #990000">&lt;</span>Float<span style="color: #990000">,</span> FloatVector<span style="color: #990000">&gt;();</span>
     CheckSimpleVector<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">,</span> SizeVector<span style="color: #990000">&gt;();</span>

     <span style="color: #008080">Float</span> etmp<span style="color: #990000">;</span>

     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> ip<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>jp<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> n<span style="color: #990000">,</span>
          <span style="color: #FF0000">"Error in LuInvert: jp must have size equal to n * n"</span>
     <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>LU<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> n <span style="color: #990000">*</span> n<span style="color: #990000">,</span>
          <span style="color: #FF0000">"Error in LuInvert: Lu must have size equal to n * m"</span>
     <span style="color: #990000">);</span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>B<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">/</span> n<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_ASSERT_KNOWN</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>B<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">())</span> <span style="color: #990000">==</span> n <span style="color: #990000">*</span> m<span style="color: #990000">,</span>
          <span style="color: #FF0000">"Error in LuSolve: B must have size equal to a multiple of n"</span>
     <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// temporary storage for reordered solution</span></span>
     <span style="color: #008080">FloatVector</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// loop over equations</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// invert the equation c = L * b</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>p <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> p <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> p<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// solve for c[p]</span></span>
               etmp <span style="color: #990000">=</span> B<span style="color: #990000">[</span> ip<span style="color: #990000">[</span>p<span style="color: #990000">]</span> <span style="color: #990000">*</span> m <span style="color: #990000">+</span> k <span style="color: #990000">]</span> <span style="color: #990000">/</span> LU<span style="color: #990000">[</span> ip<span style="color: #990000">[</span>p<span style="color: #990000">]</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> jp<span style="color: #990000">[</span>p<span style="color: #990000">]</span> <span style="color: #990000">];</span>
               B<span style="color: #990000">[</span> ip<span style="color: #990000">[</span>p<span style="color: #990000">]</span> <span style="color: #990000">*</span> m <span style="color: #990000">+</span> k <span style="color: #990000">]</span> <span style="color: #990000">=</span> etmp<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// subtract off effect on other variables</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> p<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                    B<span style="color: #990000">[</span> ip<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">*</span> m <span style="color: #990000">+</span> k <span style="color: #990000">]</span> <span style="color: #990000">-=</span>
                         etmp <span style="color: #990000">*</span> LU<span style="color: #990000">[</span> ip<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> jp<span style="color: #990000">[</span>p<span style="color: #990000">]</span> <span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// invert the equation x = U * c</span></span>
          p <span style="color: #990000">=</span> n<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span> p <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #990000">--</span>p<span style="color: #990000">;</span>
               etmp       <span style="color: #990000">=</span> B<span style="color: #990000">[</span> ip<span style="color: #990000">[</span>p<span style="color: #990000">]</span> <span style="color: #990000">*</span> m <span style="color: #990000">+</span> k <span style="color: #990000">];</span>
               x<span style="color: #990000">[</span> jp<span style="color: #990000">[</span>p<span style="color: #990000">]</span> <span style="color: #990000">]</span> <span style="color: #990000">=</span> etmp<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> p<span style="color: #990000">;</span> i<span style="color: #990000">++</span> <span style="color: #990000">)</span>
                    B<span style="color: #990000">[</span> ip<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">*</span> m <span style="color: #990000">+</span> k <span style="color: #990000">]</span> <span style="color: #990000">-=</span>
                         etmp <span style="color: #990000">*</span> LU<span style="color: #990000">[</span> ip<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> jp<span style="color: #990000">[</span>p<span style="color: #990000">]</span> <span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>

          <span style="font-style: italic"><span style="color: #9A1900">// copy reordered solution into B</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               B<span style="color: #990000">[</span>i <span style="color: #990000">*</span> m <span style="color: #990000">+</span> k<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// END CppAD namespace</span></span></tt></pre>
# endif
</font></code>


<hr/>Input File: omh/lu_invert_hpp.omh

</body>
</html>
