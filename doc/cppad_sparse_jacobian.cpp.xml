<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>CppAD Speed: Sparse Jacobian</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="CppAD Speed: Sparse Jacobian"/>
<meta name="keywords" id="keywords" content=" cppad speed: sparse jacobian link_sparse_jacobian speed specifications implementation "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cppad_sparse_jacobian.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="cppad_sparse_hessian.cpp.xml" target="_top">Prev</a>
</td><td><a href="speed_fadbad.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_cppad</option>
<option>cppad_sparse_jacobian.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_cppad-&gt;</option>
<option>cppad_det_minor.cpp</option>
<option>cppad_det_lu.cpp</option>
<option>cppad_mat_mul.cpp</option>
<option>cppad_ode.cpp</option>
<option>cppad_poly.cpp</option>
<option>cppad_sparse_hessian.cpp</option>
<option>cppad_sparse_jacobian.cpp</option>
</select>
</td>
<td>cppad_sparse_jacobian.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Specifications</option>
<option>Implementation</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>CppAD Speed: Sparse Jacobian</big></big></b></center>
<br/>
<b><big><a name="Specifications" id="Specifications">Specifications</a></big></b>
<br/>
See <a href="link_sparse_jacobian.xml" target="_top"><span style='white-space: nowrap'>link_sparse_jacobian</span></a>
.

<br/>
<br/>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>


<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/speed/uniform_01.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/speed/sparse_jac_fun.hpp&gt;</span>

<span style="font-style: italic"><span style="color: #9A1900">// Note that CppAD uses global_option["memory"] at the main program level</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;map&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> std<span style="color: #990000">::</span><span style="color: #008080">map&lt;std::string, bool&gt;</span> global_option<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="color: #008080">vector&lt;size_t&gt;</span>  s_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="color: #008080">vector&lt;bool&gt;</span>    b_vector<span style="color: #990000">;</span>

     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">calc_sparsity</span></span><span style="color: #990000">(</span>
          CppAD<span style="color: #990000">::</span>sparse_rc<span style="color: #990000">&lt;</span>s_vector<span style="color: #990000">&gt;&amp;</span> sparsity <span style="color: #990000">,</span>
          CppAD<span style="color: #990000">::</span>ADFun<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>       f        <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> reverse       <span style="color: #990000">=</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"revsparsity"</span><span style="color: #990000">];</span>
          <span style="color: #009900">bool</span> transpose     <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #009900">bool</span> internal_bool <span style="color: #990000">=</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"boolsparsity"</span><span style="color: #990000">];</span>
          <span style="color: #009900">bool</span> dependency    <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #009900">bool</span> subgraph      <span style="color: #990000">=</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"subsparsity"</span><span style="color: #990000">];</span>
          <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Domain</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Range</span></span><span style="color: #990000">();</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> subgraph <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">b_vector</span> <span style="font-weight: bold"><span style="color: #000000">select_domain</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">select_range</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> <span style="color: #990000">++</span>j<span style="color: #990000">)</span>
                    select_domain<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> <span style="color: #990000">++</span>i<span style="color: #990000">)</span>
                    select_range<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
               f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">subgraph_sparsity</span></span><span style="color: #990000">(</span>
                    select_domain<span style="color: #990000">,</span> select_range<span style="color: #990000">,</span> transpose<span style="color: #990000">,</span> sparsity
               <span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> q <span style="color: #990000">=</span> n<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> reverse <span style="color: #990000">)</span>
                    q <span style="color: #990000">=</span> m<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_rc&lt;s_vector&gt;</span> identity<span style="color: #990000">;</span>
               identity<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>q<span style="color: #990000">,</span> q<span style="color: #990000">,</span> q<span style="color: #990000">);</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> q<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    identity<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">set</span></span><span style="color: #990000">(</span>k<span style="color: #990000">,</span> k<span style="color: #990000">,</span> k<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> reverse <span style="color: #990000">)</span>
               <span style="color: #FF0000">{</span>     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">rev_jac_sparsity</span></span><span style="color: #990000">(</span>
                         identity<span style="color: #990000">,</span> transpose<span style="color: #990000">,</span> dependency<span style="color: #990000">,</span> internal_bool<span style="color: #990000">,</span> sparsity
                    <span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
               <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
               <span style="color: #FF0000">{</span>     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">for_jac_sparsity</span></span><span style="color: #990000">(</span>
                         identity<span style="color: #990000">,</span> transpose<span style="color: #990000">,</span> dependency<span style="color: #990000">,</span> internal_bool<span style="color: #990000">,</span> sparsity
                    <span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">link_sparse_jacobian</span></span><span style="color: #990000">(</span>
     <span style="color: #008080">size_t</span>                           size     <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>                           repeat   <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>                           m        <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;&amp;</span>     row      <span style="color: #990000">,</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span>size_t<span style="color: #990000">&gt;&amp;</span>     col      <span style="color: #990000">,</span>
           CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>     x        <span style="color: #990000">,</span>
           CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;&amp;</span>     jacobian <span style="color: #990000">,</span>
           size_t<span style="color: #990000">&amp;</span>                    n_sweep  <span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>
     <span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// check global options</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span><span style="color: #990000">*</span> valid<span style="color: #990000">[]</span> <span style="color: #990000">=</span> <span style="color: #FF0000">{</span>
          <span style="color: #FF0000">"memory"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"onetape"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"optimize"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"subgraph"</span><span style="color: #990000">,</span>
<span style="font-weight: bold"><span style="color: #000080"># if</span></span> CPPAD_HAS_COLPACK
          <span style="color: #FF0000">"boolsparsity"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"revsparsity"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"subsparsity"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"colpack"</span>
<span style="font-weight: bold"><span style="color: #000080"># else</span></span>
          <span style="color: #FF0000">"boolsparsity"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"revsparsity"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"subsparsity"</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
     <span style="color: #FF0000">}</span><span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> n_valid <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>valid<span style="color: #990000">)</span> <span style="color: #990000">/</span> <span style="font-weight: bold"><span style="color: #0000FF">sizeof</span></span><span style="color: #990000">(</span>valid<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> std<span style="color: #990000">::</span>map<span style="color: #990000">&lt;</span>std<span style="color: #990000">::</span>string<span style="color: #990000">,</span> <span style="color: #009900">bool</span><span style="color: #990000">&gt;::</span><span style="color: #008080">iterator</span> iterator<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">iterator</span> itr<span style="color: #990000">=</span>global_option<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">begin</span></span><span style="color: #990000">();</span> itr<span style="color: #990000">!=</span>global_option<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">end</span></span><span style="color: #990000">();</span> <span style="color: #990000">++</span>itr<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> itr<span style="color: #990000">-&gt;</span>second <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n_valid<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
                    ok <span style="color: #990000">|=</span> itr<span style="color: #990000">-&gt;</span>first <span style="color: #990000">==</span> valid<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> ok <span style="color: #990000">)</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"subsparsity"</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"boolsparisty"</span><span style="color: #990000">]</span> <span style="color: #990000">||</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"revsparsity"</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ---------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// optimization options: no conditional skips or compare operators</span></span>
     std<span style="color: #990000">::</span><span style="color: #008080">string</span> options<span style="color: #990000">=</span><span style="color: #FF0000">"no_compare_op"</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// setup</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;double&gt;</span>    a_double<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="color: #008080">vector&lt;double&gt;</span>       d_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="color: #008080">vector&lt;a_double&gt;</span>     ad_vector<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="color: #008080">size_t</span> order <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>         <span style="font-style: italic"><span style="color: #9A1900">// derivative order corresponding to function</span></span>
     <span style="color: #008080">size_t</span> n     <span style="color: #990000">=</span> size<span style="color: #990000">;</span>      <span style="font-style: italic"><span style="color: #9A1900">// number of independent variables</span></span>
     <span style="color: #008080">ad_vector</span>  <span style="font-weight: bold"><span style="color: #000000">a_x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>        <span style="font-style: italic"><span style="color: #9A1900">// AD domain space vector</span></span>
     <span style="color: #008080">ad_vector</span>  <span style="font-weight: bold"><span style="color: #000000">a_y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>        <span style="font-style: italic"><span style="color: #9A1900">// AD range space vector y = f(x)</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> f<span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// AD function object</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// declare sparsity pattern</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_rc&lt;s_vector&gt;</span>  sparsity<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// declare subset where Jacobian is evaluated</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_rc&lt;s_vector&gt;</span> subset_pattern<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> nr  <span style="color: #990000">=</span> m<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> nc  <span style="color: #990000">=</span> n<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> nnz <span style="color: #990000">=</span> row<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
     subset_pattern<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">resize</span></span><span style="color: #990000">(</span>nr<span style="color: #990000">,</span> nc<span style="color: #990000">,</span> nnz<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> nnz<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          subset_pattern<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">set</span></span><span style="color: #990000">(</span>k<span style="color: #990000">,</span> row<span style="color: #990000">[</span>k<span style="color: #990000">],</span> col<span style="color: #990000">[</span>k<span style="color: #990000">]);</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_rcv&lt;s_vector, d_vector&gt;</span> <span style="font-weight: bold"><span style="color: #000000">subset</span></span><span style="color: #990000">(</span> subset_pattern <span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> d_vector<span style="color: #990000">&amp;</span> <span style="font-weight: bold"><span style="color: #000000">subset_val</span></span><span style="color: #990000">(</span> subset<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">val</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// coloring method</span></span>
     std<span style="color: #990000">::</span><span style="color: #008080">string</span> coloring <span style="color: #990000">=</span> <span style="color: #FF0000">"cppad"</span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># if</span></span> CPPAD_HAS_COLPACK
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"colpack"</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
          coloring <span style="color: #990000">=</span> <span style="color: #FF0000">"colpack"</span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// maximum number of colors at once</span></span>
     <span style="color: #008080">size_t</span> group_max <span style="color: #990000">=</span> <span style="color: #993399">25</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ------------------------------------------------------</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"onetape"</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>repeat<span style="color: #990000">--)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// choose a value for x</span></span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">uniform_01</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> x<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               a_x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables</span></span>
          <span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// AD computation of f(x)</span></span>
          CppAD<span style="color: #990000">::</span>sparse_jac_fun<span style="color: #990000">&lt;</span>a_double<span style="color: #990000">&gt;(</span>m<span style="color: #990000">,</span> n<span style="color: #990000">,</span> a_x<span style="color: #990000">,</span> row<span style="color: #990000">,</span> col<span style="color: #990000">,</span> order<span style="color: #990000">,</span> a_y<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// create function object f : X -&gt; Y</span></span>
          f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">,</span> a_y<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"optimize"</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
               f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">optimize</span></span><span style="color: #990000">(</span>options<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// skip comparison operators</span></span>
          f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_count</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// calculate the Jacobian sparsity pattern for this function</span></span>
          <span style="font-weight: bold"><span style="color: #000000">calc_sparsity</span></span><span style="color: #990000">(</span>sparsity<span style="color: #990000">,</span> f<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"subgraph"</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// user reverse mode becasue forward not yet implemented</span></span>
               f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">subgraph_jac_rev</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> subset<span style="color: #990000">);</span>
               n_sweep <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// structure that holds some of the work done by sparse_jac_for</span></span>
               CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_jac_work</span> work<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// calculate the Jacobian at this x</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// (use forward mode because m &gt; n ?)</span></span>
               n_sweep <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">sparse_jac_for</span></span><span style="color: #990000">(</span>
                    group_max<span style="color: #990000">,</span> x<span style="color: #990000">,</span> subset<span style="color: #990000">,</span> sparsity<span style="color: #990000">,</span> coloring<span style="color: #990000">,</span> work
               <span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> nnz<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
               jacobian<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> subset_val<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// choose a value for x</span></span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">uniform_01</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> x<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               a_x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables</span></span>
          <span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// AD computation of f(x)</span></span>
          CppAD<span style="color: #990000">::</span>sparse_jac_fun<span style="color: #990000">&lt;</span>a_double<span style="color: #990000">&gt;(</span>m<span style="color: #990000">,</span> n<span style="color: #990000">,</span> a_x<span style="color: #990000">,</span> row<span style="color: #990000">,</span> col<span style="color: #990000">,</span> order<span style="color: #990000">,</span> a_y<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// create function object f : X -&gt; Y</span></span>
          f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">,</span> a_y<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"optimize"</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
               f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">optimize</span></span><span style="color: #990000">(</span>options<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// skip comparison operators</span></span>
          f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_count</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// calculate the Jacobian sparsity pattern for this function</span></span>
          <span style="font-weight: bold"><span style="color: #000000">calc_sparsity</span></span><span style="color: #990000">(</span>sparsity<span style="color: #990000">,</span> f<span style="color: #990000">);</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// structure that holds some of the work done by sparse_jac_for</span></span>
          CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_jac_work</span> work<span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>repeat<span style="color: #990000">--)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// choose a value for x</span></span>
               CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">uniform_01</span></span><span style="color: #990000">(</span>n<span style="color: #990000">,</span> x<span style="color: #990000">);</span>
               <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// calculate the Jacobian at this x</span></span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"subgraph"</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
               <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// user reverse mode becasue forward not yet implemented</span></span>
                    f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">subgraph_jac_rev</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> subset<span style="color: #990000">);</span>
                    n_sweep <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
               <span style="color: #FF0000">}</span>
               <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
               <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// (use forward mode because m &gt; n ?)</span></span>
                    n_sweep <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">sparse_jac_for</span></span><span style="color: #990000">(</span>
                         group_max<span style="color: #990000">,</span> x<span style="color: #990000">,</span> subset<span style="color: #990000">,</span> sparsity<span style="color: #990000">,</span> coloring<span style="color: #990000">,</span> work
                    <span style="color: #990000">);</span>
               <span style="color: #FF0000">}</span>
               <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> nnz<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
                    jacobian<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">=</span> subset_val<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: speed/cppad/sparse_jacobian.cpp

</body>
</html>
