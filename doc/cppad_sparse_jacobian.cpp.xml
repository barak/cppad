<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>CppAD Speed: Sparse Jacobian</title>
<meta name="description" id="description" content="CppAD Speed: Sparse Jacobian"/>
<meta name="keywords" id="keywords" content=" link_sparse_jacobian cppad speed sparse jacobian "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cppad_sparse_jacobian.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="cppad_sparse_hessian.cpp.xml" target="_top">Prev</a>
</td><td><a href="cppad_print_optimize.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_cppad</option>
<option>cppad_sparse_jacobian.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>library</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_cppad-&gt;</option>
<option>cppad_det_minor.cpp</option>
<option>cppad_det_lu.cpp</option>
<option>cppad_mat_mul.cpp</option>
<option>cppad_ode.cpp</option>
<option>cppad_poly.cpp</option>
<option>cppad_sparse_hessian.cpp</option>
<option>cppad_sparse_jacobian.cpp</option>
<option>cppad_print_optimize</option>
</select>
</td>
<td>cppad_sparse_jacobian.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Specifications</option>
<option>Implementation</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>CppAD Speed: Sparse Jacobian</big></big></b></center>
<br/>
<b><big><a name="Specifications" id="Specifications">Specifications</a></big></b>
<br/>
See <a href="link_sparse_jacobian.xml" target="_top"><span style='white-space: nowrap'>link_sparse_jacobian</span></a>
.

<br/>
<br/>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>


<code><font color='blue'><pre style='display:inline'> 
# include &lt;cppad/cppad.hpp&gt;
# include &lt;cppad/speed/uniform_01.hpp&gt;
# include &lt;cppad/speed/sparse_jac_fun.hpp&gt;
# include &quot;print_optimize.hpp&quot;

// determines if we are using bool or set sparsity patterns
# define USE_SET_SPARSITY 1

namespace {
	using CppAD::vector;
	typedef vector&lt; std::set&lt;size_t&gt; &gt;  SetVector;
	typedef vector&lt;bool&gt;                BoolVector;

	void calc_sparsity(SetVector&amp; sparsity_set, CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt;&amp; f)
	{	size_t n = f.Domain();
		SetVector r_set(n);
		for(size_t j = 0; j &lt; n; j++)
			r_set[j].insert(j);
		sparsity_set = f.ForSparseJac(n, r_set);
	}
	void calc_sparsity(BoolVector&amp; sparsity_bool, CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt;&amp; f)
	{	size_t n = f.Domain();
		BoolVector r_bool(n * n);
		size_t i, j;
		for(i = 0; i &lt; n; i++)
		{	for(j = 0; j &lt; n; j++)
				r_bool[ i * n + j] = false;
			r_bool[ i * n + i] = true;
		}
		sparsity_bool = f.ForSparseJac(n, r_bool);
	}

}

bool link_sparse_jacobian(
	size_t                     size     , 
	size_t                     repeat   , 
	size_t                     m        ,
	CppAD::vector&lt;double&gt;     &amp;x        ,
	CppAD::vector&lt;size_t&gt;     &amp;row      ,
	CppAD::vector&lt;size_t&gt;     &amp;col      ,
	CppAD::vector&lt;double&gt;     &amp;jacobian )
{
	// -----------------------------------------------------
	// setup
	typedef vector&lt; std::set&lt;size_t&gt; &gt;  SetVector;
	typedef CppAD::vector&lt;double&gt;       DblVector;
	typedef CppAD::<a href="ad.xml" target="_top">AD</a>&lt;double&gt;           ADScalar;
	typedef CppAD::vector&lt;ADScalar&gt;     ADVector;

	size_t i, j, k;
	size_t order = 0;         // derivative order corresponding to function 
	size_t K     = row.size();// number of row and column indices 
	size_t n     = size;      // number of independent variables
	ADVector   a_x(n);        // AD domain space vector
	ADVector   a_y(m);        // AD range space vector y = g(x)
	DblVector  jac(K);        // non-zeros in Jacobian
	CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f;   // AD function object

	// use the unspecified fact that size is non-decreasing between calls
	static size_t previous_size = 0;
	bool print    = (repeat &gt; 1) &amp; (previous_size != size);
	previous_size = size;

	// declare sparsity pattern
# if USE_SET_SPARSITY
	SetVector sparsity(m);
# else
	typedef vector&lt;bool&gt;  BoolVector;
	BoolVector sparsity(m * n);
# endif
	// initialize all entries as zero
	for(i = 0; i &lt; m; i++)
	{	for(j = 0; j &lt; n; j++)
			jacobian[ i * n + j ] = 0.;
	}
	// ------------------------------------------------------
	extern bool global_retape;
	if( global_retape ) while(repeat--)
	{	// choose a value for x 
		CppAD::uniform_01(n, x);
		for(k = 0; k &lt; n; k++)
			a_x[k] = x[k];

		// declare independent variables
		<a href="independent.xml" target="_top">Independent</a>(a_x);	

		// AD computation of f (x) 
		CppAD::sparse_jac_fun&lt;ADScalar&gt;(m, n, a_x, row, col, order, a_y);

		// create function object f : X -&gt; Y
		f.Dependent(a_x, a_y);

		extern bool global_optimize;
		if( global_optimize )
		{	print_optimize(f, print, &quot;cppad_sparse_jacobian_optimize&quot;, size);
			print = false;
		}

		// calculate the Jacobian sparsity pattern for this function
		calc_sparsity(sparsity, f);

		// structure that holds some of the work done by SparseJacobian
		CppAD::sparse_jacobian_work work;

		// calculate the Jacobian at this x
		// (use forward mode because m &gt; n ?)
		f.SparseJacobianForward(x, sparsity, row, col, jac, work);
		for(k = 0; k &lt; K; k++)
			jacobian[ row[k] * n + col[k] ] = jac[k];
	}
	else
	{	// choose a value for x 
		CppAD::uniform_01(n, x);
		for(k = 0; k &lt; n; k++)
			a_x[k] = x[k];

		// declare independent variables
		<a href="independent.xml" target="_top">Independent</a>(a_x);	

		// AD computation of f (x) 
		CppAD::sparse_jac_fun&lt;ADScalar&gt;(m, n, a_x, row, col, order, a_y);

		// create function object f : X -&gt; Y
		f.Dependent(a_x, a_y);

		extern bool global_optimize;
		if( global_optimize )
		{	print_optimize(f, print, &quot;cppad_sparse_jacobian_optimize&quot;, size);
			print = false;
		}

		// calculate the Jacobian sparsity pattern for this function
		calc_sparsity(sparsity, f);

		// structure that holds some of the work done by SparseJacobian
		CppAD::sparse_jacobian_work work;

		while(repeat--)
		{	// choose a value for x 
			CppAD::uniform_01(n, x);

			// calculate the Jacobian at this x
			// (use forward mode because m &gt; n ?)
			f.SparseJacobianForward(x, sparsity, row, col, jac, work);
			for(k = 0; k &lt; K; k++)
				jacobian[ row[k] * n + col[k] ] = jac[k];
		}
	}
	return true;
}
</pre></font></code>


<hr/>Input File: speed/cppad/sparse_jacobian.cpp

</body>
</html>
