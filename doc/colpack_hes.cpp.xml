<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Using ColPack: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Using ColPack: Example and Test"/>
<meta name="keywords" id="keywords" content=" using colpack: example test colpack hessian sparse "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_colpack_hes.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="colpack_jac.cpp.xml" target="_top">Prev</a>
</td><td><a href="get_colpack.sh.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Install</option>
<option>cmake</option>
<option>colpack_prefix</option>
<option>colpack_hes.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Install-&gt;</option>
<option>download</option>
<option>cmake</option>
<option>cmake_check</option>
<option>pkgconfig</option>
<option>auto_tools</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>cmake-&gt;</option>
<option>adolc_prefix</option>
<option>colpack_prefix</option>
<option>eigen_prefix</option>
<option>fadbad_prefix</option>
<option>ipopt_prefix</option>
<option>sacado_prefix</option>
<option>cppad_testvector</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>colpack_prefix-&gt;</option>
<option>colpack_jac.cpp</option>
<option>colpack_hes.cpp</option>
<option>get_colpack.sh</option>
</select>
</td>
<td>colpack_hes.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>Using ColPack: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;
bool colpack_hes(void)
{	bool ok = true;
	using CppAD::AD;
	using CppAD::NearEqual;
	typedef <a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(AD&lt;double&gt;) a_vector;
	typedef <a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(double)     d_vector;
	typedef CppAD::vector&lt;size_t&gt;        i_vector;
	size_t i, j, k, ell;
	double eps = 10. * CppAD::numeric_limits&lt;double&gt;::epsilon();

	// domain space vector
	size_t n = 5;
	a_vector  a_x(n);
	for(j = 0; j &lt; n; j++)
		a_x[j] = <a href="ad.xml" target="_top">AD</a>&lt;double&gt; (0);

	// declare independent variables and starting recording
	CppAD::<a href="independent.xml" target="_top">Independent</a>(a_x);

	// colpack example case where hessian is a spear head
	// i.e, H(i, j) non zero implies i = 0, j = 0, or i = j
	<a href="ad.xml" target="_top">AD</a>&lt;double&gt; sum = 0.0;
	// partial_0 partial_j = x[j]
	// partial_j partial_j = x[0]
	for(j = 1; j &lt; n; j++)
		sum += a_x[0] * a_x[j] * a_x[j] / 2.0;
	//
	// partial_i partial_i = 2 * x[i]
	for(i = 0; i &lt; n; i++)
		sum += a_x[i] * a_x[i] * a_x[i] / 3.0;

	// declare dependent variables
	size_t m = 1;
	a_vector  a_y(m);
	a_y[0] = sum;

	// create f: x -&gt; y and stop tape recording
	CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f(a_x, a_y);

	// new value for the independent variable vector
	d_vector x(n);
	for(j = 0; j &lt; n; j++)
		x[j] = double(j + 1);

	/*
	      [ 2  2  3  4  5 ]
	hes = [ 2  5  0  0  0 ]
	      [ 3  0  7  0  0 ]
	      [ 4  0  0  9  0 ]
	      [ 5  0  0  0 11 ]
	*/
	d_vector check(n * n);
	for(i = 0; i &lt; n; i++)
	{	for(j = 0; j &lt; n; j++)
		{	size_t index = i * n + j;
			check[index] = 0.0;
			if( i == 0 &amp;&amp; 1 &lt;= j )
				check[index] += x[j];
			if( 1 &lt;= i &amp;&amp; j == 0 )
				check[index] += x[i];
			if( i == j )
			{	check[index] += 2.0 * x[i];
				if( i != 0 )
					check[index] += x[0];
			}
		}
	}
	// Normally one would use f.RevSparseHes to compute
	// sparsity pattern, but for this example we extract it from check.
	std::vector&lt; std::set&lt;size_t&gt; &gt;  p(n);
	i_vector row, col;
	for(i = 0; i &lt; n; i++)
	{	for(j = 0; j &lt; n; j++)
		{	ell = i * n + j;
			if( check[ell] != 0. )
			{	// insert this non-zero entry in sparsity pattern
				p[i].insert(j);

				// the Hessian is symmetric, so only upper lower triangle
				if( j &lt;= i )
				{	row.push_back(i);
					col.push_back(j);
				}
			}
		}
	}
	size_t K = row.size();
	d_vector hes(K);

	// contrast and check results using both cppad and colpack
	CppAD::sparse_hessian_work work;
	for(size_t i_method = 0; i_method &lt; 3; i_method++)
	{	// empty work structure
		ok &amp;= work.color_method == &quot;cppad.symmetric&quot;;
		if( i_method == 2 )
			work.color_method = &quot;colpack.star&quot;;

		// compute Hessian
		d_vector w(m);
		w[0] = 1.0;
		size_t n_sweep = f.SparseHessian(x, w, p, row, col, hes, work);

		// check result
		for(k = 0; k &lt; K; k++)
		{	ell = row[k] * n + col[k];
			ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(check[ell], hes[k], eps, eps);
		}
		if( work.color_method != &quot;cppad.general&quot; )
			ok &amp;= n_sweep == 2;
		else
			ok &amp;= n_sweep == 5;
		//
		// check that clear resets color_method to cppad.symmetric
		work.clear();
		ok &amp;= work.color_method == &quot;cppad.symmetric&quot;;
	}

	return ok;
}
</pre>

</font></code>


<hr/>Input File: example/colpack_hes.cpp

</body>
</html>
