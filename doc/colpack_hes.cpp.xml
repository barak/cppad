<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Using ColPack: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Using ColPack: Example and Test"/>
<meta name="keywords" id="keywords" content=" using colpack: example test colpack hessian sparse "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_colpack_hes.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="colpack_jac.cpp.xml" target="_top">Prev</a>
</td><td><a href="get_colpack.sh.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Install</option>
<option>cmake</option>
<option>colpack_prefix</option>
<option>colpack_hes.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Install-&gt;</option>
<option>download</option>
<option>cmake</option>
<option>cmake_check</option>
<option>pkgconfig</option>
<option>auto_tools</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>cmake-&gt;</option>
<option>adolc_prefix</option>
<option>colpack_prefix</option>
<option>eigen_prefix</option>
<option>fadbad_prefix</option>
<option>ipopt_prefix</option>
<option>sacado_prefix</option>
<option>cppad_testvector</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>colpack_prefix-&gt;</option>
<option>colpack_jac.cpp</option>
<option>colpack_hes.cpp</option>
<option>get_colpack.sh</option>
</select>
</td>
<td>colpack_hes.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Using ColPack: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">colpack_hes</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> a_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span>     d_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;size_t&gt;</span>        i_vector<span style="color: #990000">;</span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">,</span> k<span style="color: #990000">,</span> ell<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> eps <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> CppAD<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">5</span><span style="color: #990000">;</span>
     <span style="color: #008080">a_vector</span>  <span style="font-weight: bold"><span style="color: #000000">a_x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          a_x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and starting recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// colpack example case where hessian is a spear head</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// i.e, H(i, j) non zero implies i = 0, j = 0, or i = j</span></span>
     <span style="color: #008080">AD&lt;double&gt;</span> sum <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial_0 partial_j = x[j]</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial_j partial_j = x[0]</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          sum <span style="color: #990000">+=</span> a_x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> a_x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">*</span> a_x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">/</span> <span style="color: #993399">2.0</span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// partial_i partial_i = 2 * x[i]</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          sum <span style="color: #990000">+=</span> a_x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">*</span> a_x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">*</span> a_x<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">/</span> <span style="color: #993399">3.0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare dependent variables</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #008080">a_vector</span>  <span style="font-weight: bold"><span style="color: #000000">a_y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     a_y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> sum<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// create f: x -&gt; y and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">,</span> a_y<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// new value for the independent variable vector</span></span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>j <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">/*</span></span>
<span style="font-style: italic"><span style="color: #9A1900">           [ 2  2  3  4  5 ]</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     hes = [ 2  5  0  0  0 ]</span></span>
<span style="font-style: italic"><span style="color: #9A1900">           [ 3  0  7  0  0 ]</span></span>
<span style="font-style: italic"><span style="color: #9A1900">           [ 4  0  0  9  0 ]</span></span>
<span style="font-style: italic"><span style="color: #9A1900">           [ 5  0  0  0 11 ]</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     */</span></span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">check</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> index <span style="color: #990000">=</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">;</span>
               check<span style="color: #990000">[</span>index<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">&amp;&amp;</span> <span style="color: #993399">1</span> <span style="color: #990000">&lt;=</span> j <span style="color: #990000">)</span>
                    check<span style="color: #990000">[</span>index<span style="color: #990000">]</span> <span style="color: #990000">+=</span> x<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #993399">1</span> <span style="color: #990000">&lt;=</span> i <span style="color: #990000">&amp;&amp;</span> j <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
                    check<span style="color: #990000">[</span>index<span style="color: #990000">]</span> <span style="color: #990000">+=</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i <span style="color: #990000">==</span> j <span style="color: #990000">)</span>
               <span style="color: #FF0000">{</span>     check<span style="color: #990000">[</span>index<span style="color: #990000">]</span> <span style="color: #990000">+=</span> <span style="color: #993399">2.0</span> <span style="color: #990000">*</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
                    <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i <span style="color: #990000">!=</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
                         check<span style="color: #990000">[</span>index<span style="color: #990000">]</span> <span style="color: #990000">+=</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// Normally one would use f.RevSparseHes to compute</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// sparsity pattern, but for this example we extract it from check.</span></span>
     std<span style="color: #990000">::</span><span style="color: #008080">vector&lt; std::set&lt;size_t&gt; &gt;</span>  <span style="font-weight: bold"><span style="color: #000000">p</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="color: #008080">i_vector</span> row<span style="color: #990000">,</span> col<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     ell <span style="color: #990000">=</span> i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> check<span style="color: #990000">[</span>ell<span style="color: #990000">]</span> <span style="color: #990000">!=</span> <span style="color: #993399">0</span><span style="color: #990000">.</span> <span style="color: #990000">)</span>
               <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// insert this non-zero entry in sparsity pattern</span></span>
                    p<span style="color: #990000">[</span>i<span style="color: #990000">].</span><span style="font-weight: bold"><span style="color: #000000">insert</span></span><span style="color: #990000">(</span>j<span style="color: #990000">);</span>

                    <span style="font-style: italic"><span style="color: #9A1900">// the Hessian is symmetric, so only upper lower triangle</span></span>
                    <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> j <span style="color: #990000">&lt;=</span> i <span style="color: #990000">)</span>
                    <span style="color: #FF0000">{</span>     row<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
                         col<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">push_back</span></span><span style="color: #990000">(</span>j<span style="color: #990000">);</span>
                    <span style="color: #FF0000">}</span>
               <span style="color: #FF0000">}</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="color: #008080">size_t</span> K <span style="color: #990000">=</span> row<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">hes</span></span><span style="color: #990000">(</span>K<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// contrast and check results using both cppad and colpack</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">sparse_hessian_work</span> work<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i_method <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i_method <span style="color: #990000">&lt;</span> <span style="color: #993399">3</span><span style="color: #990000">;</span> i_method<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// empty work structure</span></span>
          ok <span style="color: #990000">&amp;=</span> work<span style="color: #990000">.</span>color_method <span style="color: #990000">==</span> <span style="color: #FF0000">"cppad.symmetric"</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> i_method <span style="color: #990000">==</span> <span style="color: #993399">2</span> <span style="color: #990000">)</span>
               work<span style="color: #990000">.</span>color_method <span style="color: #990000">=</span> <span style="color: #FF0000">"colpack.star"</span><span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// compute Hessian</span></span>
          <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">w</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
          w<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
          <span style="color: #008080">size_t</span> n_sweep <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">SparseHessian</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span> w<span style="color: #990000">,</span> p<span style="color: #990000">,</span> row<span style="color: #990000">,</span> col<span style="color: #990000">,</span> hes<span style="color: #990000">,</span> work<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// check result</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>k <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> k <span style="color: #990000">&lt;</span> K<span style="color: #990000">;</span> k<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     ell <span style="color: #990000">=</span> row<span style="color: #990000">[</span>k<span style="color: #990000">]</span> <span style="color: #990000">*</span> n <span style="color: #990000">+</span> col<span style="color: #990000">[</span>k<span style="color: #990000">];</span>
               ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>check<span style="color: #990000">[</span>ell<span style="color: #990000">],</span> hes<span style="color: #990000">[</span>k<span style="color: #990000">],</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> work<span style="color: #990000">.</span>color_method <span style="color: #990000">!=</span> <span style="color: #FF0000">"cppad.general"</span> <span style="color: #990000">)</span>
               ok <span style="color: #990000">&amp;=</span> n_sweep <span style="color: #990000">==</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
               ok <span style="color: #990000">&amp;=</span> n_sweep <span style="color: #990000">==</span> <span style="color: #993399">5</span><span style="color: #990000">;</span>
          <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// check that clear resets color_method to cppad.symmetric</span></span>
          work<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>
          ok <span style="color: #990000">&amp;=</span> work<span style="color: #990000">.</span>color_method <span style="color: #990000">==</span> <span style="color: #FF0000">"cppad.symmetric"</span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: example/colpack_hes.cpp

</body>
</html>
