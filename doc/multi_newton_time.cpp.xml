<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Timing Test of Multi-Threaded Newton Method</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Timing Test of Multi-Threaded Newton Method"/>
<meta name="keywords" id="keywords" content=" timing test multi-threaded newton method multi_newton_time multi_thread Ad speed syntax purpose ok time_out test_time num_threads num_zero num_sub num_sum use_ad source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_newton_time.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="multi_newton.cpp.xml" target="_top">Prev</a>
</td><td><a href="multi_newton_work.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>multi_newton.cpp</option>
<option>multi_newton_time.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>multi_thread-&gt;</option>
<option>parallel_ad</option>
<option>thread_test.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>thread_test.cpp-&gt;</option>
<option>a11c_openmp.cpp</option>
<option>a11c_bthread.cpp</option>
<option>a11c_pthread.cpp</option>
<option>simple_ad_openmp.cpp</option>
<option>simple_ad_bthread.cpp</option>
<option>simple_ad_pthread.cpp</option>
<option>team_example.cpp</option>
<option>harmonic.cpp</option>
<option>multi_newton.cpp</option>
<option>team_thread.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>multi_newton.cpp-&gt;</option>
<option>multi_newton_time.cpp</option>
<option>multi_newton_work.cpp</option>
</select>
</td>
<td>multi_newton_time.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>ok</option>
<option>time_out</option>
<option>test_time</option>
<option>num_threads</option>
<option>num_zero</option>
<option>num_sub</option>
<option>num_sum</option>
<option>use_ad</option>
<option>Source</option>
</select>
</td>
</tr></table><br/>
.

<center><b><big><big>Timing Test of Multi-Threaded Newton Method</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;multi_newton_time(</span></font><i><font color="black"><span style='white-space: nowrap'>time_out</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_zero</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sum</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>use_ad</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
)</span></font></code>


<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
Runs correctness and timing test for a multi-threaded Newton method.
This test uses Newton's method to determine all the zeros of the sine
function on an interval.
CppAD, or hand coded derivatives,
can be used to calculate the derivatives used by Newton's method.
The calculation can be done in parallel on the different sub-intervals.
In addition, the calculation can be done without multi-threading.

<br/>
<br/>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br/>
This return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
If it is true,
<code><font color="blue">multi_newton_time</font></code> passed the correctness test.
Otherwise it is false.

<br/>
<br/>
<b><big><a name="time_out" id="time_out">time_out</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&amp;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>time_out</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
The input value of the argument does not matter.
Upon return it is the number of wall clock seconds required for
the multi-threaded Newton method can compute all the zeros.

<br/>
<br/>
<b><big><a name="test_time" id="test_time">test_time</a></big></b>
<br/>
Is the minimum amount of wall clock time that the test should take.
The number of repeats for the test will be increased until this time
is reached.
The reported 
<code><i><font color="black"><span style='white-space: nowrap'>time_out</span></font></i></code>
 is the total wall clock time divided by the
number of repeats.

<br/>
<br/>
<b><big><a name="num_threads" id="num_threads">num_threads</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
It specifies the number of threads that
are available for this test.
If it is zero, the test is run without multi-threading and

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1&#xA0;==&#xA0;CppAD::thread_alloc::num_threads()<br/>
</span></font></code>
when <code><font color="blue">multi_newton_time</font></code> is called.
If it is non-zero, the test is run with multi-threading and

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;==&#xA0;CppAD::thread_alloc::num_threads()<br/>
</span></font></code>
when <code><font color="blue">multi_newton_time</font></code> is called.

<br/>
<br/>
<b><big><a name="num_zero" id="num_zero">num_zero</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_zero</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
and it must be greater than one.
It specifies the actual number of zeros in the test function

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi>sin</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

.
To be specific, <code><font color="blue">multi_newton_time</font></code> will attempt to determine
all of the values of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>

 for which 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi>sin</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mn>0</mn>
</mrow></math>

 and

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>

 is in the interval

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[&#xA0;0&#xA0;,&#xA0;(</span></font><i><font color="black"><span style='white-space: nowrap'>num_zero</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;-&#xA0;1)&#xA0;*&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>pi</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;]<br/>
</span></font></code>
.

<br/>
<br/>
<b><big><a name="num_sub" id="num_sub">num_sub</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
It specifies the number of sub-intervals to divide the total interval into.
It must be greater than zero and
should probably be greater than two times 
<code><i><font color="black"><span style='white-space: nowrap'>num_zero</span></font></i></code>
.

<br/>
<br/>
<b><big><a name="num_sum" id="num_sum">num_sum</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sum</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
and must be greater than zero.
The actual function used by the Newton method is

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mfrac><mrow><mn>1</mn>
</mrow>
<mrow><mi mathvariant='italic'>n</mi>
</mrow>
</mfrac>
<munderover><mo displaystyle='true' largeop='true'>&#x02211;</mo>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow>
<mrow><mi mathvariant='italic'>n</mi>
</mrow>
</munderover>
<mi>sin</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 is equal to 
<code><i><font color="black"><span style='white-space: nowrap'>num_sum</span></font></i></code>
.
Larger values of 
<code><i><font color="black"><span style='white-space: nowrap'>num_sum</span></font></i></code>
 simulate a case where the
evaluation of the function 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 takes more time.

<br/>
<br/>
<b><big><a name="use_ad" id="use_ad">use_ad</a></big></b>
<br/>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>user_ad</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>use_ad</span></font></i></code>
 is <code><font color="blue">true</font></code>,
then derivatives will be computed using CppAD.
Note that this derivative computation includes
re-taping the function for each
value of 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>x</mi>
</mrow></math>

 (even though re-taping is not necessary).
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>If 
<code><i><font color="black"><span style='white-space: nowrap'>use_ad</span></font></i></code>
 is <code><font color="blue">false</font></code>,
derivatives will be computed using a hand coded routine.

<br/>
<br/>
<b><big><a name="Source" id="Source">Source</a></big></b>

<code><font color="blue">
<pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/time_test.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cmath&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cstring&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"multi_newton.hpp"</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// empty namespace</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// values correspond to arguments in previous call to multi_newton_time</span></span>
     <span style="color: #008080">size_t</span> num_threads_<span style="color: #990000">;</span><span style="font-style: italic"><span style="color: #9A1900">// value passed to multi_newton_time</span></span>
     <span style="color: #008080">size_t</span> num_zero_<span style="color: #990000">;</span>   <span style="font-style: italic"><span style="color: #9A1900">// number of zeros of f(x) in the total interval</span></span>
     <span style="color: #008080">size_t</span> num_sub_<span style="color: #990000">;</span>    <span style="font-style: italic"><span style="color: #9A1900">// number of sub-intervals to split calculation into</span></span>
     <span style="color: #008080">size_t</span> num_sum_<span style="color: #990000">;</span>    <span style="font-style: italic"><span style="color: #9A1900">// larger values make f(x) take longer to calculate</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// value of xout corresponding to most recent call to test_once</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span> xout_<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// either fun_ad or fun_no depending on value of use_ad</span></span>
     <span style="color: #009900">void</span> <span style="color: #990000">(*</span>fun_<span style="color: #990000">)(</span><span style="color: #009900">double</span> x<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> f<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> df<span style="color: #990000">)</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// A version of the sine function that can be made as slow as we like</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Float</span><span style="color: #990000">&gt;</span>
     <span style="color: #008080">Float</span> <span style="font-weight: bold"><span style="color: #000000">f_eval</span></span><span style="color: #990000">(</span><span style="color: #008080">Float</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">Float</span> sum <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
          <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> num_sum_<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               sum <span style="color: #990000">+=</span> <span style="font-weight: bold"><span style="color: #000000">sin</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> sum <span style="color: #990000">/</span> <span style="font-weight: bold"><span style="color: #000000">Float</span></span><span style="color: #990000">(</span>num_sum_<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Direct calculation of derivative with same number of floating point</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// operations as for f_eval.</span></span>
     <span style="color: #009900">double</span> <span style="font-weight: bold"><span style="color: #000000">df_direct</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span> x<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #009900">double</span> sum <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
          <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> num_sum_<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               sum <span style="color: #990000">+=</span> <span style="font-weight: bold"><span style="color: #000000">cos</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>

          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> sum <span style="color: #990000">/</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>num_sum_<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// AD calculation of detivative</span></span>
     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">fun_ad</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span> x<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> f<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> df<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// use CppAD::vector because it uses fast multi-threaded memory alloc</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>vector<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
          <span style="color: #008080">vector&lt; AD&lt;double&gt; &gt;</span> <span style="font-weight: bold"><span style="color: #000000">X</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">Y</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
          X<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">;</span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>X<span style="color: #990000">);</span>
          Y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">f_eval</span></span><span style="color: #990000">(</span>X<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
          CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">F</span></span><span style="color: #990000">(</span>X<span style="color: #990000">,</span> Y<span style="color: #990000">);</span>
          <span style="color: #008080">vector&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">dx</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">dy</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
          dx<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>
          dy    <span style="color: #990000">=</span> F<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> dx<span style="color: #990000">);</span>
          f     <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">Value</span></span><span style="color: #990000">(</span> Y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">);</span>
          df    <span style="color: #990000">=</span> dy<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// evaulate the function and its derivative</span></span>
     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">fun_no</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span> x<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> f<span style="color: #990000">,</span> <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> df<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     f  <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">f_eval</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>
          df <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">df_direct</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>


     <span style="font-style: italic"><span style="color: #9A1900">// Run computation of all the zeros once</span></span>
     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">test_once</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span>  num_zero_ <span style="color: #990000">==</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"multi_newton_time: num_zero == 0"</span> <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span>endl<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #000000">exit</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="color: #009900">double</span> pi      <span style="color: #990000">=</span> <span style="color: #993399">4</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">atan</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">.);</span>
          <span style="color: #009900">double</span> xlow    <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>
          <span style="color: #009900">double</span> xup     <span style="color: #990000">=</span> <span style="color: #990000">(</span>num_zero_ <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> pi<span style="color: #990000">;</span>
          <span style="color: #009900">double</span> eps     <span style="color: #990000">=</span>
               xup <span style="color: #990000">*</span> <span style="color: #993399">100</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> CppAD<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> max_itr <span style="color: #990000">=</span> <span style="color: #993399">20</span><span style="color: #990000">;</span>

          <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">multi_newton</span></span><span style="color: #990000">(</span>
               xout_       <span style="color: #990000">,</span>
               fun_        <span style="color: #990000">,</span>
               num_sub_    <span style="color: #990000">,</span>
               xlow        <span style="color: #990000">,</span>
               xup         <span style="color: #990000">,</span>
               eps         <span style="color: #990000">,</span>
               max_itr     <span style="color: #990000">,</span>
               num_threads_
          <span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> ok <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     std<span style="color: #990000">::</span>cerr <span style="color: #990000">&lt;&lt;</span> <span style="color: #FF0000">"multi_newton: error"</span> <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span>endl<span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #000000">exit</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Repeat computation of all the zeros a specied number of times</span></span>
     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">test_repeat</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> repeat<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> repeat<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
               <span style="font-weight: bold"><span style="color: #000000">test_once</span></span><span style="color: #990000">();</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// end empty namespace</span></span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">multi_newton_time</span></span><span style="color: #990000">(</span>
     <span style="color: #009900">double</span><span style="color: #990000">&amp;</span> time_out      <span style="color: #990000">,</span>
     <span style="color: #009900">double</span>  test_time     <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>  num_threads   <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>  num_zero      <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>  num_sub       <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>  num_sum       <span style="color: #990000">,</span>
     <span style="color: #009900">bool</span>    use_ad
<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Set local namespace environment variables</span></span>
     num_threads_  <span style="color: #990000">=</span> num_threads<span style="color: #990000">;</span>
     num_zero_     <span style="color: #990000">=</span> num_zero<span style="color: #990000">;</span>
     num_sub_      <span style="color: #990000">=</span> num_sub<span style="color: #990000">;</span>
     num_sum_      <span style="color: #990000">=</span> num_sum<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> use_ad <span style="color: #990000">)</span>
          fun_ <span style="color: #990000">=</span> fun_ad<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>     fun_ <span style="color: #990000">=</span> fun_no<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// expect number of threads to already be set up</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> num_threads <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">)</span>
          ok <span style="color: #990000">&amp;=</span> num_threads <span style="color: #990000">==</span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">num_threads</span></span><span style="color: #990000">();</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>     ok <span style="color: #990000">&amp;=</span> <span style="color: #993399">1</span>           <span style="color: #990000">==</span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">num_threads</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// run the test case and set time return value</span></span>
     time_out <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">time_test</span></span><span style="color: #990000">(</span>test_repeat<span style="color: #990000">,</span> test_time<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Call test_once for a correctness check</span></span>
     <span style="color: #009900">double</span> pi      <span style="color: #990000">=</span> <span style="color: #993399">4</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">atan</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">.);</span>
     <span style="color: #009900">double</span> xup     <span style="color: #990000">=</span> <span style="color: #990000">(</span>num_zero_ <span style="color: #990000">-</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">*</span> pi<span style="color: #990000">;</span>
     <span style="color: #009900">double</span> eps     <span style="color: #990000">=</span> xup <span style="color: #990000">*</span> <span style="color: #993399">100</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> CppAD<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>
     ok        <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>xout_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> num_zero<span style="color: #990000">);</span>
     <span style="color: #008080">size_t</span> i   <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> num_zero<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          ok <span style="color: #990000">&amp;=</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">fabs</span></span><span style="color: #990000">(</span> xout_<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">-</span> pi <span style="color: #990000">*</span> i<span style="color: #990000">)</span> <span style="color: #990000">&lt;=</span> <span style="color: #993399">2</span> <span style="color: #990000">*</span> eps<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// xout_ is a static variable, so clear it to free its memory</span></span>
     xout_<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">clear</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// return correctness check result</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span>  ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: multi_thread/multi_newton_time.cpp

</body>
</html>
