<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Source: det_by_minor</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Source: det_by_minor"/>
<meta name="keywords" id="keywords" content=" source: det_by_minor source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_det_by_minor.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="det_by_minor.cpp.xml" target="_top">Prev</a>
</td><td><a href="det_33.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_utility</option>
<option>det_by_minor</option>
<option>det_by_minor.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed_utility-&gt;</option>
<option>det_by_lu</option>
<option>det_of_minor</option>
<option>det_by_minor</option>
<option>det_33</option>
<option>det_grad_33</option>
<option>mat_sum_sq</option>
<option>ode_evaluate</option>
<option>sparse_jac_fun</option>
<option>sparse_hes_fun</option>
<option>uniform_01</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>det_by_minor-&gt;</option>
<option>det_by_minor.cpp</option>
<option>det_by_minor.hpp</option>
</select>
</td>
<td>det_by_minor.hpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Source: det_by_minor</big></big></b></center>
<code><font color="blue"># ifndef CPPAD_DET_BY_MINOR_HPP
<code><span style='white-space: nowrap'><br/>
</span></code># define CPPAD_DET_BY_MINOR_HPP

<pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/speed/det_of_minor.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;vector&gt;</span>

<span style="font-style: italic"><span style="color: #9A1900">// BEGIN CppAD namespace</span></span>
<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> CppAD <span style="color: #FF0000">{</span>

<span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Scalar</span><span style="color: #990000">&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">det_by_minor</span> <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #0000FF">private</span></span><span style="color: #990000">:</span>
     <span style="color: #008080">size_t</span>              m_<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// made mutable because modified and then restored</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">mutable</span></span> std<span style="color: #990000">::</span><span style="color: #008080">vector&lt;size_t&gt;</span> r_<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">mutable</span></span> std<span style="color: #990000">::</span><span style="color: #008080">vector&lt;size_t&gt;</span> c_<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// make mutable because its value does not matter</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">mutable</span></span> std<span style="color: #990000">::</span><span style="color: #008080">vector&lt;Scalar&gt;</span> a_<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #0000FF">public</span></span><span style="color: #990000">:</span>
     <span style="font-weight: bold"><span style="color: #000000">det_by_minor</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> m<span style="color: #990000">)</span> <span style="color: #990000">:</span> <span style="font-weight: bold"><span style="color: #000000">m_</span></span><span style="color: #990000">(</span>m<span style="color: #990000">)</span> <span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">r_</span></span><span style="color: #990000">(</span>m <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">)</span> <span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">c_</span></span><span style="color: #990000">(</span>m <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">a_</span></span><span style="color: #990000">(</span>m <span style="color: #990000">*</span> m<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
          <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>

          <span style="font-style: italic"><span style="color: #9A1900">// values for r and c that correspond to entire matrix</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> m<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     r_<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> i<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
               c_<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> i<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
          <span style="color: #FF0000">}</span>
          r_<span style="color: #990000">[</span>m<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
          c_<span style="color: #990000">[</span>m<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">Vector</span><span style="color: #990000">&gt;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">inline</span></span> <span style="color: #008080">Scalar</span> <span style="font-weight: bold"><span style="color: #0000FF">operator</span></span><span style="color: #990000">()(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">Vector</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> m_ <span style="color: #990000">*</span> m_<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>i<span style="color: #990000">--)</span>
               a_<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i<span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #000000">det_of_minor</span></span><span style="color: #990000">(</span>a_<span style="color: #990000">,</span> m_<span style="color: #990000">,</span> m_<span style="color: #990000">,</span> r_<span style="color: #990000">,</span> c_<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>

<span style="color: #FF0000">}</span><span style="color: #990000">;</span>

<span style="color: #FF0000">}</span> <span style="font-style: italic"><span style="color: #9A1900">// END CppAD namespace</span></span></tt></pre>
# endif
</font></code>


<hr/>Input File: omh/det_by_minor_hpp.omh

</body>
</html>
