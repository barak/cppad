<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>AD Compound Assignment Operators</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="AD Compound Assignment Operators"/>
<meta name="keywords" id="keywords" content=" ad compound assignment operators + add plus - subtract minus * multiply times / divide multiple syntax purpose op base x y result operation sequence example derivative addition subtraction multiplication division "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_compound_assign_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="div.cpp.xml" target="_top">Prev</a>
</td><td><a href="addeq.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>Arithmetic</option>
<option>compound_assign</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>ad_ctor</option>
<option>ad_assign</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>unary_standard_math</option>
<option>binary_math</option>
<option>CondExp</option>
<option>Discrete</option>
<option>numeric_limits</option>
<option>atomic</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Arithmetic-&gt;</option>
<option>UnaryPlus</option>
<option>UnaryMinus</option>
<option>ad_binary</option>
<option>compound_assign</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>compound_assign-&gt;</option>
<option>AddEq.cpp</option>
<option>sub_eq.cpp</option>
<option>mul_eq.cpp</option>
<option>div_eq.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Op</option>
<option>Base</option>
<option>x</option>
<option>y</option>
<option>Result</option>
<option>Operation Sequence</option>
<option>Example</option>
<option>Derivative</option>
<option>---..Addition</option>
<option>---..Subtraction</option>
<option>---..Multiplication</option>
<option>---..Division</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>AD Compound Assignment Operators</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>Op</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>


<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
Performs compound assignment operations
where either 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 has type

<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
.

<br/>
<br/>
<b><big><a name="Op" id="Op">Op</a></big></b>
<br/>
The operator 
<code><i><font color="black"><span style='white-space: nowrap'>Op</span></font></i></code>
 is one of the following
<table><tr><td align='left'  valign='top'>

<b>Op</b>  </td><td align='left'  valign='top'>
 <b>Meaning</b> </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">+=</font></code>   </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is assigned 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 plus 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">-=</font></code>   </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is assigned 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 minus 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">*=</font></code>   </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is assigned 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 times 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">/=</font></code>   </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is assigned 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 divided by 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>

</td></tr>
</table>
<br/>
<b><big><a name="Base" id="Base">Base</a></big></b>
<br/>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 is determined by the operand 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
.

<br/>
<br/>
<b><big><a name="x" id="x">x</a></big></b>
<br/>
The operand 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 has the following prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
<br/>
<b><big><a name="y" id="y">y</a></big></b>
<br/>
The operand 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 has the following prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i></code>
 is

<code><font color="blue"><span style='white-space: nowrap'>VecAD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::reference</span></font></code>
,

<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
, or
<code><font color="blue">double</font></code>.

<br/>
<br/>
<b><big><a name="Result" id="Result">Result</a></big></b>
<br/>
The result of this assignment
can be used as a reference to 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
.
For example, if 
<code><i><font color="black"><span style='white-space: nowrap'>z</span></font></i></code>
 has the following type

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>z</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
then the syntax

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>z</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;+=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
will compute 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 plus 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>

and then assign this value to both 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>z</span></font></i></code>
.


<br/>
<br/>
<b><big><a name="Operation Sequence" id="Operation Sequence">Operation Sequence</a></big></b>
<br/>
This is an <a href="glossary.xml#Operation.Atomic" target="_top"><span style='white-space: nowrap'>atomic</span></a>

<a href="glossary.xml#AD of Base" target="_top"><span style='white-space: nowrap'>AD&#xA0;of&#xA0;Base</span></a>
 operation
and hence it is part of the current
AD of 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>

<a href="glossary.xml#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&#xA0;sequence</span></a>
.



<br/>
<br/>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br/>
The following files contain examples and tests of these functions.
Each test returns true if it succeeds and false otherwise.
<table><tr><td align='left'  valign='top'>

<a href="addeq.cpp.xml" target="_top">AddEq.cpp</a></td><td>
AD Compound Assignment Addition: Example and Test</td></tr>
<tr><td>

<a href="sub_eq.cpp.xml" target="_top">sub_eq.cpp</a></td><td>
AD Compound Assignment Subtraction: Example and Test</td></tr>
<tr><td>

<a href="mul_eq.cpp.xml" target="_top">mul_eq.cpp</a></td><td>
AD Compound Assignment Multiplication: Example and Test</td></tr>
<tr><td>

<a href="div_eq.cpp.xml" target="_top">div_eq.cpp</a></td><td>
AD Compound Assignment Division: Example and Test</td></tr>
<tr><td>

</td></tr>
</table>
<br/>
<b><big><a name="Derivative" id="Derivative">Derivative</a></big></b>
<br/>
If 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
</mrow></math>

 and 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>g</mi>
</mrow></math>

 are
<a href="glossary.xml#Base Function" target="_top"><span style='white-space: nowrap'>Base&#xA0;functions</span></a>


<br/>
<br/>
<b><a name="Derivative.Addition" id="Derivative.Addition">Addition</a></b>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>x</mi>
</mrow>
</mfrac>
<mo stretchy="false">=</mo>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>x</mi>
</mrow>
</mfrac>
<mo stretchy="false">+</mo>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>x</mi>
</mrow>
</mfrac>
</mrow></math>

<br/>
<b><a name="Derivative.Subtraction" id="Derivative.Subtraction">Subtraction</a></b>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">-</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>x</mi>
</mrow>
</mfrac>
<mo stretchy="false">=</mo>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>x</mi>
</mrow>
</mfrac>
<mo stretchy="false">-</mo>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>x</mi>
</mrow>
</mfrac>
</mrow></math>

<br/>
<b><a name="Derivative.Multiplication" id="Derivative.Multiplication">Multiplication</a></b>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">*</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>x</mi>
</mrow>
</mfrac>
<mo stretchy="false">=</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">*</mo>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>x</mi>
</mrow>
</mfrac>
<mo stretchy="false">+</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">*</mo>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>x</mi>
</mrow>
</mfrac>
</mrow></math>

<br/>
<b><a name="Derivative.Division" id="Derivative.Division">Division</a></b>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">/</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>x</mi>
</mrow>
</mfrac>
<mo stretchy="false">=</mo>
<mo stretchy="false">[</mo>
<mn>1</mn>
<mo stretchy="false">/</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">]</mo>
<mo stretchy="false">*</mo>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>x</mi>
</mrow>
</mfrac>
<mo stretchy="false">-</mo>
<mo stretchy="false">[</mo>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">/</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<msup><mo stretchy="false">)</mo>
<mn>2</mn>
</msup>
<mo stretchy="false">]</mo>
<mo stretchy="false">*</mo>
<mfrac><mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>g</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow>
<mrow><mo stretchy="false">&#x02202;</mo>
<mi mathvariant='italic'>x</mi>
</mrow>
</mfrac>
</mrow></math>


<hr/>Input File: cppad/core/compound_assign.hpp

</body>
</html>
