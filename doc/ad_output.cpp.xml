<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>AD Output Operator: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="AD Output Operator: Example and Test"/>
<meta name="keywords" id="keywords" content=" ad output operator: example test &lt;&lt; "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ad_output.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="ad_output.xml" target="_top">Prev</a>
</td><td><a href="printfor.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>Convert</option>
<option>ad_output</option>
<option>ad_output.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>ad_ctor</option>
<option>ad_assign</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Convert-&gt;</option>
<option>Value</option>
<option>Integer</option>
<option>ad_to_string</option>
<option>ad_input</option>
<option>ad_output</option>
<option>PrintFor</option>
<option>Var2Par</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ad_output-&gt;</option>
<option>ad_output.cpp</option>
</select>
</td>
<td>ad_output.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>AD Output Operator: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>

<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;sstream&gt;</span>  <span style="font-style: italic"><span style="color: #9A1900">// std::ostringstream</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;string&gt;</span>   <span style="font-style: italic"><span style="color: #9A1900">// std::string</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;iomanip&gt;</span>  <span style="font-style: italic"><span style="color: #9A1900">// std::setprecision, setw, setfill, right</span></span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">S</span><span style="color: #990000">&gt;</span>
     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">set_ostream</span></span><span style="color: #990000">(</span><span style="color: #008080">S</span> <span style="color: #990000">&amp;</span>os<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     os
          <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">setprecision</span></span><span style="color: #990000">(</span><span style="color: #993399">4</span><span style="color: #990000">)</span> <span style="font-style: italic"><span style="color: #9A1900">// 4 digits of precision</span></span>
          <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">setw</span></span><span style="color: #990000">(</span><span style="color: #993399">6</span><span style="color: #990000">)</span>         <span style="font-style: italic"><span style="color: #9A1900">// 6 characters per field</span></span>
          <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">setfill</span></span><span style="color: #990000">(</span><span style="color: #FF0000">' '</span><span style="color: #990000">)</span>    <span style="font-style: italic"><span style="color: #9A1900">// fill with spaces</span></span>
          <span style="color: #990000">&lt;&lt;</span> std<span style="color: #990000">::</span>right<span style="color: #990000">;</span>          <span style="font-style: italic"><span style="color: #9A1900">// adjust value to the right</span></span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">ad_output</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// This output stream is an ostringstream for testing purposes.</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// You can use &lt;&lt; with other types of streams; i.e., std::cout.</span></span>
     std<span style="color: #990000">::</span><span style="color: #008080">ostringstream</span> stream<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// ouput an AD&lt;double&gt; object</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;double&gt;</span>  pi <span style="color: #990000">=</span> <span style="color: #993399">4</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> <span style="font-weight: bold"><span style="color: #000000">atan</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">.);</span> <span style="font-style: italic"><span style="color: #9A1900">// 3.1415926536</span></span>
     <span style="font-weight: bold"><span style="color: #000000">set_ostream</span></span><span style="color: #990000">(</span>stream<span style="color: #990000">);</span>
     stream <span style="color: #990000">&lt;&lt;</span> pi<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// ouput a VecAD&lt;double&gt;::reference object</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">VecAD&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">v</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">AD&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">zero</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     v<span style="color: #990000">[</span>zero<span style="color: #990000">]</span>   <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">exp</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">.);</span>                  <span style="font-style: italic"><span style="color: #9A1900">// 2.7182818285</span></span>
     <span style="font-weight: bold"><span style="color: #000000">set_ostream</span></span><span style="color: #990000">(</span>stream<span style="color: #990000">);</span>
     stream <span style="color: #990000">&lt;&lt;</span> v<span style="color: #990000">[</span>zero<span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// convert output from stream to string</span></span>
     std<span style="color: #990000">::</span><span style="color: #008080">string</span> str <span style="color: #990000">=</span> stream<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">str</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the output</span></span>
     ok      <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>str <span style="color: #990000">==</span> <span style="color: #FF0000">" 3.142 2.718"</span><span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>
</font></code>
<hr/>Input File: example/ad_output.cpp

</body>
</html>
