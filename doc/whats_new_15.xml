<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>CppAD Changes and Additions During 2015</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="CppAD Changes and Additions During 2015"/>
<meta name="keywords" id="keywords" content=" cppad changes and additions during 2015 introduction 12-29 12-28 12-08 12-01 11-30 11-25 11-24 11-14 11-08 11-06 10-21 10-16 10-06 10-04 10-03 10-02 09-28 09-27 09-25 09-24 09-23 09-21 09-20 09-19 09-16 09-03 09-02 08-31 08-30 08-29 08-28 08-26 08-25 08-20 08-17 08-16 08-09 08-06 07-31 06-16 06-11 06-09 06-07 05-26 cond_exp_1 cond_exp_2 05-11 05-10 05-09 05-08 05-07 05-05 04-18 03-13 03-06 02-28 02-18 02-16 02-14 02-11 02-10 02-09 02-07 02-06 02-04 02-03 02-02 01-30 01-29 01-26 01-23 01-21 01-20 01-09 01-07 01-02 "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_whats_new_15_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="whats_new.xml" target="_top">Prev</a>
</td><td><a href="whats_new_14.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>whats_new</option>
<option>whats_new_15</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>wish_list</option>
<option>whats_new</option>
<option>deprecated</option>
<option>compare_c</option>
<option>numeric_ad</option>
<option>addon</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>whats_new-&gt;</option>
<option>whats_new_15</option>
<option>whats_new_14</option>
<option>whats_new_13</option>
<option>whats_new_12</option>
<option>whats_new_11</option>
<option>whats_new_10</option>
<option>whats_new_09</option>
<option>whats_new_08</option>
<option>whats_new_07</option>
<option>whats_new_06</option>
<option>whats_new_05</option>
<option>whats_new_04</option>
<option>whats_new_03</option>
</select>
</td>
<td>whats_new_15</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Introduction</option>
<option>12-29</option>
<option>12-28</option>
<option>12-08</option>
<option>12-01</option>
<option>11-30</option>
<option>11-25</option>
<option>11-24</option>
<option>11-14</option>
<option>11-08</option>
<option>11-06</option>
<option>10-21</option>
<option>10-16</option>
<option>10-06</option>
<option>10-04</option>
<option>10-03</option>
<option>10-02</option>
<option>09-28</option>
<option>09-27</option>
<option>09-25</option>
<option>09-24</option>
<option>09-23</option>
<option>09-21</option>
<option>09-20</option>
<option>09-19</option>
<option>09-16</option>
<option>09-03</option>
<option>09-02</option>
<option>08-31</option>
<option>08-30</option>
<option>08-29</option>
<option>08-28</option>
<option>08-26</option>
<option>08-25</option>
<option>08-20</option>
<option>08-17</option>
<option>08-16</option>
<option>08-09</option>
<option>08-06</option>
<option>07-31</option>
<option>06-16</option>
<option>06-11</option>
<option>06-09</option>
<option>06-07</option>
<option>05-26</option>
<option>05-26.cond_exp_1</option>
<option>05-26.cond_exp_2</option>
<option>05-11</option>
<option>05-10</option>
<option>05-09</option>
<option>05-08</option>
<option>05-07</option>
<option>05-05</option>
<option>04-18</option>
<option>03-13</option>
<option>03-06</option>
<option>02-28</option>
<option>02-18</option>
<option>02-16</option>
<option>02-14</option>
<option>02-11</option>
<option>02-10</option>
<option>02-09</option>
<option>02-07</option>
<option>02-06</option>
<option>02-04</option>
<option>02-03</option>
<option>02-02</option>
<option>01-30</option>
<option>01-29</option>
<option>01-26</option>
<option>01-23</option>
<option>01-21</option>
<option>01-20</option>
<option>01-09</option>
<option>01-07</option>
<option>01-02</option>
</select>
</td>
</tr></table><br/>




<center><b><big><big>CppAD Changes and Additions During 2015</big></big></b></center>
<br/>
<b><big><a name="Introduction" id="Introduction">Introduction</a></big></b>
<br/>
This section contains a list of the changes to CppAD during 2015
(in reverse order by date).
The purpose of this section is to
assist you in learning about changes between various versions of CppAD.

<br/>
<br/>
<b><big><a name="12-29" id="12-29">12-29</a></big></b>
<br/>
Separate <a href="to_string.xml" target="_top"><span style='white-space: nowrap'>to_string</span></a>
 from <a href="ad_to_string.xml" target="_top"><span style='white-space: nowrap'>ad_to_string</span></a>
 so that it
can be used without the rest of CppAD; i.e.,
by including

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;#&#xA0;include&#xA0;&lt;cppad/utility/to_string.hpp&gt;<br/>
</span></font></code>
<br/>
<b><big><a name="12-28" id="12-28">12-28</a></big></b>

<ol type="1"><li>
Add the <a href="to_string.xml" target="_top"><span style='white-space: nowrap'>to_string</span></a>
 utility.
</li><li>

Add <a href="base_to_string.xml" target="_top"><span style='white-space: nowrap'>base_to_string</span></a>
 to the Base type requirements.
</li><li>

A <a href="wish_list.xml#Base Requirements" target="_top"><span style='white-space: nowrap'>Base&#xA0;requirements</span></a>
 item
was added to the wish list.
</li><li>

The <a href="wish_list.xml" target="_top"><span style='white-space: nowrap'>wish_list</span></a>
 item to
reorganize the include directory has been removed.
It was completed when the utilities was moved to <code><font color="blue">cppad/utility</font></code>; see
<a href="whats_new_15.xml#11-30" target="_top"><span style='white-space: nowrap'>11-30</span></a>
.
</li></ol>


<br/>
<br/>
<b><big><a name="12-08" id="12-08">12-08</a></big></b>

<ol type="1"><li>
A convention was included for addon
<a href="addon.xml#Library Files" target="_top"><span style='white-space: nowrap'>library&#xA0;files</span></a>
.
</li><li>

Change new <a href="utility.xml" target="_top"><span style='white-space: nowrap'>utility</span></a>
 specifications to allow for individual file
includes; e.g., <code><font color="blue">&lt;cppad/utility/vector.hpp&gt;</font></code>.
</li></ol>


<br/>
<br/>
<b><big><a name="12-01" id="12-01">12-01</a></big></b>
<br/>
Fix problem with <a href="auto_tools.xml" target="_top"><span style='white-space: nowrap'>auto_tools</span></a>
 install handling of the
deprecated files.
This included changing the auto-tools
<code><font color="blue">--with-implicit_ctor</font></code> option to
<a href="auto_tools.xml#--with-deprecated" target="_top"><span style='white-space: nowrap'>--with-deprecated</span></a>
.

<br/>
<br/>
<b><big><a name="11-30" id="11-30">11-30</a></big></b>

<ol type="1"><li>
The <code><font color="blue">library</font></code> section has been moved to the
<a href="utility.xml" target="_top"><span style='white-space: nowrap'>utilities</span></a>
 section.
In addition, the corresponding source code files in <code><font color="blue">cppad</font></code>
have been moved to <code><font color="blue">cppad/utility</font></code>.
</li><li>

The individual <a href="utility.xml" target="_top"><span style='white-space: nowrap'>utility</span></a>
 include files have been deprecated; see
<a href="include_deprecated.xml" target="_top"><span style='white-space: nowrap'>include_deprecated</span></a>
.
For example,
<code><font color='blue'><pre style='display:inline'> 
	# include &lt;cppad/runge_45.hpp&gt;
</pre></font></code>

You should us the utility include instead; i.e.,
<code><font color='blue'><pre style='display:inline'> 
	# include &lt;cppad/utility.hpp&gt;
</pre></font></code>

</li><li>

The <a href="numeric_ad.xml" target="_top"><span style='white-space: nowrap'>numeric_ad</span></a>
 routines where moved from the <code><font color="blue">library</font></code>
the a separate documentation section.
</li><li>

Change <code><font color="blue">cmake_install_prefix</font></code> to
<a href="cmake.xml#cppad_prefix" target="_top"><span style='white-space: nowrap'>cppad_prefix</span></a>
 and
Change <code><font color="blue">cmake_install_postfix</font></code> to
<a href="cmake.xml#cppad_postfix" target="_top"><span style='white-space: nowrap'>cppad_postfix</span></a>
.
</li><li>

Change <code><font color="blue">cppad_implicit_ctor_from_any_type</font></code> to
<a href="cmake.xml#cppad_deprecated" target="_top"><span style='white-space: nowrap'>cppad_deprecated</span></a>
 and
change its specifications to refer to all deprecated features.
</li></ol>


<br/>
<br/>
<b><big><a name="11-25" id="11-25">11-25</a></big></b>

<ol type="1"><li>
CppAD now installs the object library
<code><font color='blue'><pre style='display:inline'> 
	-lcppad_lib
</pre></font></code>

to be included when linking.
Currently, it is only required when
<a href="colpack_prefix.xml" target="_top"><span style='white-space: nowrap'>colpack_prefix</span></a>
 is specified on the
<a href="cmake.xml#CMake Command" target="_top"><span style='white-space: nowrap'>cmake&#xA0;command</span></a>
.
</li><li>

It is no longer necessary to compile and link the file
<code><font color='blue'><pre style='display:inline'> 
	cppad_colpack.cpp
</pre></font></code>

when <a href="colpack_prefix.xml" target="_top"><span style='white-space: nowrap'>colpack_prefix</span></a>

is specified during the install process; see
<a href="cmake.xml#CMake Command" target="_top"><span style='white-space: nowrap'>cmake&#xA0;command</span></a>
.
(It is included in <code><font color="blue">cppad_lib</font></code>).
</li></ol>


<br/>
<br/>
<b><big><a name="11-24" id="11-24">11-24</a></big></b>

<ol type="1"><li>
The <code><font color="blue">check_for_nan</font></code> output now includes the first dependent
variable
<a href="check_for_nan.xml#Error Message.index" target="_top"><span style='white-space: nowrap'>index</span></a>

that is <code><font color="blue">nan</font></code> in its error message.
</li><li>

Change the
<a href="include_deprecated.xml" target="_top"><span style='white-space: nowrap'>deprecated&#xA0;include</span></a>
 reference <code><font color="blue">pow_int.h</font></code>
to <code><font color="blue">pow_int.hpp</font></code> in <a href="pow_int.xml" target="_top"><span style='white-space: nowrap'>pow_int</span></a>
.
</li></ol>


<br/>
<br/>
<b><big><a name="11-14" id="11-14">11-14</a></big></b>
<br/>
There was a bug in the new
<a href="check_for_nan.xml#get_check_for_nan" target="_top"><span style='white-space: nowrap'>get_check_for_nan</span></a>

feature that writes independent variable values to a temporary file;
see <a href="whats_new_15.xml#11-06" target="_top"><span style='white-space: nowrap'>11-06</span></a>
 below.
This has been fixed.


<br/>
<br/>
<b><big><a name="11-08" id="11-08">11-08</a></big></b>

<ol type="1"><li>
Fixed a bug in the <a href="revsparsejac.xml" target="_top"><span style='white-space: nowrap'>RevSparseJac</span></a>
 routine.
To be specific, the argument <a href="revsparsejac.xml#r" target="_top"><span style='white-space: nowrap'>r</span></a>

was transposed from what the documentation said.
(This has no effect in the usual case where 
<code><i><font color="black"><span style='white-space: nowrap'>r</span></font></i></code>
 is the identity.)
</li><li>

Added the <a href="bool_sparsity.cpp.xml" target="_top"><span style='white-space: nowrap'>bool_sparsity.cpp</span></a>
 examples which show how
to conserve memory when computing sparsity patterns.
</li><li>

Modified the <a href="ipopt_solve.xml" target="_top"><span style='white-space: nowrap'>ipopt_solve</span></a>
 procedure to take
advantage of the memory conserving sparsity pattern calculations
when <a href="ipopt_solve.xml#options.Retape" target="_top"><span style='white-space: nowrap'>retape</span></a>
 is false.
</li><li>

Added the <a href="cppad_vector.xml#vectorBool.bit_per_unit" target="_top"><span style='white-space: nowrap'>bit_per_unit</span></a>

function to the <code><font color="blue">vectorBool</font></code> class.
(This aids the memory conservation mentioned above.)
</li></ol>



<br/>
<br/>
<b><big><a name="11-06" id="11-06">11-06</a></big></b>
<br/>
It is often difficult to determine what cause a <code><font color="blue">nan</font></code> result
during an operation with an <a href="adfun.xml" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object.
The new feature
<a href="check_for_nan.xml#get_check_for_nan" target="_top"><span style='white-space: nowrap'>get_check_for_nan</span></a>
 was
added to make this easier.

<br/>
<br/>
<b><big><a name="10-21" id="10-21">10-21</a></big></b>
<br/>
There was a mistake in the documentation for <a href="index_sort.xml" target="_top"><span style='white-space: nowrap'>index_sort</span></a>
,
the argument <a href="index_sort.xml#ind" target="_top"><span style='white-space: nowrap'>ind</span></a>
 is not <code><font color="blue">const</font></code>.

<br/>
<br/>
<b><big><a name="10-16" id="10-16">10-16</a></big></b>
<br/>
Add a <a href="wish_list.xml#PrintFor Optimization" target="_top"><span style='white-space: nowrap'>PrintFor&#xA0;optimization</span></a>

item to the wish list.

<br/>
<br/>
<b><big><a name="10-06" id="10-06">10-06</a></big></b>

<ol type="1"><li>
Add
<a href="preprocessor.xml#Documented Here.CPPAD_USE_CPLUSPLUS_2011" target="_top"><span style='white-space: nowrap'>CPPAD_USE_CPLUSPLUS_2011</span></a>
,
<code><font color="blue">CPPAD_NUMERIC_LIMITS</font></code>, and
<code><font color="blue">CPPAD_STANDARD_MATH_UNARY</font></code>, to
the <a href="preprocessor.xml" target="_top"><span style='white-space: nowrap'>preprocessor</span></a>
 section.
In addition, remove checking that all user API preprocessor symbols
are in this section form the <a href="wish_list.xml" target="_top"><span style='white-space: nowrap'>wish_list</span></a>
.
</li><li>

Alphabetize and make some corrections to
<a href="listallexamples.xml" target="_top"><span style='white-space: nowrap'>list&#xA0;of&#xA0;examples</span></a>
.
</li><li>

The documentation for some of the <a href="deprecated.xml" target="_top"><span style='white-space: nowrap'>deprecated</span></a>
 features
was missing the date when they were deprecated.
This has been fixed; e.g., see
<a href="auto_tools.xml#Deprecated 2012-12-26" target="_top"><span style='white-space: nowrap'>Deprecated&#xA0;2012-12-26</span></a>
.
</li></ol>



<br/>
<br/>
<b><big><a name="10-04" id="10-04">10-04</a></big></b>

<ol type="1"><li>
<a href="base_require.xml" target="_top"><span style='white-space: nowrap'>base_require</span></a>
:
Add the macro
<a href="base_limits.xml#CPPAD_NUMERIC_LIMITS" target="_top"><span style='white-space: nowrap'>CPPAD_NUMERIC_LIMITS</span></a>

to aid in setting the numeric limits for a user defined 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 class.
</li><li>

<a href="base_require.xml" target="_top"><span style='white-space: nowrap'>base_require</span></a>
:
The <a href="numeric_limits.xml#quiet_NaN" target="_top"><span style='white-space: nowrap'>quiet_NaN</span></a>
 function has been added
to the CppAD <code><font color="blue">numeric_limits</font></code>.
Note the reason for not using
<a href="numeric_limits.xml#std::numeric_limits" target="_top"><span style='white-space: nowrap'>std::numeric_limits</span></a>
.
</li><li>

The <a href="nan.xml#nan(zero)" target="_top"><span style='white-space: nowrap'>nan(zero)</span></a>
 function computes a <code><font color="blue">nan</font></code> by
dividing zero by zero which results in a warning when using some compilers.
This function has been deprecated and the corresponding
<a href="wish_list.xml" target="_top"><span style='white-space: nowrap'>wish_list</span></a>
 item has been removed.
</li><li>

Move documentation for <a href="zdouble.xml" target="_top"><span style='white-space: nowrap'>zdouble</span></a>
 to <a href="deprecated.xml" target="_top"><span style='white-space: nowrap'>deprecated</span></a>
 section
and documentation for <a href="numeric_limits.xml" target="_top"><span style='white-space: nowrap'>numeric_limits</span></a>
 to <a href="advalued.xml" target="_top"><span style='white-space: nowrap'>ADValued</span></a>
.
</li><li>

Remove all uses of, and references to,
<a href="zdouble.xml" target="_top"><span style='white-space: nowrap'>zdouble</span></a>
 from the <a href="example.xml" target="_top"><span style='white-space: nowrap'>examples</span></a>
.
</li></ol>


<br/>
<br/>
<b><big><a name="10-03" id="10-03">10-03</a></big></b>

<br/>
<a href="base_require.xml" target="_top"><span style='white-space: nowrap'>base_require</span></a>
:
It is no longer necessary to define the specialization for

<code><font color="blue"><span style='white-space: nowrap'>CppAD::epsilon&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base&gt;()</span></font></i></code>
 for each 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 type.

<br/>
<br/>
<b><big><a name="10-02" id="10-02">10-02</a></big></b>
<br/>
There was a bug in <code><font color="blue">test_more/azmul.cpp</font></code> whereby the vector
<code><font color="blue">z</font></code> had the wrong dimension (in two places). This has been fixed.

<br/>
<br/>
<b><big><a name="09-28" id="09-28">09-28</a></big></b>

<ol type="1"><li>
Use the current <a href="atomic_option.xml" target="_top"><span style='white-space: nowrap'>atomic_option</span></a>
 setting to determine
which type of sparsity patterns to use for
<a href="dependency.cpp.xml" target="_top"><span style='white-space: nowrap'>dependency</span></a>
 calculations during
<a href="optimize.xml" target="_top"><span style='white-space: nowrap'>optimize</span></a>
 procedure.
It used to be that the
<a href="atomic_option.xml#atomic_sparsity.bool_sparsity_enum" target="_top"><span style='white-space: nowrap'>bool_sparsity_enum</span></a>

was used when
<a href="atomic_option.xml#atomic_sparsity.pack_sparsity_enum" target="_top"><span style='white-space: nowrap'>pack_sparsity_enum</span></a>

was specified.
</li><li>

It is not longer an error to take the derivative of the square root function,
because the result may be the part of a
<a href="condexp.xml" target="_top"><span style='white-space: nowrap'>conditional&#xA0;expression</span></a>
 that is not used.
</li><li>

Update the <a href="wish_list.xml" target="_top"><span style='white-space: nowrap'>wish_list</span></a>
 section.
</li></ol>



<br/>
<br/>
<b><big><a name="09-27" id="09-27">09-27</a></big></b>

<ol type="1"><li>
It is no longer necessary to use the <a href="zdouble.xml" target="_top"><span style='white-space: nowrap'>zdouble</span></a>
 class when
computing with <a href="mul_level.xml" target="_top"><span style='white-space: nowrap'>multiple&#xA0;levels&#xA0;of&#xA0;AD</span></a>

<a href="condexp.xml" target="_top"><span style='white-space: nowrap'>conditional&#xA0;expressions</span></a>
 and
<a href="reverse.xml" target="_top"><span style='white-space: nowrap'>reverse&#xA0;mode</span></a>
.
</li><li>

The <code><font color="blue">zdouble</font></code> class has been deprecated.
Use the <a href="azmul.xml" target="_top"><span style='white-space: nowrap'>azmul</span></a>
 function for absolute zero (when it is needed).
</li></ol>


<br/>
<br/>
<b><big><a name="09-25" id="09-25">09-25</a></big></b>

<br/>
<a href="base_require.xml" target="_top"><span style='white-space: nowrap'>base_require</span></a>
:
<a href="base_require.xml#Absolute Zero, azmul" target="_top"><span style='white-space: nowrap'>absolute&#xA0;zero&#xA0;multiplication</span></a>

is now required for user defined base types.
This makes it possible to combine
<a href="condexp.xml" target="_top"><span style='white-space: nowrap'>conditional&#xA0;expression</span></a>
,
<a href="mul_level.xml" target="_top"><span style='white-space: nowrap'>multiple&#xA0;levels</span></a>
,
<a href="reverse.xml" target="_top"><span style='white-space: nowrap'>reverse</span></a>
, and
a base type that has standard ieee multiplication; e.g., <code><font color="blue">double</font></code>.
In other words, not all multiplications will need to have an
absolute zero (as is the case with the <a href="zdouble.xml" target="_top"><span style='white-space: nowrap'>zdouble</span></a>
 base class.

<br/>
<br/>
<b><big><a name="09-24" id="09-24">09-24</a></big></b>
<br/>
Fix some Visual Studio 2013 C++ level four <code><font color="blue">/W4</font></code> warnings
(previous warnings were are level 3).
In addition, disable warning
<code><font color="blue">4100</font></code> unreferenced formal parameter,
and warning
<code><font color="blue">4127</font></code> conditional expression is constant.

<br/>
<br/>
<b><big><a name="09-23" id="09-23">09-23</a></big></b>
<br/>
CppAD can optionally test its use with the external packages
<a href="get_eigen.sh.xml" target="_top"><span style='white-space: nowrap'>eigen</span></a>
,
<a href="get_ipopt.sh.xml" target="_top"><span style='white-space: nowrap'>ipopt</span></a>
, and
<a href="get_colpack.sh.xml" target="_top"><span style='white-space: nowrap'>colpack</span></a>
.
In addition, it can compare its <a href="speed.xml" target="_top"><span style='white-space: nowrap'>speed</span></a>
 with the external AD packages
<a href="get_adolc.sh.xml" target="_top"><span style='white-space: nowrap'>adolc</span></a>
,
<a href="get_fadbad.sh.xml" target="_top"><span style='white-space: nowrap'>fadbad</span></a>
, and
<a href="get_sacado.sh.xml" target="_top"><span style='white-space: nowrap'>sacado</span></a>
.
The scripts that download and install a local copy of these external packages
have been modified to automatically skip installation
when it has already been done.

<br/>
<br/>
<b><big><a name="09-21" id="09-21">09-21</a></big></b>
<br/>
Improve discussion of
<a href="download.xml#Compressed Archives.Windows File Extraction and Testing" target="_top"><span style='white-space: nowrap'>windows&#xA0;download&#xA0;and&#xA0;testing</span></a>
.

<br/>
<br/>
<b><big><a name="09-20" id="09-20">09-20</a></big></b>

<ol type="1"><li>
Add the <a href="cmake.xml#cppad_profile_flag" target="_top"><span style='white-space: nowrap'>cppad_profile_flag</span></a>

to the list of possible <code><font color="blue">cmake</font></code> command arguments.
</li><li>

More of the warnings generated by Visual Studio 2013 have been fixed.
One remaining warning is about <code><font color="blue">asctime</font></code> and <code><font color="blue">gmtime</font></code> not being
thread safe.
</li></ol>


<br/>
<br/>
<b><big><a name="09-19" id="09-19">09-19</a></big></b>

<ol type="1"><li>
There was a bug in the <a href="base_alloc.hpp.xml#numeric_limits" target="_top"><span style='white-space: nowrap'>numeric_limits</span></a>

section of the example user defined base type.
This has been fixed.
</li><li>

There were some compile and link errors when
running the tests using Visual Studio 2013.
These have been fixed.
</li><li>

Many of the warnings generated by Visual Studio 2013 have been fixed.
</li></ol>


<br/>
<br/>
<b><big><a name="09-16" id="09-16">09-16</a></big></b>
<br/>
The conditional expressions, <a href="condexp.xml" target="_top"><span style='white-space: nowrap'>CondExp</span></a>
, were not working
for the type <code><font color="blue">&lt; CppAD::AD&lt;adouble&gt; &gt;</font></code> where <code><font color="blue">adouble</font></code>
is the ADOL-C AD type.
This has been fixed by adding a call to
<a href="base_adolc.hpp.xml#CondExpRel" target="_top"><span style='white-space: nowrap'>CPPAD_COND_EXP_REL</span></a>
 in
<code><font color="blue">base_adolc.hpp</font></code>.

<br/>
<br/>
<b><big><a name="09-03" id="09-03">09-03</a></big></b>

<ol type="1"><li>
There was a bug in the <a href="cppad_vector.xml#vectorBool" target="_top"><span style='white-space: nowrap'>vectorBool</span></a>

<a href="cppad_vector.xml#Assignment" target="_top"><span style='white-space: nowrap'>assignment</span></a>
.
To be specific,
it not allow a size zero vector to be assigned using a vector any other size.
This has been fixed.
</li><li>

The addition of the
<a href="atomic_option.xml#atomic_sparsity.pack_sparsity_enum" target="_top"><span style='white-space: nowrap'>pack</span></a>
 option
on 08-31 introduced a bug in the calculation of <a href="revsparsehes.xml" target="_top"><span style='white-space: nowrap'>RevSparseHes</span></a>
.
The <a href="checkpoint.cpp.xml" target="_top"><span style='white-space: nowrap'>checkpoint.cpp</span></a>
 example was changed to demonstrate this
problem and the bug was fixed.
</li></ol>


<br/>
<br/>
<b><big><a name="09-02" id="09-02">09-02</a></big></b>
<br/>
The <a href="dependency.cpp.xml#Dependency Pattern" target="_top"><span style='white-space: nowrap'>dependency&#xA0;pattern</span></a>

was not being computed correctly for the
<a href="sign.xml" target="_top"><span style='white-space: nowrap'>sign</span></a>
, <a href="discrete.xml" target="_top"><span style='white-space: nowrap'>Discrete</span></a>
, and <a href="vecad.xml" target="_top"><span style='white-space: nowrap'>VecAD</span></a>
 operations.
This has been fixed.
This could have caused problems using
<a href="checkpoint.xml" target="_top"><span style='white-space: nowrap'>checkpoint</span></a>
 functions that used any of these operations.

<br/>
<br/>
<b><big><a name="08-31" id="08-31">08-31</a></big></b>

<ol type="1"><li>
Mention the fact that using checkpoint functions can make
<a href="checkpoint.xml#Purpose.Faster Recording" target="_top"><span style='white-space: nowrap'>recordings&#xA0;faster</span></a>
.
</li><li>

Add the
<a href="atomic_option.xml#atomic_sparsity.pack_sparsity_enum" target="_top"><span style='white-space: nowrap'>pack</span></a>

sparsity option for <a href="atomic_base.xml" target="_top"><span style='white-space: nowrap'>atomic_base</span></a>
 operations.
</li><li>

Add the pack sparsity option to
<a href="checkpoint.xml#sparsity" target="_top"><span style='white-space: nowrap'>checkpoint</span></a>
 functions.
</li><li>

Added the <a href="atomic_sparsity.cpp.xml" target="_top"><span style='white-space: nowrap'>atomic_sparsity.cpp</span></a>
 example.
</li><li>

Remove mention of OpenMP from <a href="ta_thread_num.xml" target="_top"><span style='white-space: nowrap'>thread_alloc::thread_num</span></a>

(<a href="thread_alloc.xml" target="_top"><span style='white-space: nowrap'>thread_alloc</span></a>
 never was OpenMP specific).
</li></ol>


<br/>
<br/>
<b><big><a name="08-30" id="08-30">08-30</a></big></b>

<ol type="1"><li>
The <a href="atomic_ctor.xml#atomic_base.sparsity" target="_top"><span style='white-space: nowrap'>sparsity</span></a>

argument was added to the <code><font color="blue">atomic_base</font></code> constructor and the
<a href="checkpoint.xml#sparsity" target="_top"><span style='white-space: nowrap'>checkpoint</span></a>
 constructor.
</li><li>

Make <a href="atomic_norm_sq.cpp.xml" target="_top"><span style='white-space: nowrap'>atomic_norm_sq.cpp</span></a>
 an example with no set sparsity
and <a href="atomic_reciprocal.cpp.xml" target="_top"><span style='white-space: nowrap'>atomic_reciprocal.cpp</span></a>
 an example with no bool sparsity.
</li><li>

Improve discussion of <code><font color="blue">Independent</font></code> and
<a href="independent.xml#Parallel Mode" target="_top"><span style='white-space: nowrap'>parallel&#xA0;mode</span></a>
.
</li></ol>


<br/>
<br/>
<b><big><a name="08-29" id="08-29">08-29</a></big></b>
<br/>
Some asserts in the <a href="checkpoint.xml" target="_top"><span style='white-space: nowrap'>checkpoint</span></a>
 implementation were not using
the CppAD <a href="errorhandler.xml" target="_top"><span style='white-space: nowrap'>ErrorHandler</span></a>
. This has been fixed.

<br/>
<br/>
<b><big><a name="08-28" id="08-28">08-28</a></big></b>
<br/>
Free <a href="checkpoint.xml" target="_top"><span style='white-space: nowrap'>checkpoint</span></a>
 function sparsity patters during
<a href="forward.xml" target="_top"><span style='white-space: nowrap'>forward</span></a>
 operations that use its atomic operation.
(They kept between sparsity calculations because they do not change.)

<br/>
<br/>
<b><big><a name="08-26" id="08-26">08-26</a></big></b>
<br/>
Fix a bug in <a href="revsparsejac.xml" target="_top"><span style='white-space: nowrap'>RevSparseJac</span></a>
 when used to compute sparsity pattern
for a subset of the rows in a <a href="checkpoint.xml" target="_top"><span style='white-space: nowrap'>checkpoint</span></a>
 function.

<br/>
<br/>
<b><big><a name="08-25" id="08-25">08-25</a></big></b>
<br/>
Reduce the amount of memory required for <a href="checkpoint.xml" target="_top"><span style='white-space: nowrap'>checkpoint</span></a>
 functions
(since sparsity patterns are now being held so they do not need to be
recalculated).

<br/>
<br/>
<b><big><a name="08-20" id="08-20">08-20</a></big></b>
<br/>
Added an example that computes the sparsity pattern for a subset
of the <a href="sparsity_sub.cpp.xml#ForSparseJac" target="_top"><span style='white-space: nowrap'>Jacobian</span></a>
 and a subset
of the <a href="sparsity_sub.cpp.xml#RevSparseHes" target="_top"><span style='white-space: nowrap'>Hessian</span></a>
.

<br/>
<br/>
<b><big><a name="08-17" id="08-17">08-17</a></big></b>

<ol type="1"><li>
Do some optimization of the
<a href="checkpoint.xml" target="_top"><span style='white-space: nowrap'>checkpoint</span></a>
 feature so that sparsity patterns are
stored and not recalculated.
</li><li>

Fix a warning (introduced on 08-11) where the <code><font color="blue">CppAD::vector</font></code>
<a href="cppad_vector.xml#data" target="_top"><span style='white-space: nowrap'>data</span></a>
 function was being shadowed by
a local variable.
</li><li>

The source code control for CppAD has a link to <code><font color="blue">compile</font></code>,
instead of real file.
This sometimes caused problems with the
deprecated <a href="auto_tools.xml" target="_top"><span style='white-space: nowrap'>auto_tools</span></a>
 install procedure and has been fixed.
</li></ol>


<br/>
<br/>
<b><big><a name="08-16" id="08-16">08-16</a></big></b>

<ol type="1"><li>
Improve the documentation for checkpoint functions.
To be specific, change the <a href="checkpoint.xml#Syntax" target="_top"><span style='white-space: nowrap'>syntax</span></a>
 to use
the name 
<code><i><font color="black"><span style='white-space: nowrap'>atom_fun</span></font></i></code>
.
In addition, include the fact that 
<code><i><font color="black"><span style='white-space: nowrap'>atom_fun</span></font></i></code>
 must not
be destructed for as along as the corresponding atomic operations are used.
</li><li>

Add the <a href="checkpoint.xml#size_var" target="_top"><span style='white-space: nowrap'>size_var</span></a>
 function
to the checkpoint objects.
</li></ol>



<br/>
<br/>
<b><big><a name="08-09" id="08-09">08-09</a></big></b>
<br/>
Add the preservation of data to the specifications of a <code><font color="blue">CppAD::vector</font></code>
during a <a href="cppad_vector.xml#resize" target="_top"><span style='white-space: nowrap'>resize</span></a>
 when the
capacity of the vector does not change.
In addition, added and example of this to <a href="cppad_vector.cpp.xml" target="_top"><span style='white-space: nowrap'>cppad_vector.cpp</span></a>
.

<br/>
<br/>
<b><big><a name="08-06" id="08-06">08-06</a></big></b>
<br/>
The <a href="zdouble.xml" target="_top"><span style='white-space: nowrap'>zdouble</span></a>

<a href="base_limits.xml" target="_top"><span style='white-space: nowrap'>numeric_limits</span></a>

were not being computed properly.
This has been fixed.

<br/>
<br/>
<b><big><a name="07-31" id="07-31">07-31</a></big></b>
<br/>
Added the <a href="sparse_sub_hes.cpp.xml" target="_top"><span style='white-space: nowrap'>sparse_sub_hes.cpp</span></a>
 example,
a way to compute the sparsity for a subset of variables without
using <a href="mul_level.xml" target="_top"><span style='white-space: nowrap'>multiple&#xA0;levels&#xA0;of&#xA0;AD</span></a>
.

<br/>
<br/>
<b><big><a name="06-16" id="06-16">06-16</a></big></b>

<ol type="1"><li>
There were some
<a href="cppad_assert.xml#Unknown" target="_top"><span style='white-space: nowrap'>unknown</span></a>
 asserts
when the sparsity pattern 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
 in
<a href="sparse_jacobian.xml#p" target="_top"><span style='white-space: nowrap'>sparse_jacobian</span></a>
 and
<a href="sparse_hessian.xml#p" target="_top"><span style='white-space: nowrap'>sparse_hessian</span></a>
 was not properly dimensioned.
These have been changed to
<a href="cppad_assert.xml#Known" target="_top"><span style='white-space: nowrap'>known</span></a>
 asserts to give better
error reporting.
</li><li>

In the special case where sparse Hessian <a href="sparse_hessian.xml#work" target="_top"><span style='white-space: nowrap'>work</span></a>
 or
sparse Jacobian <a href="sparse_hessian.xml#work" target="_top"><span style='white-space: nowrap'>work</span></a>
 was specified and the
set of elements to be computed was empty, the work vector is empty after
the call (and it appears to need to be calculated on subsequent calls).
This resulted in a bug when the sparsity pattern was not provided
on subsequent calls (and has been fixed).
</li></ol>


<br/>
<br/>
<b><big><a name="06-11" id="06-11">06-11</a></big></b>

<ol type="1"><li>
Some C++11 features were not being taken advantage of after the change on
<a href="whats_new_15.xml#05-10" target="_top"><span style='white-space: nowrap'>05-10</span></a>
. To be specific, move semantics,
the high resolution clock, and null pointers.
This has been fixed.
</li><li>

In the example <a href="zdouble.cpp.xml" target="_top"><span style='white-space: nowrap'>zdouble.cpp</span></a>
, the vector <code><font color="blue">a1z</font></code> was not
properly dimensioned.
This has been fixed and the dimensions of all the variables have been
clarified.
</li></ol>



<br/>
<br/>
<b><big><a name="06-09" id="06-09">06-09</a></big></b>
<br/>
Add an <a href="independent.xml#abort_op_index" target="_top"><span style='white-space: nowrap'>abort_op_index</span></a>

item to the wish list. It has since been removed
(domain errors may not affect the results due to
<a href="condexp.xml" target="_top"><span style='white-space: nowrap'>conditional&#xA0;expressions</span></a>
).


<br/>
<br/>
<b><big><a name="06-07" id="06-07">06-07</a></big></b>
<br/>
Add a <a href="base_require.xml#Absolute Zero, azmul" target="_top"><span style='white-space: nowrap'>absolute&#xA0;zero</span></a>
 item
and a <a href="numeric_limits.xml" target="_top"><span style='white-space: nowrap'>numeric_limits</span></a>
 item to the wish list.
The absolute zero item has been completed and the
numeric limit item was modified on implementation.
Remove the multiple directions with list item.

<br/>
<br/>
<b><big><a name="05-26" id="05-26">05-26</a></big></b>


<br/>
<br/>
<b><a name="05-26.cond_exp_1" id="05-26.cond_exp_1">cond_exp_1</a></b>
<br/>
There was a problem using
<a href="condexp.xml" target="_top"><span style='white-space: nowrap'>conditional&#xA0;expressions</span></a>

with <a href="mul_level.xml" target="_top"><span style='white-space: nowrap'>multiple&#xA0;levels&#xA0;of&#xA0;AD</span></a>
 where
the result of the conditional expression might not be determined
during forward mode.
This would generate an assert of the form:

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Error&#xA0;detected&#xA0;by&#xA0;false&#xA0;result&#xA0;for<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;IdenticalPar(</span></font><i><font color="black"><span style='white-space: nowrap'>side</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;at&#xA0;line&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>number</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;in&#xA0;the&#xA0;file<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>/cppad/local/cskip_op.hpp<br/>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>side</span></font></i></code>
 was <code><font color="blue">left</font></code> or <code><font color="blue">right</font></code>
and 
<code><i><font color="black"><span style='white-space: nowrap'>number</span></font></i></code>
 was the line number of an assert in <code><font color="blue">cskip_op.hpp</font></code>.
This has been fixed.

<br/>
<br/>
<b><a name="05-26.cond_exp_2" id="05-26.cond_exp_2">cond_exp_2</a></b>
<br/>
There was a problem with using
<a href="condexp.xml" target="_top"><span style='white-space: nowrap'>conditional&#xA0;expressions</span></a>
 and <a href="reverse.xml" target="_top"><span style='white-space: nowrap'>reverse&#xA0;mode</span></a>

with <a href="mul_level.xml" target="_top"><span style='white-space: nowrap'>multiple&#xA0;levels&#xA0;of&#xA0;AD</span></a>
.
This was problem was represented by the file <code><font color="blue">bug/cond_exp_2.sh</font></code>.

<ol type="1"><li>
The problem above has been fixed by adding the base type <code><font color="blue">zdouble</font></code>, see
<a href="zdouble.xml#Motivation.CppAD" target="_top"><span style='white-space: nowrap'>CppAD&#xA0;motivation</span></a>
 for this new type.
(It is no longer necessary to use <code><font color="blue">zdouble</font></code> to get an absolute zero
because CppAD now uses <a href="azmul.xml" target="_top"><span style='white-space: nowrap'>azmul</span></a>
 where an absolute zero is required.)
</li><li>

The sections
<a href="mul_level.xml" target="_top"><span style='white-space: nowrap'>mul_level</span></a>
,
<a href="change_param.cpp.xml" target="_top"><span style='white-space: nowrap'>change_param.cpp</span></a>
,
<a href="mul_level.cpp.xml" target="_top"><span style='white-space: nowrap'>mul_level.cpp</span></a>
,
and <a href="mul_level_ode.cpp.xml" target="_top"><span style='white-space: nowrap'>mul_level_ode.cpp</span></a>
 were changed to use <a href="zdouble.xml" target="_top"><span style='white-space: nowrap'>zdouble</span></a>
.
</li><li>

The <a href="adolc_prefix.xml" target="_top"><span style='white-space: nowrap'>adolc</span></a>
 multi-level examples
<a href="mul_level_adolc.cpp.xml" target="_top"><span style='white-space: nowrap'>mul_level_adolc.cpp</span></a>
 and <a href="mul_level_adolc_ode.cpp.xml" target="_top"><span style='white-space: nowrap'>mul_level_adolc_ode.cpp</span></a>

were changed to mention the limitations because Adolc does not have an
<a href="zdouble.xml#Absolute Zero" target="_top"><span style='white-space: nowrap'>absolute&#xA0;zero</span></a>
.
</li><li>

The example above were also changed so that AD variable names that
indicated the level of AD for the variable.
</li><li>

<a href="base_require.xml" target="_top"><span style='white-space: nowrap'>base_require</span></a>
:
The base type requirements were modified to include mention of
<a href="base_require.xml#Absolute Zero, azmul" target="_top"><span style='white-space: nowrap'>absolute&#xA0;zero</span></a>
.
In addition, the base type requirements
<a href="base_require.xml#API Warning" target="_top"><span style='white-space: nowrap'>API&#xA0;warning</span></a>
 is now more informative.
</li></ol>


<br/>
<br/>
<b><big><a name="05-11" id="05-11">05-11</a></big></b>
<br/>
Reorganize the <a href="unary_standard_math.xml" target="_top"><span style='white-space: nowrap'>unary_standard_math</span></a>
 documentation.

<br/>
<br/>
<b><big><a name="05-10" id="05-10">05-10</a></big></b>

<ol type="1"><li>
Add the exponential minus one function <a href="log1p.xml" target="_top"><span style='white-space: nowrap'>log1p</span></a>
.
</li><li>

<a href="base_require.xml" target="_top"><span style='white-space: nowrap'>base_require</span></a>
:
If you are defining your own base type,
note that <a href="base_std_math.xml#erf, asinh, acosh, atanh, expm1, log1p" target="_top"><span style='white-space: nowrap'>log1p</span></a>

was added to the base type requirements.
</li><li>

Use the single preprocessor flag
<code><font color="blue">CPPAD_USE_CPLUSPLUS_2011</font></code> to signal that the functions
<a href="base_std_math.xml#erf, asinh, acosh, atanh, expm1, log1p" target="_top"><span style='white-space: nowrap'>erf,&#xA0;asinh,&#xA0;acosh,&#xA0;atanh,&#xA0;expm1,&#xA0;log1p</span></a>

are part of the base type requirements.
</li></ol>


<br/>
<br/>
<b><big><a name="05-09" id="05-09">05-09</a></big></b>

<ol type="1"><li>
Add the exponential minus one function <a href="expm1.xml" target="_top"><span style='white-space: nowrap'>expm1</span></a>
.
If you are defining your own base type,
note that <a href="base_std_math.xml#erf, asinh, acosh, atanh, expm1, log1p" target="_top"><span style='white-space: nowrap'>expm1</span></a>

was added to the base type requirements.
</li><li>

Fix some warnings about comparing signed and unsigned integers
when using <a href="cppad_testvector.xml#eigen" target="_top"><span style='white-space: nowrap'>eigen</span></a>
 for the CppAD test vector.
(The eigen vector <code><font color="blue">size()</font></code> function returns an <code><font color="blue">int</font></code> instead of a
<code><font color="blue">size_t</font></code>.)
</li></ol>


<br/>
<br/>
<b><big><a name="05-08" id="05-08">05-08</a></big></b>

<ol type="1"><li>
Add the inverse hyperbolic sine function <a href="atanh.xml" target="_top"><span style='white-space: nowrap'>atanh</span></a>
.
If you are defining your own base type,
note that <a href="base_std_math.xml#erf, asinh, acosh, atanh, expm1, log1p" target="_top"><span style='white-space: nowrap'>atanh</span></a>

was added to the base type requirements.
</li><li>

Fix a bug in the implementation of the <code><font color="blue">acosh</font></code>
multiple direction forward mode <a href="forward_dir.xml" target="_top"><span style='white-space: nowrap'>forward_dir</span></a>

(when compiler has <a href="acosh.xml#CPPAD_USE_CPLUSPLUS_2011" target="_top"><span style='white-space: nowrap'>acosh</span></a>
).
</li></ol>


<br/>
<br/>
<b><big><a name="05-07" id="05-07">05-07</a></big></b>
<br/>
Add the inverse hyperbolic sine function <a href="acosh.xml" target="_top"><span style='white-space: nowrap'>acosh</span></a>
.
If you are defining your own base type,
note that <a href="base_std_math.xml#erf, asinh, acosh, atanh, expm1, log1p" target="_top"><span style='white-space: nowrap'>acosh</span></a>

was added to the base type requirements.

<br/>
<br/>
<b><big><a name="05-05" id="05-05">05-05</a></big></b>
<br/>
Add the inverse hyperbolic sine function <a href="asinh.xml" target="_top"><span style='white-space: nowrap'>asinh</span></a>
.
If you are defining your own base type,
note that <a href="base_std_math.xml#erf, asinh, acosh, atanh, expm1, log1p" target="_top"><span style='white-space: nowrap'>asinh</span></a>

was added to the base type requirements.

<br/>
<br/>
<b><big><a name="04-18" id="04-18">04-18</a></big></b>
<br/>
In the sparse jacobian and sparse hessian calculations,
If 
<code><i><font color="black"><span style='white-space: nowrap'>work</span></font></i></code>
 is present, and has already been computed,
the sparsity pattern 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
 is not used.
This has been added to the documentation; see
<a href="sparse_jacobian.xml#work.p" target="_top"><span style='white-space: nowrap'>sparse&#xA0;jacobian</span></a>
 and
<a href="sparse_hessian.xml#work.p" target="_top"><span style='white-space: nowrap'>sparse&#xA0;hessian</span></a>
 documentation
for 
<code><i><font color="black"><span style='white-space: nowrap'>work</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
.

<br/>
<br/>
<b><big><a name="03-13" id="03-13">03-13</a></big></b>
<br/>
Remove the syntax

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
for the <a href="ad_ctor.xml" target="_top"><span style='white-space: nowrap'>AD&#xA0;constructor</span></a>
 documentation because it does not
work when the constructor is <a href="ad_ctor.xml#x.explicit" target="_top"><span style='white-space: nowrap'>explicit</span></a>
.
Also document the restriction that the constructor in the
<a href="ad_assign.xml" target="_top"><span style='white-space: nowrap'>assignment</span></a>
 must be implicit.

<br/>
<br/>
<b><big><a name="03-06" id="03-06">03-06</a></big></b>
<br/>
The developers of the
<a href="https://github.com/kaskr/adcomp" target="_top"><span style='white-space: nowrap'>TMB</span></a>
 package reported that
for large <a href="adfun.xml" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 tapes, the <a href="optimize.xml" target="_top"><span style='white-space: nowrap'>optimize</span></a>
 routine uses
a large amount of memory because it allocates a standard set for
each variable on the tape. These sets are only necessary for variables in
<a href="condexp.xml" target="_top"><span style='white-space: nowrap'>conditional&#xA0;expressions</span></a>
 that can be skipped once
the independent variables have a set value.
The problem has been reduced by using a NULL pointer for the empty set
and similar changes. It still needs more work.

<br/>
<br/>
<b><big><a name="02-28" id="02-28">02-28</a></big></b>
<br/>
It used to be the case that the
<a href="reverse.xml" target="_top"><span style='white-space: nowrap'>Reverse&#xA0;mode</span></a>
 would propagate <a href="nan.xml" target="_top"><span style='white-space: nowrap'>nan</span></a>

through the <a href="condexp.xml" target="_top"><span style='white-space: nowrap'>conditional&#xA0;expression</span></a>

case that is not used.
For example, if
<code><font color='blue'><pre style='display:inline'> 
	<a href="independent.xml" target="_top">Independent</a>(ax);
	<a href="ad.xml" target="_top">AD</a>&lt;double&gt; aeps = 1e-10;
	ay[0] = CondExpGt( ax[0], aeps, 1.0/ax[0], 1.0/aeps );
	<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f(ax, ay);
</pre></font></code>

The corresponding reverse mode calculation,
at <code><font color="blue">x[0] = 0.0</font></code>, would result in
<code><font color='blue'><pre style='display:inline'> 
	Error detected by false result for
	! ( hasnan(value) &amp;&amp; check_for_nan_ )
</pre></font></code>

This has been fixed so that only the conditional expression case that is used
affects the reverse mode results.
The example <a href="cond_exp.cpp.xml" target="_top"><span style='white-space: nowrap'>cond_exp.cpp</span></a>
 was changed to reflect this
(a check for <code><font color="blue">nan</font></code> was changed to a check for zero).
Note that this fix only works when
<a href="base_identical.xml#Identical.IdenticalPar" target="_top"><span style='white-space: nowrap'>IdenticalPar</span></a>
 is true for the
base type of the result in the conditional expression; e.g.,
one can still get a <code><font color="blue">nan</font></code> effect from the case that is not selected
when using <code><font color="blue">AD&lt; AD&lt;double&gt; &gt;</font></code> conditional expressions.

<br/>
<br/>
<b><big><a name="02-18" id="02-18">02-18</a></big></b>
<br/>
If the compiler supports the c++11 feature
<code><font color="blue">std::chrono:high_resolution_clock</font></code> then use it for
the <a href="elapsed_seconds.xml" target="_top"><span style='white-space: nowrap'>elapsed_seconds</span></a>
 function.

<br/>
<br/>
<b><big><a name="02-16" id="02-16">02-16</a></big></b>
<br/>
The new example <a href="sub_sparse_hes.cpp.xml" target="_top"><span style='white-space: nowrap'>sub_sparse_hes.cpp</span></a>
 shows one way to
compute a Hessian for a subset of variables without having to compute
the sparsity pattern for the entire functions.

<br/>
<br/>
<b><big><a name="02-14" id="02-14">02-14</a></big></b>
<br/>
Fix another bug in the derivative calculations for the
c++11 version of the error function; see
<a href="erf.xml#CPPAD_USE_CPLUSPLUS_2011" target="_top"><span style='white-space: nowrap'>CPPAD_USE_CPLUSPLUS_2011</span></a>
.

<br/>
<br/>
<b><big><a name="02-11" id="02-11">02-11</a></big></b>
<br/>
Fix a bug in the optimization of conditional expressions. To be specific,
if <a href="faq.xml#Speed.NDEBUG" target="_top"><span style='white-space: nowrap'>NDEBUG</span></a>
 is not defined, one could get
an assert with the message:
<code><font color='blue'><pre style='display:inline'> 
	Error detected by false result for
		var_index_ &gt;= NumRes(op_)
</pre></font></code>


<br/>
<br/>
<b><big><a name="02-10" id="02-10">02-10</a></big></b>
<br/>
The change on <a href="whats_new_14.xml#12-23" target="_top"><span style='white-space: nowrap'>2014-12-23</span></a>
 introduced a
bug when the c++11 version of the error function was used with
an <a href="optimize.xml" target="_top"><span style='white-space: nowrap'>optimized</span></a>
 function. see
<a href="erf.xml#CPPAD_USE_CPLUSPLUS_2011" target="_top"><span style='white-space: nowrap'>CPPAD_USE_CPLUSPLUS_2011</span></a>
.
There was also a bug in the sparsity calculations for when
this erf function was included.
These bugs have been fixed.

<br/>
<br/>
<b><big><a name="02-09" id="02-09">02-09</a></big></b>
<br/>
The test <code><font color="blue">test_more/optimize.cpp</font></code> was failing on some systems
because an exactly equality check should have been a near equal check.
This has been fixed.

<br/>
<br/>
<b><big><a name="02-07" id="02-07">02-07</a></big></b>
<br/>
On some systems, the library
corresponding to <code><font color="blue">speed/src</font></code> could not be found.
This library is only used for testing and so has been changed to always be
static (hence does not need to be found at run time).

<br/>
<br/>
<b><big><a name="02-06" id="02-06">02-06</a></big></b>
<br/>
There was a bug in the coloring method change on
<a href="whats_new_15.xml#01-07" target="_top"><span style='white-space: nowrap'>2015-01-07</span></a>
.
To be specific, 
<code><i><font color="black"><span style='white-space: nowrap'>work</span></font></i><font color="blue"><span style='white-space: nowrap'>.color_method</span></font></code>
 was not being set
to <code><font color="blue">&quot;cppad.symmetric&quot;</font></code> after 
<code><i><font color="black"><span style='white-space: nowrap'>work</span></font></i><font color="blue"><span style='white-space: nowrap'>.color_method.clear()</span></font></code>
.
This has been fixed.

<br/>
<br/>
<b><big><a name="02-04" id="02-04">02-04</a></big></b>

<ol type="1"><li>
Enable the same install of CppAD to be used both with and without C++11
features; e.g., with both <code><font color="blue">g++ --std=c++11</font></code> and with
<code><font color="blue">g++ --std=c++98</font></code>. Previously if the
<a href="cmake.xml#cppad_cxx_flags" target="_top"><span style='white-space: nowrap'>cppad_cxx_flags</span></a>
 specified C++11,
then it could only be used in that way.
</li><li>

The <a href="cmake.xml#CMake Command" target="_top"><span style='white-space: nowrap'>cmake&#xA0;command</span></a>
 now requires the version
of <code><font color="blue">cmake</font></code> to be greater than or equal 2.8
(due a bug in <code><font color="blue">cmake</font></code> version 2.6).
</li></ol>


<br/>
<br/>
<b><big><a name="02-03" id="02-03">02-03</a></big></b>
<br/>
Improved the searching for the boost multi-threading library
which is used for by the <a href="team_bthread.cpp.xml" target="_top"><span style='white-space: nowrap'>team_bthread.cpp</span></a>
 case of the
<a href="thread_test.cpp.xml" target="_top"><span style='white-space: nowrap'>thread_test.cpp</span></a>
 example and test.

<br/>
<br/>
<b><big><a name="02-02" id="02-02">02-02</a></big></b>
<br/>
Improve the documentation for the
<a href="cmake.xml#CMake Command" target="_top"><span style='white-space: nowrap'>cmake&#xA0;command</span></a>
 line options

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;cmake_install_</span></font><i><font color="black"><span style='white-space: nowrap'>dir</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
for 
<code><i><font color="black"><span style='white-space: nowrap'>dir</span></font></i></code>
 equal to
<code><font color="blue">prefix</font></code>, <code><font color="blue">postfix</font></code>, <code><font color="blue">includedirs</font></code>, <code><font color="blue">libdirs</font></code>,
<code><font color="blue">datadir</font></code>, and <code><font color="blue">docdir</font></code>.

<br/>
<br/>
<b><big><a name="01-30" id="01-30">01-30</a></big></b>
<br/>
Fix bug in <a href="link_sparse_hessian.xml" target="_top"><span style='white-space: nowrap'>link_sparse_hessian</span></a>
 speed test introduced on
<a href="whats_new_15.xml#01-09" target="_top"><span style='white-space: nowrap'>01-09</span></a>
 below.

<br/>
<br/>
<b><big><a name="01-29" id="01-29">01-29</a></big></b>
<br/>
Fix some warnings generated by <code><font color="blue">g++ 4.9.2</font></code>.

<br/>
<br/>
<b><big><a name="01-26" id="01-26">01-26</a></big></b>
<br/>
The change of global variables to local in
<code><font color="blue">cppad/local/op_code.hpp</font></code> on <a href="whats_new_14.xml#05-14" target="_top"><span style='white-space: nowrap'>2014-50-14</span></a>

created a bug in <a href="parallel_ad.xml" target="_top"><span style='white-space: nowrap'>parallel_ad</span></a>
 (some local statics needed to
be initialized). This has been fixed.

<br/>
<br/>
<b><big><a name="01-23" id="01-23">01-23</a></big></b>
<br/>
There was a bug in the <a href="cmake.xml" target="_top"><span style='white-space: nowrap'>cmake</span></a>
 install detection of compiler features.
One symptom of this bug was that on systems that had the <code><font color="blue">gettimeofday</font></code>
function, the cmake install would sometimes report

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;cppad_has_gettimeofday&#xA0;=&#xA0;0<br/>
</span></font></code>
This has been fixed.

<br/>
<br/>
<b><big><a name="01-21" id="01-21">01-21</a></big></b>
<br/>
The deprecated <a href="auto_tools.xml" target="_top"><span style='white-space: nowrap'>auto_tools</span></a>
 procedure had a bug in the
detection of when the size of an <code><font color="blue">unsigned int</font></code>
was the same as the size of a <code><font color="blue">size_t</font></code>. This has been fixed.

<br/>
<br/>
<b><big><a name="01-20" id="01-20">01-20</a></big></b>

<ol type="1"><li>
The new <a href="compare_change.xml" target="_top"><span style='white-space: nowrap'>compare_change</span></a>
 interface has been created
and the old <a href="comparechange.xml" target="_top"><span style='white-space: nowrap'>CompareChange</span></a>
 function has been deprecated;
see the <a href="compare_change.cpp.xml" target="_top"><span style='white-space: nowrap'>compare_change.cpp</span></a>
 example.
This enables one to determine the source code during taping
that corresponds to changes in the comparisons during
<a href="forward_zero.xml" target="_top"><span style='white-space: nowrap'>zero&#xA0;order&#xA0;forward</span></a>
 operations; see
<a href="independent.xml#abort_op_index" target="_top"><span style='white-space: nowrap'>abort_op_index</span></a>
.

</li><li>

This new <a href="compare_change.xml" target="_top"><span style='white-space: nowrap'>compare_change</span></a>
 interface can detect comparison changes
even if <a href="faq.xml#Speed.NDEBUG" target="_top"><span style='white-space: nowrap'>NDEBUG</span></a>
 is defined and
even if <a href="optimize.xml" target="_top"><span style='white-space: nowrap'>f.optimize()</span></a>
 has been called.
The deprecated function <code><font color="blue">CompareChange</font></code> used to always return zero after

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.optimize()<br/>
</span></font></code>
and was not even defined when <code><font color="blue">NDEBUG</font></code> was defined.
There was a resulting speed effect for this; see the wish list
<a href="wish_list.xml#Comparison Changes and Optimization" target="_top"><span style='white-space: nowrap'>compare&#xA0;change</span></a>
 entry.

</li><li>

The date when some features where deprecated has been added to the
documentation. For example, see
<a href="include_deprecated.xml#Deprecated 2006-12-17" target="_top"><span style='white-space: nowrap'>Deprecated&#xA0;2006-12-17</span></a>
.
</li></ol>


<br/>
<br/>
<b><big><a name="01-09" id="01-09">01-09</a></big></b>

<ol type="1"><li>
The change 01-07 below included (but did not mention) using
a sparse, instead of full, structure for the Hessian in the test.
This has also been done for the
<a href="link_sparse_jacobian.xml" target="_top"><span style='white-space: nowrap'>sparse&#xA0;Jacobian</span></a>
 test.
</li><li>

For both the
<a href="link_sparse_jacobian.xml" target="_top"><span style='white-space: nowrap'>sparse_jacobian</span></a>
 and
<a href="link_sparse_hessian.xml" target="_top"><span style='white-space: nowrap'>sparse_hessian</span></a>
 tests,
the sparse function is only chosen once
(it used to be different for every repeat).
This reduced the amount of computation not connected what is being tested.
It also make the <a href="speed_main.xml#option_list.onetape" target="_top"><span style='white-space: nowrap'>onetape</span></a>
 a valid
option for these tests.
</li><li>

There was a bug in the
<a href="forward_dir.xml" target="_top"><span style='white-space: nowrap'>multiple&#xA0;direction&#xA0;forward</span></a>
 routine.
Results for function values that are
<a href="parvar.xml" target="_top"><span style='white-space: nowrap'>parameter</span></a>
 were not being computed properly
(all the derivatives are zero in this case).
This has been fixed.
</li></ol>



<br/>
<br/>
<b><big><a name="01-07" id="01-07">01-07</a></big></b>
<br/>
The following changes were merged in from the <code><font color="blue">color_hes</font></code> branch:
<ol type="1"><li>
Specify the type of
<a href="sparse_hessian.xml#work.color_method" target="_top"><span style='white-space: nowrap'>coloring</span></a>

for the sparse hessian calculations.
To be specific, instead of <code><font color="blue">&quot;cppad&quot;</font></code> and <code><font color="blue">&quot;colpack&quot;</font></code>,
the choices are <code><font color="blue">&quot;cppad.symmetric&quot;</font></code>, <code><font color="blue">&quot;cppad.general&quot;</font></code>,
and <code><font color="blue">&quot;colpack.star&quot;</font></code>.
This is not compatible with the change on
<a href="whats_new_15.xml#01-02" target="_top"><span style='white-space: nowrap'>01-02</span></a>
, which was so recent
that this should not be a problem.
</li><li>

The <a href="link_sparse_hessian.xml#n_sweep" target="_top"><span style='white-space: nowrap'>n_sweep</span></a>
 values were
not being returned properly by
<a href="cppad_sparse_hessian.cpp.xml" target="_top"><span style='white-space: nowrap'>cppad_sparse_hessian.cpp</span></a>
 and
<a href="adolc_sparse_hessian.cpp.xml" target="_top"><span style='white-space: nowrap'>adolc_sparse_hessian.cpp</span></a>
.
The CppAD version has been fixed and the ADOL-C version
has been set to zero.
</li><li>

The <a href="link_sparse_hessian.xml" target="_top"><span style='white-space: nowrap'>link_sparse_hessian</span></a>
 example case was to sparse for good
testing (by mistake).
This has been fixed.
</li><li>

Add 
<code><i><font color="black"><span style='white-space: nowrap'>n_sweep</span></font></i></code>
 to
<a href="link_sparse_hessian.xml#n_sweep" target="_top"><span style='white-space: nowrap'>link_sparse_hessian</span></a>
 and
<a href="speed_main.xml#Speed Results.n_sweep" target="_top"><span style='white-space: nowrap'>speed_main</span></a>
.
</li><li>

Change the <code><font color="blue">cppad</font></code> sparse Hessian
<a href="sparse_hessian.xml#work.color_method" target="_top"><span style='white-space: nowrap'>color_method</span></a>

to take advantage of the symmetry of the Hessian
(in a similar fashion to the <code><font color="blue">colpack</font></code> coloring method).
</li></ol>


<br/>
<br/>
<b><big><a name="01-02" id="01-02">01-02</a></big></b>
<br/>
Added to option to uses
<a href="colpack_prefix.xml" target="_top"><span style='white-space: nowrap'>colpack</span></a>
 for the sparse Hessian
<a href="sparse_hessian.xml#work.color_method" target="_top"><span style='white-space: nowrap'>coloring&#xA0;method</span></a>
;
see the example <a href="colpack_hes.cpp.xml" target="_top"><span style='white-space: nowrap'>colpack_hes.cpp</span></a>
.


<hr/>Input File: omh/whats_new/whats_new_15.omh

</body>
</html>
