<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>abs_min_quad: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="abs_min_quad: Example and Test"/>
<meta name="keywords" id="keywords" content=" abs_min_quad: example test purpose source "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_abs_min_quad.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="abs_min_quad.xml" target="_top">Prev</a>
</td><td><a href="abs_min_quad.hpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>abs_normal</option>
<option>abs_min_quad</option>
<option>abs_min_quad.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>record_adfun</option>
<option>drivers</option>
<option>Forward</option>
<option>Reverse</option>
<option>sparsity_pattern</option>
<option>sparse_derivative</option>
<option>optimize</option>
<option>abs_normal</option>
<option>FunCheck</option>
<option>check_for_nan</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>abs_normal-&gt;</option>
<option>abs_normal_fun</option>
<option>abs_print_mat</option>
<option>abs_eval</option>
<option>simplex_method</option>
<option>lp_box</option>
<option>abs_min_linear</option>
<option>min_nso_linear</option>
<option>qp_interior</option>
<option>qp_box</option>
<option>abs_min_quad</option>
<option>min_nso_quad</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>abs_min_quad-&gt;</option>
<option>abs_min_quad.cpp</option>
<option>abs_min_quad.hpp</option>
</select>
</td>
<td>abs_min_quad.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Source</option>
</select>
</td>
</tr></table><br/>


<center><b><big><big>abs_min_quad: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
The function

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mn>3</mn>
</msup>
<mo stretchy="false">&#x02192;</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
</mrow></math>

 defined by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">,</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>1</mn>
</msub>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mo stretchy="false">(</mo>
<msubsup><mi mathvariant='italic'>x</mi>
<mn>0</mn>
<mn>2</mn>
</msubsup>
<mo stretchy="false">+</mo>
<msubsup><mi mathvariant='italic'>x</mi>
<mn>1</mn>
<mn>2</mn>
</msubsup>
<mo stretchy="false">)</mo>
<mo stretchy="false">/</mo>
<mn>2</mn>
<mo stretchy="false">+</mo>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">-</mo>
<mn>5</mn>
<mo stretchy="false">|</mo>
<mo stretchy="false">+</mo>
<mo stretchy="false">|</mo>
<msub><mi mathvariant='italic'>x</mi>
<mn>1</mn>
</msub>
<mo stretchy="false">+</mo>
<mn>5</mn>
<mo stretchy="false">|</mo>
</mrow></math>

For this case, the <a href="abs_min_quad.xml" target="_top"><span style='white-space: nowrap'>abs_min_quad</span></a>
 object should be equal
to the function itself.
In addition, the function is convex and
<a href="abs_min_quad.xml" target="_top"><span style='white-space: nowrap'>abs_min_quad</span></a>
 should find its global minimizer.
The minimizer of this function is

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>x</mi>
<mn>0</mn>
</msub>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow></math>

, 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<msub><mi mathvariant='italic'>x</mi>
<mn>1</mn>
</msub>
<mo stretchy="false">=</mo>
<mn>-1</mn>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"abs_min_quad.hpp"</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">join</span></span><span style="color: #990000">(</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)&amp;</span> x <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)&amp;</span> u <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> x<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="color: #008080">size_t</span> s <span style="color: #990000">=</span> u<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">size</span></span><span style="color: #990000">();</span>
          <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">xu</span></span><span style="color: #990000">(</span>n <span style="color: #990000">+</span> s<span style="color: #990000">);</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               xu<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> s<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               xu<span style="color: #990000">[</span>n <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> u<span style="color: #990000">[</span>j<span style="color: #990000">];</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> xu<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>
<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">abs_min_quad</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>ADFun<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>size_t<span style="color: #990000">)</span>       s_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span>       d_vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span> AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;</span> <span style="color: #990000">)</span> ad_vector<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="color: #008080">size_t</span> level <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>     <span style="font-style: italic"><span style="color: #9A1900">// level of tracing</span></span>
     <span style="color: #008080">size_t</span> n     <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>     <span style="font-style: italic"><span style="color: #9A1900">// size of x</span></span>
     <span style="color: #008080">size_t</span> m     <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>     <span style="font-style: italic"><span style="color: #9A1900">// size of y</span></span>
     <span style="color: #008080">size_t</span> s     <span style="color: #990000">=</span> <span style="color: #993399">2</span> <span style="color: #990000">;</span>    <span style="font-style: italic"><span style="color: #9A1900">// number of data points and absolute values</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// record the function f(x)</span></span>
     <span style="color: #008080">ad_vector</span> <span style="font-weight: bold"><span style="color: #000000">ad_x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">ad_y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          ad_x<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">double</span><span style="color: #990000">(</span>j <span style="color: #990000">+</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span> ad_x <span style="color: #990000">);</span>
     <span style="color: #008080">AD&lt;double&gt;</span> sum <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
     sum <span style="color: #990000">+=</span> ad_x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> ad_x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">/</span> <span style="color: #993399">2.0</span> <span style="color: #990000">+</span> <span style="font-weight: bold"><span style="color: #000000">abs</span></span><span style="color: #990000">(</span> ad_x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">-</span> <span style="color: #993399">5</span> <span style="color: #990000">);</span>
     sum <span style="color: #990000">+=</span> ad_x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">*</span> ad_x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">/</span> <span style="color: #993399">2.0</span> <span style="color: #990000">+</span> <span style="font-weight: bold"><span style="color: #000000">abs</span></span><span style="color: #990000">(</span> ad_x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">+</span> <span style="color: #993399">5</span> <span style="color: #990000">);</span>
     ad_y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> sum<span style="color: #990000">;</span>
     <span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>ad_x<span style="color: #990000">,</span> ad_y<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// create its abs_normal representation in g, a</span></span>
     <span style="color: #008080">ADFun&lt;double&gt;</span> g<span style="color: #990000">,</span> a<span style="color: #990000">;</span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">abs_normal_fun</span></span><span style="color: #990000">(</span>g<span style="color: #990000">,</span> a<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check dimension of domain and range space for g</span></span>
     ok <span style="color: #990000">&amp;=</span> g<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Domain</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n <span style="color: #990000">+</span> s<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> g<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Range</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> m <span style="color: #990000">+</span> s<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check dimension of domain and range space for a</span></span>
     ok <span style="color: #990000">&amp;=</span> a<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Domain</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> n<span style="color: #990000">;</span>
     ok <span style="color: #990000">&amp;=</span> a<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Range</span></span><span style="color: #990000">()</span>  <span style="color: #990000">==</span> s<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// --------------------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// Choose the point x_hat = 0</span></span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">x_hat</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          x_hat<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// value of a_hat = a(x_hat)</span></span>
     <span style="color: #008080">d_vector</span> a_hat <span style="color: #990000">=</span> a<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x_hat<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// (x_hat, a_hat)</span></span>
     <span style="color: #008080">d_vector</span> xu_hat <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">join</span></span><span style="color: #990000">(</span>x_hat<span style="color: #990000">,</span> a_hat<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// value of g[ x_hat, a_hat ]</span></span>
     <span style="color: #008080">d_vector</span> g_hat <span style="color: #990000">=</span> g<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> xu_hat<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Jacobian of g[ x_hat, a_hat ]</span></span>
     <span style="color: #008080">d_vector</span> g_jac <span style="color: #990000">=</span> g<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Jacobian</span></span><span style="color: #990000">(</span>xu_hat<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// trust region bound</span></span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">bound</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          bound<span style="color: #990000">[</span>j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">10.0</span><span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// convergence criteria</span></span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     <span style="color: #009900">double</span> eps99 <span style="color: #990000">=</span> <span style="color: #993399">99.0</span> <span style="color: #990000">*</span> std<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>
     epsilon<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span>   <span style="color: #990000">=</span> eps99<span style="color: #990000">;</span>
     epsilon<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span>   <span style="color: #990000">=</span> eps99<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// maximum number of iterations</span></span>
     <span style="color: #008080">s_vector</span> <span style="font-weight: bold"><span style="color: #000000">maxitr</span></span><span style="color: #990000">(</span><span style="color: #993399">2</span><span style="color: #990000">);</span>
     maxitr<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">10</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// maximum number of abs_min_quad iterations</span></span>
     maxitr<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">35</span><span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// maximum number of qp_interior iterations</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// set Hessian equal to identity matrix I</span></span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">hessian</span></span><span style="color: #990000">(</span>n <span style="color: #990000">*</span> n<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span><span style="color: #008080">size_t</span> j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> n<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               hessian<span style="color: #990000">[</span>i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
          hessian<span style="color: #990000">[</span>i <span style="color: #990000">*</span> n <span style="color: #990000">+</span> i<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1.0</span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// minimize the approxiamtion for f (which is equal to f for this case)</span></span>
     <span style="color: #008080">d_vector</span> <span style="font-weight: bold"><span style="color: #000000">delta_x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">abs_min_quad</span></span><span style="color: #990000">(</span>
          level<span style="color: #990000">,</span> n<span style="color: #990000">,</span> m<span style="color: #990000">,</span> s<span style="color: #990000">,</span>
          g_hat<span style="color: #990000">,</span> g_jac<span style="color: #990000">,</span> hessian<span style="color: #990000">,</span> bound<span style="color: #990000">,</span> epsilon<span style="color: #990000">,</span> maxitr<span style="color: #990000">,</span> delta_x
     <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check that the solution</span></span>
     ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span> delta_x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> <span style="color: #990000">+</span><span style="color: #993399">1.0</span><span style="color: #990000">,</span> eps99<span style="color: #990000">,</span> eps99 <span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span> delta_x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">],</span> <span style="color: #990000">-</span><span style="color: #993399">1.0</span><span style="color: #990000">,</span> eps99<span style="color: #990000">,</span> eps99 <span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: example/abs_normal/abs_min_quad.cpp

</body>
</html>
