<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Using Eigen To Compute Determinant: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Using Eigen To Compute Determinant: Example and Test"/>
<meta name="keywords" id="keywords" content=" using eigen to compute determinant: example test determinant "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_eigen_det.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="eigen_array.cpp.xml" target="_top">Prev</a>
</td><td><a href="hes_minor_det.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>cppad_eigen.hpp</option>
<option>eigen_det.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Example-&gt;</option>
<option>get_started.cpp</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>testvector</option>
<option>wno_conversion</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>General-&gt;</option>
<option>ad_fun.cpp</option>
<option>ad_in_c.cpp</option>
<option>conj_grad.cpp</option>
<option>cppad_eigen.hpp</option>
<option>hes_minor_det.cpp</option>
<option>hes_lu_det.cpp</option>
<option>interface2c.cpp</option>
<option>jac_minor_det.cpp</option>
<option>jac_lu_det.cpp</option>
<option>mul_level</option>
<option>ode_stiff.cpp</option>
<option>mul_level_ode.cpp</option>
<option>mul_level_adolc_ode.cpp</option>
<option>ode_taylor.cpp</option>
<option>stack_machine.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>cppad_eigen.hpp-&gt;</option>
<option>eigen_plugin.hpp</option>
<option>eigen_array.cpp</option>
<option>eigen_det.cpp</option>
</select>
</td>
<td>eigen_det.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Using Eigen To Compute Determinant: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt><span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/example/cppad_eigen.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/speed/det_by_minor.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;Eigen/Dense&gt;</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">eigen_det</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>NearEqual<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> Eigen<span style="color: #990000">::</span>Matrix<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> Eigen<span style="color: #990000">::</span>Dynamic<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="color: #008080">Matrix&lt; double     , Dynamic, Dynamic &gt;</span> matrix<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="color: #008080">Matrix&lt; AD&lt;double&gt; , Dynamic, Dynamic &gt;</span> a_matrix<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">//</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="color: #008080">Matrix&lt; double ,     Dynamic , 1&gt;</span>       vector<span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">typedef</span></span> <span style="color: #008080">Matrix&lt; AD&lt;double&gt; , Dynamic , 1&gt;</span>       a_vector<span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// some temporary indices</span></span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">,</span> j<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// domain and range space vectors</span></span>
     <span style="color: #008080">size_t</span> size <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">,</span> n  <span style="color: #990000">=</span> size <span style="color: #990000">*</span> size<span style="color: #990000">,</span> m <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #008080">a_vector</span> <span style="font-weight: bold"><span style="color: #000000">a_x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">a_y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     <span style="color: #008080">vector</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// set and declare independent variables and start tape recording</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> size<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> size<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// lower triangular matrix</span></span>
               a_x<span style="color: #990000">[</span>i <span style="color: #990000">*</span> size <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i <span style="color: #990000">*</span> size <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0.0</span><span style="color: #990000">;</span>
               <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> j <span style="color: #990000">&lt;=</span> i <span style="color: #990000">)</span>
                    a_x<span style="color: #990000">[</span>i <span style="color: #990000">*</span> size <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i <span style="color: #990000">*</span> size <span style="color: #990000">+</span> j<span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #009900">double</span><span style="color: #990000">(</span><span style="color: #993399">1</span> <span style="color: #990000">+</span> i <span style="color: #990000">+</span> j<span style="color: #990000">);</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// copy independent variable vector to a matrix</span></span>
     <span style="color: #008080">a_matrix</span> <span style="font-weight: bold"><span style="color: #000000">a_X</span></span><span style="color: #990000">(</span>size<span style="color: #990000">,</span> size<span style="color: #990000">);</span>
     <span style="color: #008080">matrix</span> <span style="font-weight: bold"><span style="color: #000000">X</span></span><span style="color: #990000">(</span>size<span style="color: #990000">,</span> size<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> size<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> size<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
          <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #000000">X</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> j<span style="color: #990000">)</span>   <span style="color: #990000">=</span> x<span style="color: #990000">[</span>i <span style="color: #990000">*</span> size <span style="color: #990000">+</span> j<span style="color: #990000">];</span>
               <span style="font-style: italic"><span style="color: #9A1900">// If we used a_X(i, j) = X(i, j), a_X would not depend on a_x.</span></span>
               <span style="font-weight: bold"><span style="color: #000000">a_X</span></span><span style="color: #990000">(</span>i<span style="color: #990000">,</span> j<span style="color: #990000">)</span> <span style="color: #990000">=</span> a_x<span style="color: #990000">[</span>i <span style="color: #990000">*</span> size <span style="color: #990000">+</span> j<span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Compute the log of determinant of X</span></span>
     a_y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span> a_X<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">determinant</span></span><span style="color: #990000">()</span> <span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// create f: x -&gt; y and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>a_x<span style="color: #990000">,</span> a_y<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check function value</span></span>
     <span style="color: #009900">double</span> eps <span style="color: #990000">=</span> <span style="color: #993399">100</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> CppAD<span style="color: #990000">::</span>numeric_limits<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">epsilon</span></span><span style="color: #990000">();</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">det_by_minor&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">det</span></span><span style="color: #990000">(</span>size<span style="color: #990000">);</span>
     ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">Value</span></span><span style="color: #990000">(</span>a_y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">])</span> <span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">log</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">det</span></span><span style="color: #990000">(</span>x<span style="color: #990000">)),</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// compute the derivative of y w.r.t x using CppAD</span></span>
     <span style="color: #008080">vector</span> jac <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Jacobian</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// check the derivative using the formula</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// d/dX log(det(X)) = transpose( inv(X) )</span></span>
     <span style="color: #008080">matrix</span> inv_X <span style="color: #990000">=</span> X<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">inverse</span></span><span style="color: #990000">();</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> size<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
     <span style="color: #FF0000">{</span>     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>j <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> j <span style="color: #990000">&lt;</span> size<span style="color: #990000">;</span> j<span style="color: #990000">++)</span>
               ok <span style="color: #990000">&amp;=</span> <span style="font-weight: bold"><span style="color: #000000">NearEqual</span></span><span style="color: #990000">(</span>jac<span style="color: #990000">[</span>i <span style="color: #990000">*</span> size <span style="color: #990000">+</span> j<span style="color: #990000">],</span> <span style="font-weight: bold"><span style="color: #000000">inv_X</span></span><span style="color: #990000">(</span>j<span style="color: #990000">,</span> i<span style="color: #990000">),</span> eps<span style="color: #990000">,</span> eps<span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre>
</font></code>
<hr/>Input File: example/general/eigen_det.cpp

</body>
</html>
