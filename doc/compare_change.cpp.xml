<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>CompareChange and Re-Tape: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="CompareChange and Re-Tape: Example and Test"/>
<meta name="keywords" id="keywords" content=" comparechange re-tape: example test compare change re-tape "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_compare_change.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="compare_change.xml" target="_top">Prev</a>
</td><td><a href="capacity_order.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>FunEval</option>
<option>Forward</option>
<option>compare_change</option>
<option>compare_change.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>FunEval-&gt;</option>
<option>Forward</option>
<option>Reverse</option>
<option>Sparse</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Forward-&gt;</option>
<option>forward_zero</option>
<option>forward_one</option>
<option>forward_two</option>
<option>forward_order</option>
<option>forward_dir</option>
<option>size_order</option>
<option>compare_change</option>
<option>capacity_order</option>
<option>number_skip</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>compare_change-&gt;</option>
<option>compare_change.cpp</option>
</select>
</td>
<td>compare_change.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>CompareChange and Re-Tape: Example and Test</big></big></b></center>
<code><font color="blue"><pre><tt>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/cppad.hpp&gt;</span>

<span style="font-weight: bold"><span style="color: #0000FF">namespace</span></span> <span style="color: #FF0000">{</span> <span style="font-style: italic"><span style="color: #9A1900">// put this function in the empty namespace</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">template</span></span> <span style="color: #990000">&lt;</span><span style="font-weight: bold"><span style="color: #0000FF">typename</span></span> <span style="color: #008080">Type</span><span style="color: #990000">&gt;</span>
     <span style="color: #008080">Type</span> <span style="font-weight: bold"><span style="color: #000000">Minimum</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">Type</span> <span style="color: #990000">&amp;</span>x<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #008080">Type</span> <span style="color: #990000">&amp;</span>y<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// Use a comparision to compute the min(x, y)</span></span>
          <span style="font-style: italic"><span style="color: #9A1900">// (note that CondExp would never require retaping).</span></span>
          <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> x <span style="color: #990000">&lt;</span> y <span style="color: #990000">)</span>
               <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> x<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> y<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">error_info</span> <span style="color: #FF0000">{</span>
          <span style="color: #009900">bool</span> known<span style="color: #990000">;</span>
          <span style="color: #009900">int</span>  line<span style="color: #990000">;</span>
          std<span style="color: #990000">::</span><span style="color: #008080">string</span> file<span style="color: #990000">;</span>
          std<span style="color: #990000">::</span><span style="color: #008080">string</span> exp<span style="color: #990000">;</span>
          std<span style="color: #990000">::</span><span style="color: #008080">string</span> msg<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span><span style="color: #990000">;</span>
     <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">error_handler</span></span><span style="color: #990000">(</span>
          <span style="color: #009900">bool</span>        known       <span style="color: #990000">,</span>
          <span style="color: #009900">int</span>         line        <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span> <span style="color: #990000">*</span>file        <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span> <span style="color: #990000">*</span>exp         <span style="color: #990000">,</span>
          <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">char</span> <span style="color: #990000">*</span>msg         <span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// error handler must not return, so throw an exception</span></span>
          <span style="color: #008080">error_info</span> info<span style="color: #990000">;</span>
          info<span style="color: #990000">.</span>known <span style="color: #990000">=</span> known<span style="color: #990000">;</span>
          info<span style="color: #990000">.</span>line  <span style="color: #990000">=</span> line<span style="color: #990000">;</span>
          info<span style="color: #990000">.</span>file  <span style="color: #990000">=</span> file<span style="color: #990000">;</span>
          info<span style="color: #990000">.</span>exp   <span style="color: #990000">=</span> exp<span style="color: #990000">;</span>
          info<span style="color: #990000">.</span>msg   <span style="color: #990000">=</span> msg<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">throw</span></span> info<span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>

<span style="color: #FF0000">}</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">compare_change</span></span><span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>     <span style="color: #009900">bool</span> ok <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>AD<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// domain space vector</span></span>
     <span style="color: #008080">size_t</span> n <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">ax</span></span><span style="color: #990000">(</span>n<span style="color: #990000">);</span>
     ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">.;</span>
     ax<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">4</span><span style="color: #990000">.;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables and start tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// range space vector</span></span>
     <span style="color: #008080">size_t</span> m <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span>AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;)</span> <span style="font-weight: bold"><span style="color: #000000">ay</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     ay<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">Minimum</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> ax<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// create f: x -&gt; y and stop tape recording</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">ADFun&lt;double&gt;</span> <span style="font-weight: bold"><span style="color: #000000">f</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">,</span> ay<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// set count to one (not necessry because is its default value)</span></span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_count</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// evaluate zero mode Forward where comparison has the same result</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// as during taping; i.e., x[0] &lt; x[1].</span></span>
     <span style="font-weight: bold"><span style="color: #000000">CPPAD_TESTVECTOR</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span><span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #000000">x</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">y</span></span><span style="color: #990000">(</span>m<span style="color: #990000">);</span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">.;</span>
     x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">.;</span>
     y    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #000000">Minimum</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]));</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_number</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_op_index</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// evaluate zero mode Forward where comparison has different result</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// as during taping; i.e., x[0] &gt;= x[1].</span></span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">3</span><span style="color: #990000">.;</span>
     x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">.;</span>
     y    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">!=</span> <span style="font-weight: bold"><span style="color: #000000">Minimum</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]));</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_number</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_op_index</span></span><span style="color: #990000">()</span> <span style="color: #990000">&gt;</span> <span style="color: #993399">0</span> <span style="color: #990000">);</span>
     <span style="color: #008080">size_t</span> op_index <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_op_index</span></span><span style="color: #990000">();</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Local block during which default CppAD error handler is replaced.</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// If you do not replace the default CppAD error handler,</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// and you run in the debugger, you will be able to inspect the</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// call stack and see that 'if( x &lt; y )' is where the comparison is.</span></span>
     <span style="color: #009900">bool</span> missed_error <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
     <span style="color: #FF0000">{</span>     CppAD<span style="color: #990000">::</span><span style="color: #008080">ErrorHandler</span> <span style="font-weight: bold"><span style="color: #000000">local_error_handler</span></span><span style="color: #990000">(</span>error_handler<span style="color: #990000">);</span>

          std<span style="color: #990000">::</span><span style="color: #008080">string</span> check_msg <span style="color: #990000">=</span>
               <span style="color: #FF0000">"Operator index equals abort_op_index in Independent"</span><span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #0000FF">try</span></span> <span style="color: #FF0000">{</span>
               <span style="font-style: italic"><span style="color: #9A1900">// determine the operation index where the change occurred</span></span>
               CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">,</span> op_index<span style="color: #990000">);</span>
               ay<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">Minimum</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> ax<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>
<span style="font-weight: bold"><span style="color: #000080"># ifdef</span></span> NDEBUG
               <span style="font-style: italic"><span style="color: #9A1900">// CppAD does not spend time checking operator index when</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// NDEBUG is defined</span></span>
               missed_error <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
               AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">abort_recording</span></span><span style="color: #990000">();</span>
<span style="font-weight: bold"><span style="color: #000080"># endif</span></span>
          <span style="color: #FF0000">}</span>
          <span style="font-weight: bold"><span style="color: #0000FF">catch</span></span><span style="color: #990000">(</span> <span style="color: #008080">error_info</span> info <span style="color: #990000">)</span>
          <span style="color: #FF0000">{</span>     missed_error <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
               ok          <span style="color: #990000">&amp;=</span> info<span style="color: #990000">.</span>known<span style="color: #990000">;</span>
               ok          <span style="color: #990000">&amp;=</span> info<span style="color: #990000">.</span>msg <span style="color: #990000">==</span> check_msg<span style="color: #990000">;</span>
               <span style="font-style: italic"><span style="color: #9A1900">// Must abort the recording so we can start a new one</span></span>
               <span style="font-style: italic"><span style="color: #9A1900">// (and to avoid a memory leak).</span></span>
               AD<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;::</span><span style="font-weight: bold"><span style="color: #000000">abort_recording</span></span><span style="color: #990000">();</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     ok <span style="color: #990000">&amp;=</span> <span style="color: #990000">!</span> missed_error<span style="color: #990000">;</span>


     <span style="font-style: italic"><span style="color: #9A1900">// set count to zero to demonstrate case where comparisons are not checked</span></span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_count</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     y    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">!=</span> <span style="font-weight: bold"><span style="color: #000000">Minimum</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]));</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_number</span></span><span style="color: #990000">()</span>   <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_op_index</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// now demonstrate that compare_change_number works for an optimized</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// tape (note that compare_change_op_index is always zero after optimize)</span></span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">optimize</span></span><span style="color: #990000">();</span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_count</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
     y    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">!=</span> <span style="font-weight: bold"><span style="color: #000000">Minimum</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]));</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_number</span></span><span style="color: #990000">()</span>   <span style="color: #990000">==</span> <span style="color: #993399">1</span><span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_op_index</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// now retape to get the a tape that agrees with the algorithm</span></span>
     ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>
     ax<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
     <span style="font-weight: bold"><span style="color: #000000">Independent</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">);</span>
     ay<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">Minimum</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> ax<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>
     f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Dependent</span></span><span style="color: #990000">(</span>ax<span style="color: #990000">,</span> ay<span style="color: #990000">);</span>
     y    <span style="color: #990000">=</span> f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">Forward</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> x<span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">==</span> <span style="font-weight: bold"><span style="color: #000000">Minimum</span></span><span style="color: #990000">(</span>x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">],</span> x<span style="color: #990000">[</span><span style="color: #993399">1</span><span style="color: #990000">]));</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_number</span></span><span style="color: #990000">()</span>   <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>
     ok  <span style="color: #990000">&amp;=</span> <span style="color: #990000">(</span>f<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">compare_change_op_index</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> <span style="color: #993399">0</span><span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ok<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>

</tt></pre>
</font></code>
<hr/>Input File: example/compare_change.cpp

</body>
</html>
