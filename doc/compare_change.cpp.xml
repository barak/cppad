<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>CompareChange and Re-Tape: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="CompareChange and Re-Tape: Example and Test"/>
<meta name="keywords" id="keywords" content=" comparechange re-tape: example test compare change re-tape "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_compare_change.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="compare_change.xml" target="_top">Prev</a>
</td><td><a href="capacity_order.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>FunEval</option>
<option>Forward</option>
<option>compare_change</option>
<option>compare_change.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>FunEval-&gt;</option>
<option>Forward</option>
<option>Reverse</option>
<option>Sparse</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Forward-&gt;</option>
<option>forward_zero</option>
<option>forward_one</option>
<option>forward_two</option>
<option>forward_order</option>
<option>forward_dir</option>
<option>size_order</option>
<option>compare_change</option>
<option>capacity_order</option>
<option>number_skip</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>compare_change-&gt;</option>
<option>compare_change.cpp</option>
</select>
</td>
<td>compare_change.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>CompareChange and Re-Tape: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;

namespace { // put this function in the empty namespace
	template &lt;typename Type&gt;
	Type Minimum(const Type &amp;x, const Type &amp;y)
	{	// Use a comparision to compute the min(x, y)
		// (note that CondExp would never require retaping).
		if( x &lt; y )
			return x;
		return y;
	}
	struct error_info {
		bool known;
		int  line;
		std::string file;
		std::string exp;
		std::string msg;
	};
	void error_handler(
		bool        known       ,
		int         line        ,
		const char *file        ,
		const char *exp         ,
		const char *msg         )
	{	// error handler must not return, so throw an exception
		error_info info;
		info.known = known;
		info.line  = line;
		info.file  = file;
		info.exp   = exp;
		info.msg   = msg;
		throw info;
	}

}

bool compare_change(void)
{	bool ok = true;
	using CppAD::AD;

	// domain space vector
	size_t n = 2;
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(AD&lt;double&gt;) ax(n);
	ax[0] = 3.;
	ax[1] = 4.;

	// declare independent variables and start tape recording
	CppAD::<a href="independent.xml" target="_top">Independent</a>(ax);

	// range space vector
	size_t m = 1;
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(AD&lt;double&gt;) ay(m);
	ay[0] = Minimum(ax[0], ax[1]);

	// create f: x -&gt; y and stop tape recording
	CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f(ax, ay);

	// set count to one (not necessry because is its default value)
	f.compare_change_count(1);

	// evaluate zero mode Forward where comparison has the same result
	// as during taping; i.e., x[0] &lt; x[1].
	<a href="testvector.xml" target="_top">CPPAD_TESTVECTOR</a>(double) x(n), y(m);
	x[0] = 2.;
	x[1] = 3.;
	y    = f.<a href="forward.xml" target="_top">Forward</a>(0, x);
	ok  &amp;= (y[0] == x[0]);
	ok  &amp;= (y[0] == Minimum(x[0], x[1]));
	ok  &amp;= (f.compare_change_number() == 0);
	ok  &amp;= (f.compare_change_op_index() == 0);

	// evaluate zero mode Forward where comparison has different result
	// as during taping; i.e., x[0] &gt;= x[1].
	x[0] = 3.;
	x[1] = 2.;
	y    = f.<a href="forward.xml" target="_top">Forward</a>(0, x);
	ok  &amp;= (y[0] == x[0]);
	ok  &amp;= (y[0] != Minimum(x[0], x[1]));
	ok  &amp;= (f.compare_change_number() == 1);
	ok  &amp;= (f.compare_change_op_index() &gt; 0 );
	size_t op_index = f.compare_change_op_index();

	// Local block during which default CppAD error handler is replaced.
	// If you do not replace the default CppAD error handler,
	// and you run in the debugger, you will be able to inspect the
	// call stack and see that 'if( x &lt; y )' is where the comparison is.
	bool missed_error = true;
	{	CppAD::ErrorHandler local_error_handler(error_handler);

		std::string check_msg =
			&quot;Operator index equals abort_op_index in Independent&quot;;
		try {
			// determine the operation index where the change occurred
			CppAD::<a href="independent.xml" target="_top">Independent</a>(ax, op_index);
			ay[0] = Minimum(ax[0], ax[1]);
# ifdef NDEBUG
			// CppAD does not spend time checking operator index when
			// NDEBUG is defined
			missed_error = false;
			<a href="ad.xml" target="_top">AD</a>&lt;double&gt;::abort_recording();
# endif
		}
		catch( error_info info )
		{	missed_error = false;
			ok          &amp;= info.known;
			ok          &amp;= info.msg == check_msg;
			// Must abort the recording so we can start a new one
			// (and to avoid a memory leak).
			<a href="ad.xml" target="_top">AD</a>&lt;double&gt;::abort_recording();
		}
	}
	ok &amp;= ! missed_error;


	// set count to zero to demonstrate case where comparisons are not checked
	f.compare_change_count(0);
	y    = f.<a href="forward.xml" target="_top">Forward</a>(0, x);
	ok  &amp;= (y[0] == x[0]);
	ok  &amp;= (y[0] != Minimum(x[0], x[1]));
	ok  &amp;= (f.compare_change_number()   == 0);
	ok  &amp;= (f.compare_change_op_index() == 0);

	// now demonstrate that compare_change_number works for an optimized
	// tape (note that compare_change_op_index is always zero after optimize)
	f.optimize();
	f.compare_change_count(1);
	y    = f.<a href="forward.xml" target="_top">Forward</a>(0, x);
	ok  &amp;= (y[0] == x[0]);
	ok  &amp;= (y[0] != Minimum(x[0], x[1]));
	ok  &amp;= (f.compare_change_number()   == 1);
	ok  &amp;= (f.compare_change_op_index() == 0);

	// now retape to get the a tape that agrees with the algorithm
	ax[0] = x[0];
	ax[1] = x[1];
	<a href="independent.xml" target="_top">Independent</a>(ax);
	ay[0] = Minimum(ax[0], ax[1]);
	f.Dependent(ax, ay);
	y    = f.<a href="forward.xml" target="_top">Forward</a>(0, x);
	ok  &amp;= (y[0] == x[1]);
	ok  &amp;= (y[0] == Minimum(x[0], x[1]));
	ok  &amp;= (f.compare_change_number()   == 0);
	ok  &amp;= (f.compare_change_op_index() == 0);

	return ok;
}


</pre>

</font></code>


<hr/>Input File: example/compare_change.cpp

</body>
</html>
