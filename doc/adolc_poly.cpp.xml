<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Adolc Speed: Second Derivative of a Polynomial</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'/>
<meta name="description" id="description" content="Adolc Speed: Second Derivative of a Polynomial"/>
<meta name="keywords" id="keywords" content=" adolc speed: second derivative polynomial link_poly speed specifications implementation "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_adolc_poly.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="adolc_ode.cpp.xml" target="_top">Prev</a>
</td><td><a href="adolc_sparse_hessian.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_adolc</option>
<option>adolc_poly.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>preprocessor</option>
<option>multi_thread</option>
<option>utility</option>
<option>ipopt_solve</option>
<option>Example</option>
<option>speed</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_adolc-&gt;</option>
<option>adolc_det_minor.cpp</option>
<option>adolc_det_lu.cpp</option>
<option>adolc_mat_mul.cpp</option>
<option>adolc_ode.cpp</option>
<option>adolc_poly.cpp</option>
<option>adolc_sparse_hessian.cpp</option>
<option>adolc_sparse_jacobian.cpp</option>
<option>adolc_alloc_mat</option>
</select>
</td>
<td>adolc_poly.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Specifications</option>
<option>Implementation</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Adolc Speed: Second Derivative of a Polynomial</big></big></b></center>
<br/>
<b><big><a name="Specifications" id="Specifications">Specifications</a></big></b>
<br/>
See <a href="link_poly.xml" target="_top"><span style='white-space: nowrap'>link_poly</span></a>
.

<br/>
<br/>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>


<pre><tt><span style="font-style: italic"><span style="color: #9A1900">// suppress conversion warnings before other includes</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/wno_conversion.hpp&gt;</span>
<span style="font-style: italic"><span style="color: #9A1900">//</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;vector&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;adolc/adolc.h&gt;</span>

<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/speed/uniform_01.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/poly.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/vector.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;cppad/utility/thread_alloc.hpp&gt;</span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">"adolc_alloc_mat.hpp"</span>

<span style="font-style: italic"><span style="color: #9A1900">// list of possible options</span></span>
<span style="font-weight: bold"><span style="color: #000080"># include</span></span> <span style="color: #FF0000">&lt;map&gt;</span>
<span style="font-weight: bold"><span style="color: #0000FF">extern</span></span> std<span style="color: #990000">::</span><span style="color: #008080">map&lt;std::string, bool&gt;</span> global_option<span style="color: #990000">;</span>

<span style="color: #009900">bool</span> <span style="font-weight: bold"><span style="color: #000000">link_poly</span></span><span style="color: #990000">(</span>
     <span style="color: #008080">size_t</span>                     size     <span style="color: #990000">,</span>
     <span style="color: #008080">size_t</span>                     repeat   <span style="color: #990000">,</span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span>     <span style="color: #990000">&amp;</span>a        <span style="color: #990000">,</span>  <span style="font-style: italic"><span style="color: #9A1900">// coefficients of polynomial</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span>     <span style="color: #990000">&amp;</span>z        <span style="color: #990000">,</span>  <span style="font-style: italic"><span style="color: #9A1900">// polynomial argument value</span></span>
     CppAD<span style="color: #990000">::</span><span style="color: #008080">vector&lt;double&gt;</span>     <span style="color: #990000">&amp;</span>ddp      <span style="color: #990000">)</span>  <span style="font-style: italic"><span style="color: #9A1900">// second derivative w.r.t z</span></span>
<span style="color: #FF0000">{</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"atomic"</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"memory"</span><span style="color: #990000">]</span> <span style="color: #990000">||</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"optimize"</span><span style="color: #990000">]</span> <span style="color: #990000">)</span>
          <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">false</span></span><span style="color: #990000">;</span>
     <span style="font-style: italic"><span style="color: #9A1900">// -----------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// setup</span></span>
     <span style="color: #008080">size_t</span> i<span style="color: #990000">;</span>
     <span style="color: #009900">int</span> tag  <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// tape identifier</span></span>
     <span style="color: #009900">int</span> keep <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// do not keep forward mode results in buffer</span></span>
     <span style="color: #009900">int</span> m    <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// number of dependent variables</span></span>
     <span style="color: #009900">int</span> n    <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// number of independent variables</span></span>
     <span style="color: #009900">int</span> d    <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">// highest derivative degree</span></span>
     <span style="color: #009900">double</span> f<span style="color: #990000">;</span>      <span style="font-style: italic"><span style="color: #9A1900">// function value</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// set up for thread_alloc memory allocator (fast and checks for leaks)</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">using</span></span> CppAD<span style="color: #990000">::</span>thread_alloc<span style="color: #990000">;</span> <span style="font-style: italic"><span style="color: #9A1900">// the allocator</span></span>
     <span style="color: #008080">size_t</span> capacity<span style="color: #990000">;</span>           <span style="font-style: italic"><span style="color: #9A1900">// capacity of an allocation</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// choose a vector of polynomial coefficients</span></span>
     CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">uniform_01</span></span><span style="color: #990000">(</span>size<span style="color: #990000">,</span> a<span style="color: #990000">);</span>

     <span style="font-style: italic"><span style="color: #9A1900">// AD copy of the polynomial coefficients</span></span>
     std<span style="color: #990000">::</span><span style="color: #008080">vector&lt;adouble&gt;</span> <span style="font-weight: bold"><span style="color: #000000">A</span></span><span style="color: #990000">(</span>size<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #0000FF">for</span></span><span style="color: #990000">(</span>i <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">;</span> i <span style="color: #990000">&lt;</span> size<span style="color: #990000">;</span> i<span style="color: #990000">++)</span>
          A<span style="color: #990000">[</span>i<span style="color: #990000">]</span> <span style="color: #990000">=</span> a<span style="color: #990000">[</span>i<span style="color: #990000">];</span>

     <span style="font-style: italic"><span style="color: #9A1900">// domain and range space AD values</span></span>
     <span style="color: #008080">adouble</span> Z<span style="color: #990000">,</span> P<span style="color: #990000">;</span>

     <span style="font-style: italic"><span style="color: #9A1900">// allocate arguments to hos_forward</span></span>
     <span style="color: #009900">double</span><span style="color: #990000">*</span> x0 <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span>create_array<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span><span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> capacity<span style="color: #990000">);</span>
     <span style="color: #009900">double</span><span style="color: #990000">*</span> y0 <span style="color: #990000">=</span> thread_alloc<span style="color: #990000">::</span>create_array<span style="color: #990000">&lt;</span><span style="color: #009900">double</span><span style="color: #990000">&gt;(</span><span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> capacity<span style="color: #990000">);</span>
     <span style="color: #009900">double</span><span style="color: #990000">**</span> x <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">adolc_alloc_mat</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>n<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>d<span style="color: #990000">));</span>
     <span style="color: #009900">double</span><span style="color: #990000">**</span> y <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">adolc_alloc_mat</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>m<span style="color: #990000">),</span> <span style="font-weight: bold"><span style="color: #000000">size_t</span></span><span style="color: #990000">(</span>d<span style="color: #990000">));</span>

     <span style="font-style: italic"><span style="color: #9A1900">// Taylor coefficient for argument</span></span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">][</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">1</span><span style="color: #990000">.;</span>  <span style="font-style: italic"><span style="color: #9A1900">// first order</span></span>
     x<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">][</span><span style="color: #993399">1</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">0</span><span style="color: #990000">.;</span>  <span style="font-style: italic"><span style="color: #9A1900">// second order</span></span>

     <span style="font-style: italic"><span style="color: #9A1900">// ----------------------------------------------------------------------</span></span>
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span><span style="color: #990000">(</span> <span style="color: #990000">!</span> global_option<span style="color: #990000">[</span><span style="color: #FF0000">"onetape"</span><span style="color: #990000">]</span> <span style="color: #990000">)</span> <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>repeat<span style="color: #990000">--)</span>
     <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// choose an argument value</span></span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">uniform_01</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> z<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables</span></span>
          <span style="font-weight: bold"><span style="color: #000000">trace_on</span></span><span style="color: #990000">(</span>tag<span style="color: #990000">,</span> keep<span style="color: #990000">);</span>
          Z <span style="color: #990000">&lt;&lt;=</span> z<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// AD computation of the function value</span></span>
          P <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Poly</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> A<span style="color: #990000">,</span> Z<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// create function object f : Z -&gt; P</span></span>
          P <span style="color: #990000">&gt;&gt;=</span> f<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">trace_off</span></span><span style="color: #990000">();</span>

          <span style="font-style: italic"><span style="color: #9A1900">// set the argument value</span></span>
          x0<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> z<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// evaluate the polynomial at the new argument value</span></span>
          <span style="font-weight: bold"><span style="color: #000000">hos_forward</span></span><span style="color: #990000">(</span>tag<span style="color: #990000">,</span> m<span style="color: #990000">,</span> n<span style="color: #990000">,</span> d<span style="color: #990000">,</span> keep<span style="color: #990000">,</span> x0<span style="color: #990000">,</span> x<span style="color: #990000">,</span> y0<span style="color: #990000">,</span> y<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// second derivative is twice second order Taylor coef</span></span>
          ddp<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">][</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
     <span style="color: #FF0000">}</span>
     <span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
     <span style="color: #FF0000">{</span>
          <span style="font-style: italic"><span style="color: #9A1900">// choose an argument value</span></span>
          CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">uniform_01</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> z<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// declare independent variables</span></span>
          <span style="font-weight: bold"><span style="color: #000000">trace_on</span></span><span style="color: #990000">(</span>tag<span style="color: #990000">,</span> keep<span style="color: #990000">);</span>
          Z <span style="color: #990000">&lt;&lt;=</span> z<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

          <span style="font-style: italic"><span style="color: #9A1900">// AD computation of the function value</span></span>
          P <span style="color: #990000">=</span> CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">Poly</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">,</span> A<span style="color: #990000">,</span> Z<span style="color: #990000">);</span>

          <span style="font-style: italic"><span style="color: #9A1900">// create function object f : Z -&gt; P</span></span>
          P <span style="color: #990000">&gt;&gt;=</span> f<span style="color: #990000">;</span>
          <span style="font-weight: bold"><span style="color: #000000">trace_off</span></span><span style="color: #990000">();</span>

          <span style="font-weight: bold"><span style="color: #0000FF">while</span></span><span style="color: #990000">(</span>repeat<span style="color: #990000">--)</span>
          <span style="color: #FF0000">{</span>     <span style="font-style: italic"><span style="color: #9A1900">// get the next argument value</span></span>
               CppAD<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">uniform_01</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">,</span> z<span style="color: #990000">);</span>
               x0<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> z<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">];</span>

               <span style="font-style: italic"><span style="color: #9A1900">// evaluate the polynomial at the new argument value</span></span>
               <span style="font-weight: bold"><span style="color: #000000">hos_forward</span></span><span style="color: #990000">(</span>tag<span style="color: #990000">,</span> m<span style="color: #990000">,</span> n<span style="color: #990000">,</span> d<span style="color: #990000">,</span> keep<span style="color: #990000">,</span> x0<span style="color: #990000">,</span> x<span style="color: #990000">,</span> y0<span style="color: #990000">,</span> y<span style="color: #990000">);</span>

               <span style="font-style: italic"><span style="color: #9A1900">// second derivative is twice second order Taylor coef</span></span>
               ddp<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]</span> <span style="color: #990000">=</span> <span style="color: #993399">2</span><span style="color: #990000">.</span> <span style="color: #990000">*</span> y<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">][</span><span style="color: #993399">1</span><span style="color: #990000">];</span>
          <span style="color: #FF0000">}</span>
     <span style="color: #FF0000">}</span>
     <span style="font-style: italic"><span style="color: #9A1900">// ------------------------------------------------------</span></span>
     <span style="font-style: italic"><span style="color: #9A1900">// tear down</span></span>
     <span style="font-weight: bold"><span style="color: #000000">adolc_free_mat</span></span><span style="color: #990000">(</span>x<span style="color: #990000">);</span>
     <span style="font-weight: bold"><span style="color: #000000">adolc_free_mat</span></span><span style="color: #990000">(</span>y<span style="color: #990000">);</span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">delete_array</span></span><span style="color: #990000">(</span>x0<span style="color: #990000">);</span>
     thread_alloc<span style="color: #990000">::</span><span style="font-weight: bold"><span style="color: #000000">delete_array</span></span><span style="color: #990000">(</span>y0<span style="color: #990000">);</span>

     <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="font-weight: bold"><span style="color: #0000FF">true</span></span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre>

<hr/>Input File: speed/adolc/poly.cpp

</body>
</html>
